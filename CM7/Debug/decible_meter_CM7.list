
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc58  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  0800cef8  0800cef8  0000def8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d460  0800d460  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d460  0800d460  0000e460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d468  0800d468  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d468  0800d468  0000e468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d46c  0800d46c  0000e46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  24000000  0800d470  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b18  240001d8  0800d648  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000cf0  0800d648  0000fcf0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144fc  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000292e  00000000  00000000  00023702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  00026030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3f  00000000  00000000  00026ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040201  00000000  00000000  000279ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001632b  00000000  00000000  00067c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00199d41  00000000  00000000  0007df2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00217c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c58  00000000  00000000  00217cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0021c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800cee0 	.word	0x0800cee0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800cee0 	.word	0x0800cee0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <calculate_decibel>:
/* USER CODE BEGIN 0 */


int16_t audio_buffer[BUFFER_SIZE];

float calculate_decibel(int16_t *buffer, size_t size) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
    float sum = 0.0f;
 80007b6:	f04f 0300 	mov.w	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]

    for (size_t i = 0; i < size; i++) {
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	e01c      	b.n	80007fc <calculate_decibel+0x50>
        float voltage = (float)buffer[i] / 32768.0f; // Normalize 16-bit value
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	4413      	add	r3, r2
 80007ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ce:	ee07 3a90 	vmov	s15, r3
 80007d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007d6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000858 <calculate_decibel+0xac>
 80007da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007de:	edc7 7a03 	vstr	s15, [r7, #12]
        sum += voltage * voltage;
 80007e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80007e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80007ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80007ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007f2:	edc7 7a07 	vstr	s15, [r7, #28]
    for (size_t i = 0; i < size; i++) {
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	3301      	adds	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d3de      	bcc.n	80007c2 <calculate_decibel+0x16>
    }

    float rms = sqrtf(sum / size);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	ee07 3a90 	vmov	s15, r3
 800080a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800080e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000812:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000816:	eeb0 0a66 	vmov.f32	s0, s13
 800081a:	f009 fdeb 	bl	800a3f4 <sqrtf>
 800081e:	ed87 0a05 	vstr	s0, [r7, #20]
    float spl = 20.0f * log10f(rms / REFERENCE_VOLTAGE);
 8000822:	edd7 7a05 	vldr	s15, [r7, #20]
 8000826:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800085c <calculate_decibel+0xb0>
 800082a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800082e:	eeb0 0a47 	vmov.f32	s0, s14
 8000832:	f009 fdb1 	bl	800a398 <log10f>
 8000836:	eef0 7a40 	vmov.f32	s15, s0
 800083a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800083e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000842:	edc7 7a04 	vstr	s15, [r7, #16]

    return spl;
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	ee07 3a90 	vmov	s15, r3
}
 800084c:	eeb0 0a67 	vmov.f32	s0, s15
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	47000000 	.word	0x47000000
 800085c:	37a7c5ac 	.word	0x37a7c5ac

08000860 <_write>:

int _write(int file, char *ptr, int len) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b29a      	uxth	r2, r3
 8000870:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	4804      	ldr	r0, [pc, #16]	@ (8000888 <_write+0x28>)
 8000878:	f008 fc74 	bl	8009164 <HAL_UART_Transmit>
    return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	24000304 	.word	0x24000304

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    memset(audio_buffer, 0xAA, sizeof(audio_buffer)); // Initialize buffer
 8000892:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000896:	21aa      	movs	r1, #170	@ 0xaa
 8000898:	4848      	ldr	r0, [pc, #288]	@ (80009bc <main+0x130>)
 800089a:	f00a fc2b 	bl	800b0f4 <memset>
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800089e:	f000 fa4d 	bl	8000d3c <MPU_Config>

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008a6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008a8:	bf00      	nop
 80008aa:	4b45      	ldr	r3, [pc, #276]	@ (80009c0 <main+0x134>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d004      	beq.n	80008c0 <main+0x34>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	1e5a      	subs	r2, r3, #1
 80008ba:	60fa      	str	r2, [r7, #12]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	dcf4      	bgt.n	80008aa <main+0x1e>
  if ( timeout < 0 )
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da01      	bge.n	80008ca <main+0x3e>
  {
  Error_Handler();
 80008c6:	f000 fa65 	bl	8000d94 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f000 fc8d 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f887 	bl	80009e0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008d2:	f000 f8f9 	bl	8000ac8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008d6:	4b3a      	ldr	r3, [pc, #232]	@ (80009c0 <main+0x134>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008dc:	4a38      	ldr	r2, [pc, #224]	@ (80009c0 <main+0x134>)
 80008de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008e6:	4b36      	ldr	r3, [pc, #216]	@ (80009c0 <main+0x134>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008f4:	2000      	movs	r0, #0
 80008f6:	f003 ff7f 	bl	80047f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008fa:	2100      	movs	r1, #0
 80008fc:	2000      	movs	r0, #0
 80008fe:	f003 ff95 	bl	800482c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000902:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000906:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000908:	bf00      	nop
 800090a:	4b2d      	ldr	r3, [pc, #180]	@ (80009c0 <main+0x134>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d104      	bne.n	8000920 <main+0x94>
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	1e5a      	subs	r2, r3, #1
 800091a:	60fa      	str	r2, [r7, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	dcf4      	bgt.n	800090a <main+0x7e>
if ( timeout < 0 )
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	da01      	bge.n	800092a <main+0x9e>
{
Error_Handler();
 8000926:	f000 fa35 	bl	8000d94 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f000 f9cf 	bl	8000ccc <MX_GPIO_Init>
  MX_BDMA_Init();
 800092e:	f000 f9ad 	bl	8000c8c <MX_BDMA_Init>
  MX_USART1_UART_Init();
 8000932:	f000 f95f 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_SAI4_Init();
 8000936:	f000 f8fd 	bl	8000b34 <MX_SAI4_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting SAI DMA...\r\n");
 800093a:	4822      	ldr	r0, [pc, #136]	@ (80009c4 <main+0x138>)
 800093c:	f00a fbd2 	bl	800b0e4 <puts>
  if (HAL_SAI_Receive_DMA(&hsai_BlockA4, (uint8_t *)audio_buffer, BUFFER_SIZE) != HAL_OK) {
 8000940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000944:	491d      	ldr	r1, [pc, #116]	@ (80009bc <main+0x130>)
 8000946:	4820      	ldr	r0, [pc, #128]	@ (80009c8 <main+0x13c>)
 8000948:	f008 f83c 	bl	80089c4 <HAL_SAI_Receive_DMA>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d007      	beq.n	8000962 <main+0xd6>
      printf("SAI DMA initialization failed! Error: %ld\r\n", hsai_BlockA4.ErrorCode);
 8000952:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <main+0x13c>)
 8000954:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000958:	4619      	mov	r1, r3
 800095a:	481c      	ldr	r0, [pc, #112]	@ (80009cc <main+0x140>)
 800095c:	f00a fb5a 	bl	800b014 <iprintf>
 8000960:	e002      	b.n	8000968 <main+0xdc>
  } else {
      printf("SAI DMA started successfully.\r\n");
 8000962:	481b      	ldr	r0, [pc, #108]	@ (80009d0 <main+0x144>)
 8000964:	f00a fbbe 	bl	800b0e4 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("Audio Buffer Data:\r\n");
 8000968:	481a      	ldr	r0, [pc, #104]	@ (80009d4 <main+0x148>)
 800096a:	f00a fbbb 	bl	800b0e4 <puts>
	      for (int i = 0; i < 10; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	e00b      	b.n	800098c <main+0x100>
	          printf("[%d]: %d\r\n", i, audio_buffer[i]);
 8000974:	4a11      	ldr	r2, [pc, #68]	@ (80009bc <main+0x130>)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800097c:	461a      	mov	r2, r3
 800097e:	68b9      	ldr	r1, [r7, #8]
 8000980:	4815      	ldr	r0, [pc, #84]	@ (80009d8 <main+0x14c>)
 8000982:	f00a fb47 	bl	800b014 <iprintf>
	      for (int i = 0; i < 10; i++) {
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	3301      	adds	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	2b09      	cmp	r3, #9
 8000990:	ddf0      	ble.n	8000974 <main+0xe8>
	      }
	      float decibel_level = calculate_decibel(audio_buffer, BUFFER_SIZE);
 8000992:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000996:	4809      	ldr	r0, [pc, #36]	@ (80009bc <main+0x130>)
 8000998:	f7ff ff08 	bl	80007ac <calculate_decibel>
 800099c:	ed87 0a01 	vstr	s0, [r7, #4]
	      printf("SPL: %.2f dB\r\n", decibel_level);
 80009a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80009a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009a8:	ec53 2b17 	vmov	r2, r3, d7
 80009ac:	480b      	ldr	r0, [pc, #44]	@ (80009dc <main+0x150>)
 80009ae:	f00a fb31 	bl	800b014 <iprintf>
	      HAL_Delay(1000);
 80009b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009b6:	f000 fca9 	bl	800130c <HAL_Delay>
  {
 80009ba:	e7d5      	b.n	8000968 <main+0xdc>
 80009bc:	24000398 	.word	0x24000398
 80009c0:	58024400 	.word	0x58024400
 80009c4:	0800cef8 	.word	0x0800cef8
 80009c8:	240001f4 	.word	0x240001f4
 80009cc:	0800cf10 	.word	0x0800cf10
 80009d0:	0800cf3c 	.word	0x0800cf3c
 80009d4:	0800cf5c 	.word	0x0800cf5c
 80009d8:	0800cf70 	.word	0x0800cf70
 80009dc:	0800cf7c 	.word	0x0800cf7c

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b09c      	sub	sp, #112	@ 0x70
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ea:	224c      	movs	r2, #76	@ 0x4c
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f00a fb80 	bl	800b0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2220      	movs	r2, #32
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f00a fb7a 	bl	800b0f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a00:	2004      	movs	r0, #4
 8000a02:	f003 ff27 	bl	8004854 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a06:	2300      	movs	r3, #0
 8000a08:	603b      	str	r3, [r7, #0]
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000abc <SystemClock_Config+0xdc>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a0e:	4a2b      	ldr	r2, [pc, #172]	@ (8000abc <SystemClock_Config+0xdc>)
 8000a10:	f023 0301 	bic.w	r3, r3, #1
 8000a14:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a16:	4b29      	ldr	r3, [pc, #164]	@ (8000abc <SystemClock_Config+0xdc>)
 8000a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <SystemClock_Config+0xe0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a28:	4a25      	ldr	r2, [pc, #148]	@ (8000ac0 <SystemClock_Config+0xe0>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <SystemClock_Config+0xe0>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	bf00      	nop
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <SystemClock_Config+0xe0>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a4a:	d1f8      	bne.n	8000a3e <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <SystemClock_Config+0xe4>)
 8000a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a50:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac4 <SystemClock_Config+0xe4>)
 8000a52:	f023 0303 	bic.w	r3, r3, #3
 8000a56:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a60:	2340      	movs	r3, #64	@ 0x40
 8000a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f003 ff4b 	bl	8004908 <HAL_RCC_OscConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a78:	f000 f98c 	bl	8000d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7c:	233f      	movs	r3, #63	@ 0x3f
 8000a7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a98:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f004 fb8a 	bl	80051bc <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000aae:	f000 f971 	bl	8000d94 <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3770      	adds	r7, #112	@ 0x70
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	58000400 	.word	0x58000400
 8000ac0:	58024800 	.word	0x58024800
 8000ac4:	58024400 	.word	0x58024400

08000ac8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0b2      	sub	sp, #200	@ 0xc8
 8000acc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	22c8      	movs	r2, #200	@ 0xc8
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f00a fb0d 	bl	800b0f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A|RCC_PERIPHCLK_USART1;
 8000ada:	f240 4201 	movw	r2, #1025	@ 0x401
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 10;
 8000aea:	230a      	movs	r3, #10
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 10;
 8000aee:	230a      	movs	r3, #10
 8000af0:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000af2:	2304      	movs	r3, #4
 8000af4:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000afa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000b00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b04:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL3;
 8000b10:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 feda 	bl	80058d4 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <PeriphCommonClock_Config+0x62>
  {
    Error_Handler();
 8000b26:	f000 f935 	bl	8000d94 <Error_Handler>
  }
}
 8000b2a:	bf00      	nop
 8000b2c:	37c8      	adds	r7, #200	@ 0xc8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <MX_SAI4_Init>:
  * @brief SAI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI4_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END SAI4_Init 0 */

  /* USER CODE BEGIN SAI4_Init 1 */

  /* USER CODE END SAI4_Init 1 */
  hsai_BlockA4.Instance = SAI4_Block_A;
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000bec <MX_SAI4_Init+0xb8>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hsai_BlockA4.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA4.Init.AudioMode = SAI_MODEMASTER_RX;
 8000b44:	4b28      	ldr	r3, [pc, #160]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	605a      	str	r2, [r3, #4]
  hsai_BlockA4.Init.DataSize = SAI_DATASIZE_16;
 8000b4a:	4b27      	ldr	r3, [pc, #156]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b4c:	2280      	movs	r2, #128	@ 0x80
 8000b4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA4.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b50:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA4.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA4.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b5c:	4b22      	ldr	r3, [pc, #136]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hsai_BlockA4.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	615a      	str	r2, [r3, #20]
  hsai_BlockA4.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  hsai_BlockA4.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	61da      	str	r2, [r3, #28]
  hsai_BlockA4.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b76:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf0 <MX_SAI4_Init+0xbc>)
 8000b78:	621a      	str	r2, [r3, #32]
  hsai_BlockA4.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA4.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA4.Init.PdmInit.Activation = ENABLE;
 8000b86:	4b18      	ldr	r3, [pc, #96]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA4.Init.PdmInit.MicPairsNbr = 1;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA4.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA4.FrameInit.FrameLength = 16;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA4.FrameInit.ActiveFrameLength = 1;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA4.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA4.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA4.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA4.SlotInit.FirstBitOffset = 0;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA4.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA4.SlotInit.SlotNumber = 1;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA4.SlotInit.SlotActive = 0x00000000;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA4) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_SAI4_Init+0xb4>)
 8000bd4:	f007 fbbc 	bl	8008350 <HAL_SAI_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_SAI4_Init+0xae>
  {
    Error_Handler();
 8000bde:	f000 f8d9 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN SAI4_Init 2 */

  /* USER CODE END SAI4_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	240001f4 	.word	0x240001f4
 8000bec:	58005404 	.word	0x58005404
 8000bf0:	0002ee00 	.word	0x0002ee00

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000bfa:	4a23      	ldr	r2, [pc, #140]	@ (8000c88 <MX_USART1_UART_Init+0x94>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c30:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c36:	4b13      	ldr	r3, [pc, #76]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3c:	4811      	ldr	r0, [pc, #68]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c3e:	f008 fa41 	bl	80090c4 <HAL_UART_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c48:	f000 f8a4 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c50:	f009 fad7 	bl	800a202 <HAL_UARTEx_SetTxFifoThreshold>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f000 f89b 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c62:	f009 fb0c 	bl	800a27e <HAL_UARTEx_SetRxFifoThreshold>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f000 f892 	bl	8000d94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_USART1_UART_Init+0x90>)
 8000c72:	f009 fa8d 	bl	800a190 <HAL_UARTEx_DisableFifoMode>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 f88a 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000304 	.word	0x24000304
 8000c88:	40011000 	.word	0x40011000

08000c8c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000c92:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc8 <MX_BDMA_Init+0x3c>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc8 <MX_BDMA_Init+0x3c>)
 8000c9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca2:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <MX_BDMA_Init+0x3c>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	2081      	movs	r0, #129	@ 0x81
 8000cb6:	f000 fc34 	bl	8001522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000cba:	2081      	movs	r0, #129	@ 0x81
 8000cbc:	f000 fc4b 	bl	8001556 <HAL_NVIC_EnableIRQ>

}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	58024400 	.word	0x58024400

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd2:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b11      	ldr	r3, [pc, #68]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	4a10      	ldr	r2, [pc, #64]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d00:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	4a08      	ldr	r2, [pc, #32]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <MX_GPIO_Init+0x6c>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	58024400 	.word	0x58024400

08000d3c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000d42:	463b      	mov	r3, r7
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d4e:	f000 fc1d 	bl	800158c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d52:	2301      	movs	r3, #1
 8000d54:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d5e:	231f      	movs	r3, #31
 8000d60:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d62:	2387      	movs	r3, #135	@ 0x87
 8000d64:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d72:	2301      	movs	r3, #1
 8000d74:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d7e:	463b      	mov	r3, r7
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 fc3b 	bl	80015fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d86:	2004      	movs	r0, #4
 8000d88:	f000 fc18 	bl	80015bc <HAL_MPU_Enable>

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <Error_Handler+0x8>

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <HAL_MspInit+0x30>)
 8000da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dac:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x30>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x30>)
 8000db8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	58024400 	.word	0x58024400

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a1a      	ldr	r2, [pc, #104]	@ (8000e5c <HAL_UART_MspInit+0x88>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d12e      	bne.n	8000e54 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dfc:	4a18      	ldr	r2, [pc, #96]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e06:	4b16      	ldr	r3, [pc, #88]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a11      	ldr	r2, [pc, #68]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b0e      	ldr	r3, [pc, #56]	@ (8000e60 <HAL_UART_MspInit+0x8c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000e32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e44:	2307      	movs	r3, #7
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <HAL_UART_MspInit+0x90>)
 8000e50:	f003 fb22 	bl	8004498 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	58024400 	.word	0x58024400
 8000e64:	58020000 	.word	0x58020000

08000e68 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai4_a;

static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	@ 0x30
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a49      	ldr	r2, [pc, #292]	@ (8000f9c <HAL_SAI_MspInit+0x134>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	f040 808b 	bne.w	8000f92 <HAL_SAI_MspInit+0x12a>
    {
    /* Peripheral clock enable */
    if (SAI4_client == 0)
 8000e7c:	4b48      	ldr	r3, [pc, #288]	@ (8000fa0 <HAL_SAI_MspInit+0x138>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d116      	bne.n	8000eb2 <HAL_SAI_MspInit+0x4a>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 8000e84:	4b47      	ldr	r3, [pc, #284]	@ (8000fa4 <HAL_SAI_MspInit+0x13c>)
 8000e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e8a:	4a46      	ldr	r2, [pc, #280]	@ (8000fa4 <HAL_SAI_MspInit+0x13c>)
 8000e8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e90:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e94:	4b43      	ldr	r3, [pc, #268]	@ (8000fa4 <HAL_SAI_MspInit+0x13c>)
 8000e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2092      	movs	r0, #146	@ 0x92
 8000ea8:	f000 fb3b 	bl	8001522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI4_IRQn);
 8000eac:	2092      	movs	r0, #146	@ 0x92
 8000eae:	f000 fb52 	bl	8001556 <HAL_NVIC_EnableIRQ>
    }
    SAI4_client ++;
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8000fa0 <HAL_SAI_MspInit+0x138>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a39      	ldr	r2, [pc, #228]	@ (8000fa0 <HAL_SAI_MspInit+0x138>)
 8000eba:	6013      	str	r3, [r2, #0]

    /**SAI4_A_Block_A GPIO Configuration
    PE2     ------> SAI4_CK1
    PC1     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4834      	ldr	r0, [pc, #208]	@ (8000fa8 <HAL_SAI_MspInit+0x140>)
 8000ed8:	f003 fade 	bl	8004498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000edc:	2302      	movs	r3, #2
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000eec:	230a      	movs	r3, #10
 8000eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	482d      	ldr	r0, [pc, #180]	@ (8000fac <HAL_SAI_MspInit+0x144>)
 8000ef8:	f003 face 	bl	8004498 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 8000efc:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000efe:	4a2d      	ldr	r2, [pc, #180]	@ (8000fb4 <HAL_SAI_MspInit+0x14c>)
 8000f00:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8000f02:	4b2b      	ldr	r3, [pc, #172]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f04:	220f      	movs	r2, #15
 8000f06:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f08:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0e:	4b28      	ldr	r3, [pc, #160]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8000f14:	4b26      	ldr	r3, [pc, #152]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f22:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f24:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f2a:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 8000f2c:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f32:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8000f34:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 8000f3c:	481c      	ldr	r0, [pc, #112]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f3e:	f000 fb9d 	bl	800167c <HAL_DMA_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8000f48:	f7ff ff24 	bl	8000d94 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 8000f4c:	230e      	movs	r3, #14
 8000f4e:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = ENABLE;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	4619      	mov	r1, r3
 8000f66:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f68:	f003 f9d0 	bl	800430c <HAL_DMAEx_ConfigMuxSync>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_SAI_MspInit+0x10e>
    {
      Error_Handler();
 8000f72:	f7ff ff0f 	bl	8000d94 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8000f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000f8c:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_SAI_MspInit+0x148>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6393      	str	r3, [r2, #56]	@ 0x38

    }
}
 8000f92:	bf00      	nop
 8000f94:	3730      	adds	r7, #48	@ 0x30
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	58005404 	.word	0x58005404
 8000fa0:	24000b98 	.word	0x24000b98
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58021000 	.word	0x58021000
 8000fac:	58020800 	.word	0x58020800
 8000fb0:	2400028c 	.word	0x2400028c
 8000fb4:	58025408 	.word	0x58025408

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 f95d 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai4_a);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <BDMA_Channel0_IRQHandler+0x10>)
 800101e:	f001 fe57 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2400028c 	.word	0x2400028c

0800102c <SAI4_IRQHandler>:

/**
  * @brief This function handles SAI4 global interrupt.
  */
void SAI4_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI4_IRQn 0 */
	HAL_SAI_IRQHandler(&hsai_BlockA4);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <SAI4_IRQHandler+0x10>)
 8001032:	f007 fd5b 	bl	8008aec <HAL_SAI_IRQHandler>
  /* USER CODE END SAI4_IRQn 0 */

  /* USER CODE BEGIN SAI4_IRQn 1 */

  /* USER CODE END SAI4_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	240001f4 	.word	0x240001f4

08001040 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return 1;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <_kill>:

int _kill(int pid, int sig)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800105a:	f00a f857 	bl	800b10c <__errno>
 800105e:	4603      	mov	r3, r0
 8001060:	2216      	movs	r2, #22
 8001062:	601a      	str	r2, [r3, #0]
  return -1;
 8001064:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <_exit>:

void _exit (int status)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001078:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ffe7 	bl	8001050 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001082:	bf00      	nop
 8001084:	e7fd      	b.n	8001082 <_exit+0x12>

08001086 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	60f8      	str	r0, [r7, #12]
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	e00a      	b.n	80010ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001098:	f3af 8000 	nop.w
 800109c:	4601      	mov	r1, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1c5a      	adds	r2, r3, #1
 80010a2:	60ba      	str	r2, [r7, #8]
 80010a4:	b2ca      	uxtb	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbf0      	blt.n	8001098 <_read+0x12>
  }

  return len;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010e8:	605a      	str	r2, [r3, #4]
  return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_isatty>:

int _isatty(int file)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f009 ffd8 	bl	800b10c <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	@ (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	24080000 	.word	0x24080000
 8001188:	00000400 	.word	0x00000400
 800118c:	24000b9c 	.word	0x24000b9c
 8001190:	24000cf0 	.word	0x24000cf0

08001194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001194:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001198:	f7ff fa72 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800119e:	490d      	ldr	r1, [pc, #52]	@ (80011d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011a0:	4a0d      	ldr	r2, [pc, #52]	@ (80011d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a4:	e002      	b.n	80011ac <LoopCopyDataInit>

080011a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011aa:	3304      	adds	r3, #4

080011ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b0:	d3f9      	bcc.n	80011a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011b4:	4c0a      	ldr	r4, [pc, #40]	@ (80011e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b8:	e001      	b.n	80011be <LoopFillZerobss>

080011ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011bc:	3204      	adds	r2, #4

080011be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c0:	d3fb      	bcc.n	80011ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c2:	f009 ffa9 	bl	800b118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011c6:	f7ff fb61 	bl	800088c <main>
  bx  lr
 80011ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011cc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011d4:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 80011d8:	0800d470 	.word	0x0800d470
  ldr r2, =_sbss
 80011dc:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80011e0:	24000cf0 	.word	0x24000cf0

080011e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC3_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ee:	2003      	movs	r0, #3
 80011f0:	f000 f98c 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011f4:	f004 f998 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <HAL_Init+0x68>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	f003 030f 	and.w	r3, r3, #15
 8001204:	4913      	ldr	r1, [pc, #76]	@ (8001254 <HAL_Init+0x6c>)
 8001206:	5ccb      	ldrb	r3, [r1, r3]
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	fa22 f303 	lsr.w	r3, r2, r3
 8001210:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_Init+0x68>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	4a0e      	ldr	r2, [pc, #56]	@ (8001254 <HAL_Init+0x6c>)
 800121c:	5cd3      	ldrb	r3, [r2, r3]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
 8001228:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <HAL_Init+0x70>)
 800122a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800122c:	4a0b      	ldr	r2, [pc, #44]	@ (800125c <HAL_Init+0x74>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f814 	bl	8001260 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e002      	b.n	8001248 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001242:	f7ff fdad 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	58024400 	.word	0x58024400
 8001254:	0800cf8c 	.word	0x0800cf8c
 8001258:	24000004 	.word	0x24000004
 800125c:	24000000 	.word	0x24000000

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <HAL_InitTick+0x60>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e021      	b.n	80012b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_InitTick+0x64>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <HAL_InitTick+0x60>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4619      	mov	r1, r3
 800127e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001282:	fbb3 f3f1 	udiv	r3, r3, r1
 8001286:	fbb2 f3f3 	udiv	r3, r2, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f971 	bl	8001572 <HAL_SYSTICK_Config>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00e      	b.n	80012b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b0f      	cmp	r3, #15
 800129e:	d80a      	bhi.n	80012b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a0:	2200      	movs	r2, #0
 80012a2:	6879      	ldr	r1, [r7, #4]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012a8:	f000 f93b 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ac:	4a06      	ldr	r2, [pc, #24]	@ (80012c8 <HAL_InitTick+0x68>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e000      	b.n	80012b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2400000c 	.word	0x2400000c
 80012c4:	24000000 	.word	0x24000000
 80012c8:	24000008 	.word	0x24000008

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	2400000c 	.word	0x2400000c
 80012f0:	24000ba0 	.word	0x24000ba0

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	24000ba0 	.word	0x24000ba0

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2400000c 	.word	0x2400000c

08001354 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001358:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <HAL_GetREVID+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0c1b      	lsrs	r3, r3, #16
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	5c001000 	.word	0x5c001000

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <__NVIC_SetPriorityGrouping+0x40>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	4313      	orrs	r3, r2
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	@ (80013ac <__NVIC_SetPriorityGrouping+0x40>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00
 80013b0:	05fa0000 	.word	0x05fa0000

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4907      	ldr	r1, [pc, #28]	@ (8001408 <__NVIC_EnableIRQ+0x38>)
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000e100 	.word	0xe000e100

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	@ (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	@ (800145c <__NVIC_SetPriority+0x50>)
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	@ 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	@ (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff29 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff40 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff33 	bl	80013d0 <__NVIC_EnableIRQ>
}
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ffa4 	bl	80014c8 <SysTick_Config>
 8001580:	4603      	mov	r3, r0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001590:	f3bf 8f5f 	dmb	sy
}
 8001594:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <HAL_MPU_Disable+0x28>)
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	4a06      	ldr	r2, [pc, #24]	@ (80015b4 <HAL_MPU_Disable+0x28>)
 800159c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015a2:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <HAL_MPU_Disable+0x2c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	e000ed90 	.word	0xe000ed90

080015bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_MPU_Enable+0x38>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_MPU_Enable+0x3c>)
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	4a09      	ldr	r2, [pc, #36]	@ (80015f8 <HAL_MPU_Enable+0x3c>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015d8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015da:	f3bf 8f4f 	dsb	sy
}
 80015de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015e0:	f3bf 8f6f 	isb	sy
}
 80015e4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed90 	.word	0xe000ed90
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	785a      	ldrb	r2, [r3, #1]
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <HAL_MPU_ConfigRegion+0x7c>)
 800160a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <HAL_MPU_ConfigRegion+0x7c>)
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4a19      	ldr	r2, [pc, #100]	@ (8001678 <HAL_MPU_ConfigRegion+0x7c>)
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001618:	4a17      	ldr	r2, [pc, #92]	@ (8001678 <HAL_MPU_ConfigRegion+0x7c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7b1b      	ldrb	r3, [r3, #12]
 8001624:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	7adb      	ldrb	r3, [r3, #11]
 800162a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800162c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7a9b      	ldrb	r3, [r3, #10]
 8001632:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001634:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7b5b      	ldrb	r3, [r3, #13]
 800163a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800163c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7b9b      	ldrb	r3, [r3, #14]
 8001642:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001644:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7bdb      	ldrb	r3, [r3, #15]
 800164a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800164c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7a5b      	ldrb	r3, [r3, #9]
 8001652:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7a1b      	ldrb	r3, [r3, #8]
 800165a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800165c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001664:	4a04      	ldr	r2, [pc, #16]	@ (8001678 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001666:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001668:	6113      	str	r3, [r2, #16]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000ed90 	.word	0xe000ed90

0800167c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fe36 	bl	80012f4 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d101      	bne.n	8001694 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e316      	b.n	8001cc2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a66      	ldr	r2, [pc, #408]	@ (8001834 <HAL_DMA_Init+0x1b8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d04a      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a65      	ldr	r2, [pc, #404]	@ (8001838 <HAL_DMA_Init+0x1bc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d045      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a63      	ldr	r2, [pc, #396]	@ (800183c <HAL_DMA_Init+0x1c0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d040      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a62      	ldr	r2, [pc, #392]	@ (8001840 <HAL_DMA_Init+0x1c4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d03b      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a60      	ldr	r2, [pc, #384]	@ (8001844 <HAL_DMA_Init+0x1c8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d036      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a5f      	ldr	r2, [pc, #380]	@ (8001848 <HAL_DMA_Init+0x1cc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d031      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a5d      	ldr	r2, [pc, #372]	@ (800184c <HAL_DMA_Init+0x1d0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d02c      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a5c      	ldr	r2, [pc, #368]	@ (8001850 <HAL_DMA_Init+0x1d4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d027      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5a      	ldr	r2, [pc, #360]	@ (8001854 <HAL_DMA_Init+0x1d8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d022      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a59      	ldr	r2, [pc, #356]	@ (8001858 <HAL_DMA_Init+0x1dc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d01d      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a57      	ldr	r2, [pc, #348]	@ (800185c <HAL_DMA_Init+0x1e0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d018      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a56      	ldr	r2, [pc, #344]	@ (8001860 <HAL_DMA_Init+0x1e4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d013      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a54      	ldr	r2, [pc, #336]	@ (8001864 <HAL_DMA_Init+0x1e8>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00e      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a53      	ldr	r2, [pc, #332]	@ (8001868 <HAL_DMA_Init+0x1ec>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d009      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a51      	ldr	r2, [pc, #324]	@ (800186c <HAL_DMA_Init+0x1f0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d004      	beq.n	8001734 <HAL_DMA_Init+0xb8>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a50      	ldr	r2, [pc, #320]	@ (8001870 <HAL_DMA_Init+0x1f4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_DMA_Init+0xbc>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_DMA_Init+0xbe>
 8001738:	2300      	movs	r3, #0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 813b 	beq.w	80019b6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a37      	ldr	r2, [pc, #220]	@ (8001834 <HAL_DMA_Init+0x1b8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d04a      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a36      	ldr	r2, [pc, #216]	@ (8001838 <HAL_DMA_Init+0x1bc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d045      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a34      	ldr	r2, [pc, #208]	@ (800183c <HAL_DMA_Init+0x1c0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d040      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a33      	ldr	r2, [pc, #204]	@ (8001840 <HAL_DMA_Init+0x1c4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d03b      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a31      	ldr	r2, [pc, #196]	@ (8001844 <HAL_DMA_Init+0x1c8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d036      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a30      	ldr	r2, [pc, #192]	@ (8001848 <HAL_DMA_Init+0x1cc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d031      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a2e      	ldr	r2, [pc, #184]	@ (800184c <HAL_DMA_Init+0x1d0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d02c      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a2d      	ldr	r2, [pc, #180]	@ (8001850 <HAL_DMA_Init+0x1d4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d027      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2b      	ldr	r2, [pc, #172]	@ (8001854 <HAL_DMA_Init+0x1d8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d022      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001858 <HAL_DMA_Init+0x1dc>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d01d      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a28      	ldr	r2, [pc, #160]	@ (800185c <HAL_DMA_Init+0x1e0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d018      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a27      	ldr	r2, [pc, #156]	@ (8001860 <HAL_DMA_Init+0x1e4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d013      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a25      	ldr	r2, [pc, #148]	@ (8001864 <HAL_DMA_Init+0x1e8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00e      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a24      	ldr	r2, [pc, #144]	@ (8001868 <HAL_DMA_Init+0x1ec>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d009      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a22      	ldr	r2, [pc, #136]	@ (800186c <HAL_DMA_Init+0x1f0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d004      	beq.n	80017f0 <HAL_DMA_Init+0x174>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a21      	ldr	r2, [pc, #132]	@ (8001870 <HAL_DMA_Init+0x1f4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d108      	bne.n	8001802 <HAL_DMA_Init+0x186>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e007      	b.n	8001812 <HAL_DMA_Init+0x196>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001812:	e02f      	b.n	8001874 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001814:	f7ff fd6e 	bl	80012f4 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b05      	cmp	r3, #5
 8001820:	d928      	bls.n	8001874 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2220      	movs	r2, #32
 8001826:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2203      	movs	r2, #3
 800182c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e246      	b.n	8001cc2 <HAL_DMA_Init+0x646>
 8001834:	40020010 	.word	0x40020010
 8001838:	40020028 	.word	0x40020028
 800183c:	40020040 	.word	0x40020040
 8001840:	40020058 	.word	0x40020058
 8001844:	40020070 	.word	0x40020070
 8001848:	40020088 	.word	0x40020088
 800184c:	400200a0 	.word	0x400200a0
 8001850:	400200b8 	.word	0x400200b8
 8001854:	40020410 	.word	0x40020410
 8001858:	40020428 	.word	0x40020428
 800185c:	40020440 	.word	0x40020440
 8001860:	40020458 	.word	0x40020458
 8001864:	40020470 	.word	0x40020470
 8001868:	40020488 	.word	0x40020488
 800186c:	400204a0 	.word	0x400204a0
 8001870:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1c8      	bne.n	8001814 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4b83      	ldr	r3, [pc, #524]	@ (8001a9c <HAL_DMA_Init+0x420>)
 800188e:	4013      	ands	r3, r2
 8001890:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800189a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d107      	bne.n	80018d8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d0:	4313      	orrs	r3, r2
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80018d8:	4b71      	ldr	r3, [pc, #452]	@ (8001aa0 <HAL_DMA_Init+0x424>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b71      	ldr	r3, [pc, #452]	@ (8001aa4 <HAL_DMA_Init+0x428>)
 80018de:	4013      	ands	r3, r2
 80018e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018e4:	d328      	bcc.n	8001938 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b28      	cmp	r3, #40	@ 0x28
 80018ec:	d903      	bls.n	80018f6 <HAL_DMA_Init+0x27a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80018f4:	d917      	bls.n	8001926 <HAL_DMA_Init+0x2aa>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80018fc:	d903      	bls.n	8001906 <HAL_DMA_Init+0x28a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b42      	cmp	r3, #66	@ 0x42
 8001904:	d90f      	bls.n	8001926 <HAL_DMA_Init+0x2aa>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b46      	cmp	r3, #70	@ 0x46
 800190c:	d903      	bls.n	8001916 <HAL_DMA_Init+0x29a>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b48      	cmp	r3, #72	@ 0x48
 8001914:	d907      	bls.n	8001926 <HAL_DMA_Init+0x2aa>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b4e      	cmp	r3, #78	@ 0x4e
 800191c:	d905      	bls.n	800192a <HAL_DMA_Init+0x2ae>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b52      	cmp	r3, #82	@ 0x52
 8001924:	d801      	bhi.n	800192a <HAL_DMA_Init+0x2ae>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_DMA_Init+0x2b0>
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001936:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f023 0307 	bic.w	r3, r3, #7
 800194e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001954:	697a      	ldr	r2, [r7, #20]
 8001956:	4313      	orrs	r3, r2
 8001958:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	2b04      	cmp	r3, #4
 8001960:	d117      	bne.n	8001992 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00e      	beq.n	8001992 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f002 fb3f 	bl	8003ff8 <DMA_CheckFifoParam>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2240      	movs	r2, #64	@ 0x40
 8001984:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e197      	b.n	8001cc2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f002 fa7a 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	223f      	movs	r2, #63	@ 0x3f
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	e0cd      	b.n	8001b52 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa8 <HAL_DMA_Init+0x42c>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d022      	beq.n	8001a06 <HAL_DMA_Init+0x38a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a39      	ldr	r2, [pc, #228]	@ (8001aac <HAL_DMA_Init+0x430>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d01d      	beq.n	8001a06 <HAL_DMA_Init+0x38a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a38      	ldr	r2, [pc, #224]	@ (8001ab0 <HAL_DMA_Init+0x434>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d018      	beq.n	8001a06 <HAL_DMA_Init+0x38a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a36      	ldr	r2, [pc, #216]	@ (8001ab4 <HAL_DMA_Init+0x438>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_DMA_Init+0x38a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a35      	ldr	r2, [pc, #212]	@ (8001ab8 <HAL_DMA_Init+0x43c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d00e      	beq.n	8001a06 <HAL_DMA_Init+0x38a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a33      	ldr	r2, [pc, #204]	@ (8001abc <HAL_DMA_Init+0x440>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d009      	beq.n	8001a06 <HAL_DMA_Init+0x38a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a32      	ldr	r2, [pc, #200]	@ (8001ac0 <HAL_DMA_Init+0x444>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d004      	beq.n	8001a06 <HAL_DMA_Init+0x38a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a30      	ldr	r2, [pc, #192]	@ (8001ac4 <HAL_DMA_Init+0x448>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d101      	bne.n	8001a0a <HAL_DMA_Init+0x38e>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_DMA_Init+0x390>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8097 	beq.w	8001b40 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a24      	ldr	r2, [pc, #144]	@ (8001aa8 <HAL_DMA_Init+0x42c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d021      	beq.n	8001a60 <HAL_DMA_Init+0x3e4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a22      	ldr	r2, [pc, #136]	@ (8001aac <HAL_DMA_Init+0x430>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01c      	beq.n	8001a60 <HAL_DMA_Init+0x3e4>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <HAL_DMA_Init+0x434>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d017      	beq.n	8001a60 <HAL_DMA_Init+0x3e4>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <HAL_DMA_Init+0x438>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d012      	beq.n	8001a60 <HAL_DMA_Init+0x3e4>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <HAL_DMA_Init+0x43c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d00d      	beq.n	8001a60 <HAL_DMA_Init+0x3e4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1c      	ldr	r2, [pc, #112]	@ (8001abc <HAL_DMA_Init+0x440>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d008      	beq.n	8001a60 <HAL_DMA_Init+0x3e4>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac0 <HAL_DMA_Init+0x444>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d003      	beq.n	8001a60 <HAL_DMA_Init+0x3e4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	@ (8001ac4 <HAL_DMA_Init+0x448>)
 8001a5e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2202      	movs	r2, #2
 8001a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <HAL_DMA_Init+0x44c>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b40      	cmp	r3, #64	@ 0x40
 8001a86:	d021      	beq.n	8001acc <HAL_DMA_Init+0x450>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b80      	cmp	r3, #128	@ 0x80
 8001a8e:	d102      	bne.n	8001a96 <HAL_DMA_Init+0x41a>
 8001a90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a94:	e01b      	b.n	8001ace <HAL_DMA_Init+0x452>
 8001a96:	2300      	movs	r3, #0
 8001a98:	e019      	b.n	8001ace <HAL_DMA_Init+0x452>
 8001a9a:	bf00      	nop
 8001a9c:	fe10803f 	.word	0xfe10803f
 8001aa0:	5c001000 	.word	0x5c001000
 8001aa4:	ffff0000 	.word	0xffff0000
 8001aa8:	58025408 	.word	0x58025408
 8001aac:	5802541c 	.word	0x5802541c
 8001ab0:	58025430 	.word	0x58025430
 8001ab4:	58025444 	.word	0x58025444
 8001ab8:	58025458 	.word	0x58025458
 8001abc:	5802546c 	.word	0x5802546c
 8001ac0:	58025480 	.word	0x58025480
 8001ac4:	58025494 	.word	0x58025494
 8001ac8:	fffe000f 	.word	0xfffe000f
 8001acc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68d2      	ldr	r2, [r2, #12]
 8001ad2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ad4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001adc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ae4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001aec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001afc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b6e      	ldr	r3, [pc, #440]	@ (8001ccc <HAL_DMA_Init+0x650>)
 8001b14:	4413      	add	r3, r2
 8001b16:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd0 <HAL_DMA_Init+0x654>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	009a      	lsls	r2, r3, #2
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f002 f9b5 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2201      	movs	r2, #1
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	e008      	b.n	8001b52 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2240      	movs	r2, #64	@ 0x40
 8001b44:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0b7      	b.n	8001cc2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd4 <HAL_DMA_Init+0x658>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d072      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd8 <HAL_DMA_Init+0x65c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d06d      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cdc <HAL_DMA_Init+0x660>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d068      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce0 <HAL_DMA_Init+0x664>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d063      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <HAL_DMA_Init+0x668>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d05e      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a57      	ldr	r2, [pc, #348]	@ (8001ce8 <HAL_DMA_Init+0x66c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d059      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_DMA_Init+0x670>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d054      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a54      	ldr	r2, [pc, #336]	@ (8001cf0 <HAL_DMA_Init+0x674>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d04f      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a53      	ldr	r2, [pc, #332]	@ (8001cf4 <HAL_DMA_Init+0x678>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04a      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a51      	ldr	r2, [pc, #324]	@ (8001cf8 <HAL_DMA_Init+0x67c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d045      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a50      	ldr	r2, [pc, #320]	@ (8001cfc <HAL_DMA_Init+0x680>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d040      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d00 <HAL_DMA_Init+0x684>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d03b      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a4d      	ldr	r2, [pc, #308]	@ (8001d04 <HAL_DMA_Init+0x688>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d036      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d08 <HAL_DMA_Init+0x68c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d031      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a4a      	ldr	r2, [pc, #296]	@ (8001d0c <HAL_DMA_Init+0x690>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d02c      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a48      	ldr	r2, [pc, #288]	@ (8001d10 <HAL_DMA_Init+0x694>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d027      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a47      	ldr	r2, [pc, #284]	@ (8001d14 <HAL_DMA_Init+0x698>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a45      	ldr	r2, [pc, #276]	@ (8001d18 <HAL_DMA_Init+0x69c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01d      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a44      	ldr	r2, [pc, #272]	@ (8001d1c <HAL_DMA_Init+0x6a0>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d018      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a42      	ldr	r2, [pc, #264]	@ (8001d20 <HAL_DMA_Init+0x6a4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a41      	ldr	r2, [pc, #260]	@ (8001d24 <HAL_DMA_Init+0x6a8>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00e      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3f      	ldr	r2, [pc, #252]	@ (8001d28 <HAL_DMA_Init+0x6ac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a3e      	ldr	r2, [pc, #248]	@ (8001d2c <HAL_DMA_Init+0x6b0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d004      	beq.n	8001c42 <HAL_DMA_Init+0x5c6>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d30 <HAL_DMA_Init+0x6b4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_DMA_Init+0x5ca>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_Init+0x5cc>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d032      	beq.n	8001cb2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f002 fa4f 	bl	80040f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b80      	cmp	r3, #128	@ 0x80
 8001c58:	d102      	bne.n	8001c60 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c74:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_DMA_Init+0x624>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d80c      	bhi.n	8001ca0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f002 facc 	bl	8004224 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	e008      	b.n	8001cb2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	a7fdabf8 	.word	0xa7fdabf8
 8001cd0:	cccccccd 	.word	0xcccccccd
 8001cd4:	40020010 	.word	0x40020010
 8001cd8:	40020028 	.word	0x40020028
 8001cdc:	40020040 	.word	0x40020040
 8001ce0:	40020058 	.word	0x40020058
 8001ce4:	40020070 	.word	0x40020070
 8001ce8:	40020088 	.word	0x40020088
 8001cec:	400200a0 	.word	0x400200a0
 8001cf0:	400200b8 	.word	0x400200b8
 8001cf4:	40020410 	.word	0x40020410
 8001cf8:	40020428 	.word	0x40020428
 8001cfc:	40020440 	.word	0x40020440
 8001d00:	40020458 	.word	0x40020458
 8001d04:	40020470 	.word	0x40020470
 8001d08:	40020488 	.word	0x40020488
 8001d0c:	400204a0 	.word	0x400204a0
 8001d10:	400204b8 	.word	0x400204b8
 8001d14:	58025408 	.word	0x58025408
 8001d18:	5802541c 	.word	0x5802541c
 8001d1c:	58025430 	.word	0x58025430
 8001d20:	58025444 	.word	0x58025444
 8001d24:	58025458 	.word	0x58025458
 8001d28:	5802546c 	.word	0x5802546c
 8001d2c:	58025480 	.word	0x58025480
 8001d30:	58025494 	.word	0x58025494

08001d34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e226      	b.n	800219e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_DMA_Start_IT+0x2a>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e21f      	b.n	800219e <HAL_DMA_Start_IT+0x46a>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	f040 820a 	bne.w	8002188 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a68      	ldr	r2, [pc, #416]	@ (8001f28 <HAL_DMA_Start_IT+0x1f4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04a      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a66      	ldr	r2, [pc, #408]	@ (8001f2c <HAL_DMA_Start_IT+0x1f8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d045      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a65      	ldr	r2, [pc, #404]	@ (8001f30 <HAL_DMA_Start_IT+0x1fc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d040      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a63      	ldr	r2, [pc, #396]	@ (8001f34 <HAL_DMA_Start_IT+0x200>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d03b      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a62      	ldr	r2, [pc, #392]	@ (8001f38 <HAL_DMA_Start_IT+0x204>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d036      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a60      	ldr	r2, [pc, #384]	@ (8001f3c <HAL_DMA_Start_IT+0x208>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f40 <HAL_DMA_Start_IT+0x20c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d02c      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f44 <HAL_DMA_Start_IT+0x210>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d027      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f48 <HAL_DMA_Start_IT+0x214>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f4c <HAL_DMA_Start_IT+0x218>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01d      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a59      	ldr	r2, [pc, #356]	@ (8001f50 <HAL_DMA_Start_IT+0x21c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d018      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <HAL_DMA_Start_IT+0x220>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a56      	ldr	r2, [pc, #344]	@ (8001f58 <HAL_DMA_Start_IT+0x224>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a54      	ldr	r2, [pc, #336]	@ (8001f5c <HAL_DMA_Start_IT+0x228>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a53      	ldr	r2, [pc, #332]	@ (8001f60 <HAL_DMA_Start_IT+0x22c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a51      	ldr	r2, [pc, #324]	@ (8001f64 <HAL_DMA_Start_IT+0x230>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d108      	bne.n	8001e34 <HAL_DMA_Start_IT+0x100>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_DMA_Start_IT+0x110>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f001 fe76 	bl	8003b3c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a34      	ldr	r2, [pc, #208]	@ (8001f28 <HAL_DMA_Start_IT+0x1f4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d04a      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a33      	ldr	r2, [pc, #204]	@ (8001f2c <HAL_DMA_Start_IT+0x1f8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d045      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a31      	ldr	r2, [pc, #196]	@ (8001f30 <HAL_DMA_Start_IT+0x1fc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d040      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a30      	ldr	r2, [pc, #192]	@ (8001f34 <HAL_DMA_Start_IT+0x200>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d03b      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f38 <HAL_DMA_Start_IT+0x204>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d036      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <HAL_DMA_Start_IT+0x208>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d031      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <HAL_DMA_Start_IT+0x20c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02c      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001f44 <HAL_DMA_Start_IT+0x210>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d027      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a28      	ldr	r2, [pc, #160]	@ (8001f48 <HAL_DMA_Start_IT+0x214>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d022      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a27      	ldr	r2, [pc, #156]	@ (8001f4c <HAL_DMA_Start_IT+0x218>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d01d      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a25      	ldr	r2, [pc, #148]	@ (8001f50 <HAL_DMA_Start_IT+0x21c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d018      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a24      	ldr	r2, [pc, #144]	@ (8001f54 <HAL_DMA_Start_IT+0x220>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <HAL_DMA_Start_IT+0x224>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00e      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <HAL_DMA_Start_IT+0x228>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d009      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_DMA_Start_IT+0x22c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_DMA_Start_IT+0x230>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_DMA_Start_IT+0x1c0>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_DMA_Start_IT+0x1c2>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d036      	beq.n	8001f68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 021e 	bic.w	r2, r3, #30
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0216 	orr.w	r2, r2, #22
 8001f0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03e      	beq.n	8001f94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0208 	orr.w	r2, r2, #8
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e035      	b.n	8001f94 <HAL_DMA_Start_IT+0x260>
 8001f28:	40020010 	.word	0x40020010
 8001f2c:	40020028 	.word	0x40020028
 8001f30:	40020040 	.word	0x40020040
 8001f34:	40020058 	.word	0x40020058
 8001f38:	40020070 	.word	0x40020070
 8001f3c:	40020088 	.word	0x40020088
 8001f40:	400200a0 	.word	0x400200a0
 8001f44:	400200b8 	.word	0x400200b8
 8001f48:	40020410 	.word	0x40020410
 8001f4c:	40020428 	.word	0x40020428
 8001f50:	40020440 	.word	0x40020440
 8001f54:	40020458 	.word	0x40020458
 8001f58:	40020470 	.word	0x40020470
 8001f5c:	40020488 	.word	0x40020488
 8001f60:	400204a0 	.word	0x400204a0
 8001f64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 020e 	bic.w	r2, r3, #14
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 020a 	orr.w	r2, r2, #10
 8001f7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0204 	orr.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a83      	ldr	r2, [pc, #524]	@ (80021a8 <HAL_DMA_Start_IT+0x474>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d072      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a82      	ldr	r2, [pc, #520]	@ (80021ac <HAL_DMA_Start_IT+0x478>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d06d      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a80      	ldr	r2, [pc, #512]	@ (80021b0 <HAL_DMA_Start_IT+0x47c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d068      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7f      	ldr	r2, [pc, #508]	@ (80021b4 <HAL_DMA_Start_IT+0x480>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d063      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a7d      	ldr	r2, [pc, #500]	@ (80021b8 <HAL_DMA_Start_IT+0x484>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d05e      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7c      	ldr	r2, [pc, #496]	@ (80021bc <HAL_DMA_Start_IT+0x488>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d059      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7a      	ldr	r2, [pc, #488]	@ (80021c0 <HAL_DMA_Start_IT+0x48c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d054      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a79      	ldr	r2, [pc, #484]	@ (80021c4 <HAL_DMA_Start_IT+0x490>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d04f      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a77      	ldr	r2, [pc, #476]	@ (80021c8 <HAL_DMA_Start_IT+0x494>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04a      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a76      	ldr	r2, [pc, #472]	@ (80021cc <HAL_DMA_Start_IT+0x498>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d045      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a74      	ldr	r2, [pc, #464]	@ (80021d0 <HAL_DMA_Start_IT+0x49c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a73      	ldr	r2, [pc, #460]	@ (80021d4 <HAL_DMA_Start_IT+0x4a0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03b      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a71      	ldr	r2, [pc, #452]	@ (80021d8 <HAL_DMA_Start_IT+0x4a4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d036      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a70      	ldr	r2, [pc, #448]	@ (80021dc <HAL_DMA_Start_IT+0x4a8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d031      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6e      	ldr	r2, [pc, #440]	@ (80021e0 <HAL_DMA_Start_IT+0x4ac>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02c      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6d      	ldr	r2, [pc, #436]	@ (80021e4 <HAL_DMA_Start_IT+0x4b0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d027      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6b      	ldr	r2, [pc, #428]	@ (80021e8 <HAL_DMA_Start_IT+0x4b4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d022      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6a      	ldr	r2, [pc, #424]	@ (80021ec <HAL_DMA_Start_IT+0x4b8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01d      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a68      	ldr	r2, [pc, #416]	@ (80021f0 <HAL_DMA_Start_IT+0x4bc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a67      	ldr	r2, [pc, #412]	@ (80021f4 <HAL_DMA_Start_IT+0x4c0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a65      	ldr	r2, [pc, #404]	@ (80021f8 <HAL_DMA_Start_IT+0x4c4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a64      	ldr	r2, [pc, #400]	@ (80021fc <HAL_DMA_Start_IT+0x4c8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a62      	ldr	r2, [pc, #392]	@ (8002200 <HAL_DMA_Start_IT+0x4cc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a61      	ldr	r2, [pc, #388]	@ (8002204 <HAL_DMA_Start_IT+0x4d0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Start_IT+0x354>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_DMA_Start_IT+0x356>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01a      	beq.n	80020c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a37      	ldr	r2, [pc, #220]	@ (80021a8 <HAL_DMA_Start_IT+0x474>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04a      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a36      	ldr	r2, [pc, #216]	@ (80021ac <HAL_DMA_Start_IT+0x478>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d045      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a34      	ldr	r2, [pc, #208]	@ (80021b0 <HAL_DMA_Start_IT+0x47c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d040      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a33      	ldr	r2, [pc, #204]	@ (80021b4 <HAL_DMA_Start_IT+0x480>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d03b      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <HAL_DMA_Start_IT+0x484>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d036      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a30      	ldr	r2, [pc, #192]	@ (80021bc <HAL_DMA_Start_IT+0x488>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d031      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2e      	ldr	r2, [pc, #184]	@ (80021c0 <HAL_DMA_Start_IT+0x48c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02c      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <HAL_DMA_Start_IT+0x490>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d027      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2b      	ldr	r2, [pc, #172]	@ (80021c8 <HAL_DMA_Start_IT+0x494>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2a      	ldr	r2, [pc, #168]	@ (80021cc <HAL_DMA_Start_IT+0x498>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d01d      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a28      	ldr	r2, [pc, #160]	@ (80021d0 <HAL_DMA_Start_IT+0x49c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a27      	ldr	r2, [pc, #156]	@ (80021d4 <HAL_DMA_Start_IT+0x4a0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a25      	ldr	r2, [pc, #148]	@ (80021d8 <HAL_DMA_Start_IT+0x4a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a24      	ldr	r2, [pc, #144]	@ (80021dc <HAL_DMA_Start_IT+0x4a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a22      	ldr	r2, [pc, #136]	@ (80021e0 <HAL_DMA_Start_IT+0x4ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a21      	ldr	r2, [pc, #132]	@ (80021e4 <HAL_DMA_Start_IT+0x4b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <HAL_DMA_Start_IT+0x442>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e012      	b.n	800219c <HAL_DMA_Start_IT+0x468>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e009      	b.n	800219c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40020010 	.word	0x40020010
 80021ac:	40020028 	.word	0x40020028
 80021b0:	40020040 	.word	0x40020040
 80021b4:	40020058 	.word	0x40020058
 80021b8:	40020070 	.word	0x40020070
 80021bc:	40020088 	.word	0x40020088
 80021c0:	400200a0 	.word	0x400200a0
 80021c4:	400200b8 	.word	0x400200b8
 80021c8:	40020410 	.word	0x40020410
 80021cc:	40020428 	.word	0x40020428
 80021d0:	40020440 	.word	0x40020440
 80021d4:	40020458 	.word	0x40020458
 80021d8:	40020470 	.word	0x40020470
 80021dc:	40020488 	.word	0x40020488
 80021e0:	400204a0 	.word	0x400204a0
 80021e4:	400204b8 	.word	0x400204b8
 80021e8:	58025408 	.word	0x58025408
 80021ec:	5802541c 	.word	0x5802541c
 80021f0:	58025430 	.word	0x58025430
 80021f4:	58025444 	.word	0x58025444
 80021f8:	58025458 	.word	0x58025458
 80021fc:	5802546c 	.word	0x5802546c
 8002200:	58025480 	.word	0x58025480
 8002204:	58025494 	.word	0x58025494

08002208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff f870 	bl	80012f4 <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e2dc      	b.n	80027da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d008      	beq.n	800223e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2280      	movs	r2, #128	@ 0x80
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e2cd      	b.n	80027da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a76      	ldr	r2, [pc, #472]	@ (800241c <HAL_DMA_Abort+0x214>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d04a      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a74      	ldr	r2, [pc, #464]	@ (8002420 <HAL_DMA_Abort+0x218>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d045      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a73      	ldr	r2, [pc, #460]	@ (8002424 <HAL_DMA_Abort+0x21c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d040      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a71      	ldr	r2, [pc, #452]	@ (8002428 <HAL_DMA_Abort+0x220>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d03b      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a70      	ldr	r2, [pc, #448]	@ (800242c <HAL_DMA_Abort+0x224>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d036      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6e      	ldr	r2, [pc, #440]	@ (8002430 <HAL_DMA_Abort+0x228>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d031      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6d      	ldr	r2, [pc, #436]	@ (8002434 <HAL_DMA_Abort+0x22c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d02c      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a6b      	ldr	r2, [pc, #428]	@ (8002438 <HAL_DMA_Abort+0x230>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d027      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6a      	ldr	r2, [pc, #424]	@ (800243c <HAL_DMA_Abort+0x234>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d022      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	@ (8002440 <HAL_DMA_Abort+0x238>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01d      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a67      	ldr	r2, [pc, #412]	@ (8002444 <HAL_DMA_Abort+0x23c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d018      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a65      	ldr	r2, [pc, #404]	@ (8002448 <HAL_DMA_Abort+0x240>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a64      	ldr	r2, [pc, #400]	@ (800244c <HAL_DMA_Abort+0x244>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00e      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a62      	ldr	r2, [pc, #392]	@ (8002450 <HAL_DMA_Abort+0x248>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a61      	ldr	r2, [pc, #388]	@ (8002454 <HAL_DMA_Abort+0x24c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d004      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002458 <HAL_DMA_Abort+0x250>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_DMA_Abort+0xda>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_DMA_Abort+0xdc>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 021e 	bic.w	r2, r2, #30
 80022f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002306:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e00a      	b.n	8002326 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 020e 	bic.w	r2, r2, #14
 800231e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a3c      	ldr	r2, [pc, #240]	@ (800241c <HAL_DMA_Abort+0x214>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d072      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a3a      	ldr	r2, [pc, #232]	@ (8002420 <HAL_DMA_Abort+0x218>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d06d      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a39      	ldr	r2, [pc, #228]	@ (8002424 <HAL_DMA_Abort+0x21c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d068      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a37      	ldr	r2, [pc, #220]	@ (8002428 <HAL_DMA_Abort+0x220>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d063      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a36      	ldr	r2, [pc, #216]	@ (800242c <HAL_DMA_Abort+0x224>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d05e      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a34      	ldr	r2, [pc, #208]	@ (8002430 <HAL_DMA_Abort+0x228>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d059      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a33      	ldr	r2, [pc, #204]	@ (8002434 <HAL_DMA_Abort+0x22c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d054      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a31      	ldr	r2, [pc, #196]	@ (8002438 <HAL_DMA_Abort+0x230>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d04f      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a30      	ldr	r2, [pc, #192]	@ (800243c <HAL_DMA_Abort+0x234>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04a      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2e      	ldr	r2, [pc, #184]	@ (8002440 <HAL_DMA_Abort+0x238>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d045      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2d      	ldr	r2, [pc, #180]	@ (8002444 <HAL_DMA_Abort+0x23c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2b      	ldr	r2, [pc, #172]	@ (8002448 <HAL_DMA_Abort+0x240>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d03b      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a2a      	ldr	r2, [pc, #168]	@ (800244c <HAL_DMA_Abort+0x244>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d036      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a28      	ldr	r2, [pc, #160]	@ (8002450 <HAL_DMA_Abort+0x248>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a27      	ldr	r2, [pc, #156]	@ (8002454 <HAL_DMA_Abort+0x24c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d02c      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a25      	ldr	r2, [pc, #148]	@ (8002458 <HAL_DMA_Abort+0x250>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a24      	ldr	r2, [pc, #144]	@ (800245c <HAL_DMA_Abort+0x254>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <HAL_DMA_Abort+0x258>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01d      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a21      	ldr	r2, [pc, #132]	@ (8002464 <HAL_DMA_Abort+0x25c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002468 <HAL_DMA_Abort+0x260>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1e      	ldr	r2, [pc, #120]	@ (800246c <HAL_DMA_Abort+0x264>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <HAL_DMA_Abort+0x268>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <HAL_DMA_Abort+0x26c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <HAL_DMA_Abort+0x270>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d132      	bne.n	800247c <HAL_DMA_Abort+0x274>
 8002416:	2301      	movs	r3, #1
 8002418:	e031      	b.n	800247e <HAL_DMA_Abort+0x276>
 800241a:	bf00      	nop
 800241c:	40020010 	.word	0x40020010
 8002420:	40020028 	.word	0x40020028
 8002424:	40020040 	.word	0x40020040
 8002428:	40020058 	.word	0x40020058
 800242c:	40020070 	.word	0x40020070
 8002430:	40020088 	.word	0x40020088
 8002434:	400200a0 	.word	0x400200a0
 8002438:	400200b8 	.word	0x400200b8
 800243c:	40020410 	.word	0x40020410
 8002440:	40020428 	.word	0x40020428
 8002444:	40020440 	.word	0x40020440
 8002448:	40020458 	.word	0x40020458
 800244c:	40020470 	.word	0x40020470
 8002450:	40020488 	.word	0x40020488
 8002454:	400204a0 	.word	0x400204a0
 8002458:	400204b8 	.word	0x400204b8
 800245c:	58025408 	.word	0x58025408
 8002460:	5802541c 	.word	0x5802541c
 8002464:	58025430 	.word	0x58025430
 8002468:	58025444 	.word	0x58025444
 800246c:	58025458 	.word	0x58025458
 8002470:	5802546c 	.word	0x5802546c
 8002474:	58025480 	.word	0x58025480
 8002478:	58025494 	.word	0x58025494
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002490:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6d      	ldr	r2, [pc, #436]	@ (800264c <HAL_DMA_Abort+0x444>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d04a      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002650 <HAL_DMA_Abort+0x448>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d045      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002654 <HAL_DMA_Abort+0x44c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d040      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a68      	ldr	r2, [pc, #416]	@ (8002658 <HAL_DMA_Abort+0x450>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d03b      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a67      	ldr	r2, [pc, #412]	@ (800265c <HAL_DMA_Abort+0x454>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d036      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a65      	ldr	r2, [pc, #404]	@ (8002660 <HAL_DMA_Abort+0x458>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d031      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a64      	ldr	r2, [pc, #400]	@ (8002664 <HAL_DMA_Abort+0x45c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d02c      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a62      	ldr	r2, [pc, #392]	@ (8002668 <HAL_DMA_Abort+0x460>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d027      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a61      	ldr	r2, [pc, #388]	@ (800266c <HAL_DMA_Abort+0x464>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002670 <HAL_DMA_Abort+0x468>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01d      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002674 <HAL_DMA_Abort+0x46c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d018      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a5c      	ldr	r2, [pc, #368]	@ (8002678 <HAL_DMA_Abort+0x470>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a5b      	ldr	r2, [pc, #364]	@ (800267c <HAL_DMA_Abort+0x474>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00e      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a59      	ldr	r2, [pc, #356]	@ (8002680 <HAL_DMA_Abort+0x478>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a58      	ldr	r2, [pc, #352]	@ (8002684 <HAL_DMA_Abort+0x47c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a56      	ldr	r2, [pc, #344]	@ (8002688 <HAL_DMA_Abort+0x480>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d108      	bne.n	8002544 <HAL_DMA_Abort+0x33c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e007      	b.n	8002554 <HAL_DMA_Abort+0x34c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002554:	e013      	b.n	800257e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7fe fecd 	bl	80012f4 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d90c      	bls.n	800257e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e12d      	b.n	80027da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e5      	bne.n	8002556 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2f      	ldr	r2, [pc, #188]	@ (800264c <HAL_DMA_Abort+0x444>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d04a      	beq.n	800262a <HAL_DMA_Abort+0x422>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2d      	ldr	r2, [pc, #180]	@ (8002650 <HAL_DMA_Abort+0x448>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d045      	beq.n	800262a <HAL_DMA_Abort+0x422>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002654 <HAL_DMA_Abort+0x44c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d040      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002658 <HAL_DMA_Abort+0x450>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d03b      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a29      	ldr	r2, [pc, #164]	@ (800265c <HAL_DMA_Abort+0x454>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d036      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a27      	ldr	r2, [pc, #156]	@ (8002660 <HAL_DMA_Abort+0x458>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d031      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a26      	ldr	r2, [pc, #152]	@ (8002664 <HAL_DMA_Abort+0x45c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d02c      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a24      	ldr	r2, [pc, #144]	@ (8002668 <HAL_DMA_Abort+0x460>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d027      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a23      	ldr	r2, [pc, #140]	@ (800266c <HAL_DMA_Abort+0x464>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d022      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a21      	ldr	r2, [pc, #132]	@ (8002670 <HAL_DMA_Abort+0x468>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01d      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a20      	ldr	r2, [pc, #128]	@ (8002674 <HAL_DMA_Abort+0x46c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d018      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002678 <HAL_DMA_Abort+0x470>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_DMA_Abort+0x422>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1d      	ldr	r2, [pc, #116]	@ (800267c <HAL_DMA_Abort+0x474>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_DMA_Abort+0x422>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_DMA_Abort+0x478>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_DMA_Abort+0x422>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <HAL_DMA_Abort+0x47c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_DMA_Abort+0x422>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <HAL_DMA_Abort+0x480>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_DMA_Abort+0x426>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_DMA_Abort+0x428>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d02b      	beq.n	800268c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	223f      	movs	r2, #63	@ 0x3f
 8002644:	409a      	lsls	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	e02a      	b.n	80026a2 <HAL_DMA_Abort+0x49a>
 800264c:	40020010 	.word	0x40020010
 8002650:	40020028 	.word	0x40020028
 8002654:	40020040 	.word	0x40020040
 8002658:	40020058 	.word	0x40020058
 800265c:	40020070 	.word	0x40020070
 8002660:	40020088 	.word	0x40020088
 8002664:	400200a0 	.word	0x400200a0
 8002668:	400200b8 	.word	0x400200b8
 800266c:	40020410 	.word	0x40020410
 8002670:	40020428 	.word	0x40020428
 8002674:	40020440 	.word	0x40020440
 8002678:	40020458 	.word	0x40020458
 800267c:	40020470 	.word	0x40020470
 8002680:	40020488 	.word	0x40020488
 8002684:	400204a0 	.word	0x400204a0
 8002688:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2201      	movs	r2, #1
 800269c:	409a      	lsls	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a4f      	ldr	r2, [pc, #316]	@ (80027e4 <HAL_DMA_Abort+0x5dc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d072      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4d      	ldr	r2, [pc, #308]	@ (80027e8 <HAL_DMA_Abort+0x5e0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d06d      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a4c      	ldr	r2, [pc, #304]	@ (80027ec <HAL_DMA_Abort+0x5e4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d068      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a4a      	ldr	r2, [pc, #296]	@ (80027f0 <HAL_DMA_Abort+0x5e8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d063      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a49      	ldr	r2, [pc, #292]	@ (80027f4 <HAL_DMA_Abort+0x5ec>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d05e      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a47      	ldr	r2, [pc, #284]	@ (80027f8 <HAL_DMA_Abort+0x5f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d059      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a46      	ldr	r2, [pc, #280]	@ (80027fc <HAL_DMA_Abort+0x5f4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d054      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a44      	ldr	r2, [pc, #272]	@ (8002800 <HAL_DMA_Abort+0x5f8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d04f      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a43      	ldr	r2, [pc, #268]	@ (8002804 <HAL_DMA_Abort+0x5fc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04a      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a41      	ldr	r2, [pc, #260]	@ (8002808 <HAL_DMA_Abort+0x600>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d045      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a40      	ldr	r2, [pc, #256]	@ (800280c <HAL_DMA_Abort+0x604>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a3e      	ldr	r2, [pc, #248]	@ (8002810 <HAL_DMA_Abort+0x608>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03b      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a3d      	ldr	r2, [pc, #244]	@ (8002814 <HAL_DMA_Abort+0x60c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d036      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a3b      	ldr	r2, [pc, #236]	@ (8002818 <HAL_DMA_Abort+0x610>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3a      	ldr	r2, [pc, #232]	@ (800281c <HAL_DMA_Abort+0x614>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d02c      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a38      	ldr	r2, [pc, #224]	@ (8002820 <HAL_DMA_Abort+0x618>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d027      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a37      	ldr	r2, [pc, #220]	@ (8002824 <HAL_DMA_Abort+0x61c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a35      	ldr	r2, [pc, #212]	@ (8002828 <HAL_DMA_Abort+0x620>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01d      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a34      	ldr	r2, [pc, #208]	@ (800282c <HAL_DMA_Abort+0x624>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a32      	ldr	r2, [pc, #200]	@ (8002830 <HAL_DMA_Abort+0x628>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a31      	ldr	r2, [pc, #196]	@ (8002834 <HAL_DMA_Abort+0x62c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2f      	ldr	r2, [pc, #188]	@ (8002838 <HAL_DMA_Abort+0x630>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2e      	ldr	r2, [pc, #184]	@ (800283c <HAL_DMA_Abort+0x634>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2c      	ldr	r2, [pc, #176]	@ (8002840 <HAL_DMA_Abort+0x638>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_DMA_Abort+0x58e>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_DMA_Abort+0x590>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00c      	beq.n	80027c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40020010 	.word	0x40020010
 80027e8:	40020028 	.word	0x40020028
 80027ec:	40020040 	.word	0x40020040
 80027f0:	40020058 	.word	0x40020058
 80027f4:	40020070 	.word	0x40020070
 80027f8:	40020088 	.word	0x40020088
 80027fc:	400200a0 	.word	0x400200a0
 8002800:	400200b8 	.word	0x400200b8
 8002804:	40020410 	.word	0x40020410
 8002808:	40020428 	.word	0x40020428
 800280c:	40020440 	.word	0x40020440
 8002810:	40020458 	.word	0x40020458
 8002814:	40020470 	.word	0x40020470
 8002818:	40020488 	.word	0x40020488
 800281c:	400204a0 	.word	0x400204a0
 8002820:	400204b8 	.word	0x400204b8
 8002824:	58025408 	.word	0x58025408
 8002828:	5802541c 	.word	0x5802541c
 800282c:	58025430 	.word	0x58025430
 8002830:	58025444 	.word	0x58025444
 8002834:	58025458 	.word	0x58025458
 8002838:	5802546c 	.word	0x5802546c
 800283c:	58025480 	.word	0x58025480
 8002840:	58025494 	.word	0x58025494

08002844 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e237      	b.n	8002cc6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d004      	beq.n	800286c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2280      	movs	r2, #128	@ 0x80
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e22c      	b.n	8002cc6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a5c      	ldr	r2, [pc, #368]	@ (80029e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04a      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a5b      	ldr	r2, [pc, #364]	@ (80029e8 <HAL_DMA_Abort_IT+0x1a4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d045      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a59      	ldr	r2, [pc, #356]	@ (80029ec <HAL_DMA_Abort_IT+0x1a8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d040      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a58      	ldr	r2, [pc, #352]	@ (80029f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d03b      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a56      	ldr	r2, [pc, #344]	@ (80029f4 <HAL_DMA_Abort_IT+0x1b0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d036      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a55      	ldr	r2, [pc, #340]	@ (80029f8 <HAL_DMA_Abort_IT+0x1b4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d031      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a53      	ldr	r2, [pc, #332]	@ (80029fc <HAL_DMA_Abort_IT+0x1b8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02c      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a52      	ldr	r2, [pc, #328]	@ (8002a00 <HAL_DMA_Abort_IT+0x1bc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d027      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a50      	ldr	r2, [pc, #320]	@ (8002a04 <HAL_DMA_Abort_IT+0x1c0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002a08 <HAL_DMA_Abort_IT+0x1c4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d01d      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a0c <HAL_DMA_Abort_IT+0x1c8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a4c      	ldr	r2, [pc, #304]	@ (8002a10 <HAL_DMA_Abort_IT+0x1cc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002a14 <HAL_DMA_Abort_IT+0x1d0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a49      	ldr	r2, [pc, #292]	@ (8002a18 <HAL_DMA_Abort_IT+0x1d4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a47      	ldr	r2, [pc, #284]	@ (8002a1c <HAL_DMA_Abort_IT+0x1d8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a46      	ldr	r2, [pc, #280]	@ (8002a20 <HAL_DMA_Abort_IT+0x1dc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_DMA_Abort_IT+0xcc>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_DMA_Abort_IT+0xce>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8086 	beq.w	8002a24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2204      	movs	r2, #4
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d04a      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2e      	ldr	r2, [pc, #184]	@ (80029e8 <HAL_DMA_Abort_IT+0x1a4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d045      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2c      	ldr	r2, [pc, #176]	@ (80029ec <HAL_DMA_Abort_IT+0x1a8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d040      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2b      	ldr	r2, [pc, #172]	@ (80029f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d03b      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a29      	ldr	r2, [pc, #164]	@ (80029f4 <HAL_DMA_Abort_IT+0x1b0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d036      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a28      	ldr	r2, [pc, #160]	@ (80029f8 <HAL_DMA_Abort_IT+0x1b4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d031      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a26      	ldr	r2, [pc, #152]	@ (80029fc <HAL_DMA_Abort_IT+0x1b8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02c      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a25      	ldr	r2, [pc, #148]	@ (8002a00 <HAL_DMA_Abort_IT+0x1bc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d027      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a23      	ldr	r2, [pc, #140]	@ (8002a04 <HAL_DMA_Abort_IT+0x1c0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d022      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <HAL_DMA_Abort_IT+0x1c4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01d      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a20      	ldr	r2, [pc, #128]	@ (8002a0c <HAL_DMA_Abort_IT+0x1c8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d018      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1f      	ldr	r2, [pc, #124]	@ (8002a10 <HAL_DMA_Abort_IT+0x1cc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a14 <HAL_DMA_Abort_IT+0x1d0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00e      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a18 <HAL_DMA_Abort_IT+0x1d4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a1c <HAL_DMA_Abort_IT+0x1d8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a19      	ldr	r2, [pc, #100]	@ (8002a20 <HAL_DMA_Abort_IT+0x1dc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <HAL_DMA_Abort_IT+0x18e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e178      	b.n	8002cc4 <HAL_DMA_Abort_IT+0x480>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e16f      	b.n	8002cc4 <HAL_DMA_Abort_IT+0x480>
 80029e4:	40020010 	.word	0x40020010
 80029e8:	40020028 	.word	0x40020028
 80029ec:	40020040 	.word	0x40020040
 80029f0:	40020058 	.word	0x40020058
 80029f4:	40020070 	.word	0x40020070
 80029f8:	40020088 	.word	0x40020088
 80029fc:	400200a0 	.word	0x400200a0
 8002a00:	400200b8 	.word	0x400200b8
 8002a04:	40020410 	.word	0x40020410
 8002a08:	40020428 	.word	0x40020428
 8002a0c:	40020440 	.word	0x40020440
 8002a10:	40020458 	.word	0x40020458
 8002a14:	40020470 	.word	0x40020470
 8002a18:	40020488 	.word	0x40020488
 8002a1c:	400204a0 	.word	0x400204a0
 8002a20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 020e 	bic.w	r2, r2, #14
 8002a32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6c      	ldr	r2, [pc, #432]	@ (8002bec <HAL_DMA_Abort_IT+0x3a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d04a      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6b      	ldr	r2, [pc, #428]	@ (8002bf0 <HAL_DMA_Abort_IT+0x3ac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d045      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a69      	ldr	r2, [pc, #420]	@ (8002bf4 <HAL_DMA_Abort_IT+0x3b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d040      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a68      	ldr	r2, [pc, #416]	@ (8002bf8 <HAL_DMA_Abort_IT+0x3b4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d03b      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a66      	ldr	r2, [pc, #408]	@ (8002bfc <HAL_DMA_Abort_IT+0x3b8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d036      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a65      	ldr	r2, [pc, #404]	@ (8002c00 <HAL_DMA_Abort_IT+0x3bc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d031      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a63      	ldr	r2, [pc, #396]	@ (8002c04 <HAL_DMA_Abort_IT+0x3c0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02c      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a62      	ldr	r2, [pc, #392]	@ (8002c08 <HAL_DMA_Abort_IT+0x3c4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d027      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a60      	ldr	r2, [pc, #384]	@ (8002c0c <HAL_DMA_Abort_IT+0x3c8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d022      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5f      	ldr	r2, [pc, #380]	@ (8002c10 <HAL_DMA_Abort_IT+0x3cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01d      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c14 <HAL_DMA_Abort_IT+0x3d0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d018      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c18 <HAL_DMA_Abort_IT+0x3d4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c1c <HAL_DMA_Abort_IT+0x3d8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a59      	ldr	r2, [pc, #356]	@ (8002c20 <HAL_DMA_Abort_IT+0x3dc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a57      	ldr	r2, [pc, #348]	@ (8002c24 <HAL_DMA_Abort_IT+0x3e0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a56      	ldr	r2, [pc, #344]	@ (8002c28 <HAL_DMA_Abort_IT+0x3e4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_DMA_Abort_IT+0x2a2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e007      	b.n	8002af6 <HAL_DMA_Abort_IT+0x2b2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a3c      	ldr	r2, [pc, #240]	@ (8002bec <HAL_DMA_Abort_IT+0x3a8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d072      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf0 <HAL_DMA_Abort_IT+0x3ac>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d06d      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a39      	ldr	r2, [pc, #228]	@ (8002bf4 <HAL_DMA_Abort_IT+0x3b0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d068      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <HAL_DMA_Abort_IT+0x3b4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d063      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a36      	ldr	r2, [pc, #216]	@ (8002bfc <HAL_DMA_Abort_IT+0x3b8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d05e      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a34      	ldr	r2, [pc, #208]	@ (8002c00 <HAL_DMA_Abort_IT+0x3bc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d059      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a33      	ldr	r2, [pc, #204]	@ (8002c04 <HAL_DMA_Abort_IT+0x3c0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d054      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a31      	ldr	r2, [pc, #196]	@ (8002c08 <HAL_DMA_Abort_IT+0x3c4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04f      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a30      	ldr	r2, [pc, #192]	@ (8002c0c <HAL_DMA_Abort_IT+0x3c8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d04a      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2e      	ldr	r2, [pc, #184]	@ (8002c10 <HAL_DMA_Abort_IT+0x3cc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d045      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c14 <HAL_DMA_Abort_IT+0x3d0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d040      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2b      	ldr	r2, [pc, #172]	@ (8002c18 <HAL_DMA_Abort_IT+0x3d4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d03b      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2a      	ldr	r2, [pc, #168]	@ (8002c1c <HAL_DMA_Abort_IT+0x3d8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d036      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <HAL_DMA_Abort_IT+0x3dc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d031      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a27      	ldr	r2, [pc, #156]	@ (8002c24 <HAL_DMA_Abort_IT+0x3e0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d02c      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a25      	ldr	r2, [pc, #148]	@ (8002c28 <HAL_DMA_Abort_IT+0x3e4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d027      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a24      	ldr	r2, [pc, #144]	@ (8002c2c <HAL_DMA_Abort_IT+0x3e8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d022      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a22      	ldr	r2, [pc, #136]	@ (8002c30 <HAL_DMA_Abort_IT+0x3ec>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01d      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a21      	ldr	r2, [pc, #132]	@ (8002c34 <HAL_DMA_Abort_IT+0x3f0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d018      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_DMA_Abort_IT+0x3f4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c3c <HAL_DMA_Abort_IT+0x3f8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00e      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_DMA_Abort_IT+0x3fc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <HAL_DMA_Abort_IT+0x400>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a19      	ldr	r2, [pc, #100]	@ (8002c48 <HAL_DMA_Abort_IT+0x404>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d132      	bne.n	8002c4c <HAL_DMA_Abort_IT+0x408>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e031      	b.n	8002c4e <HAL_DMA_Abort_IT+0x40a>
 8002bea:	bf00      	nop
 8002bec:	40020010 	.word	0x40020010
 8002bf0:	40020028 	.word	0x40020028
 8002bf4:	40020040 	.word	0x40020040
 8002bf8:	40020058 	.word	0x40020058
 8002bfc:	40020070 	.word	0x40020070
 8002c00:	40020088 	.word	0x40020088
 8002c04:	400200a0 	.word	0x400200a0
 8002c08:	400200b8 	.word	0x400200b8
 8002c0c:	40020410 	.word	0x40020410
 8002c10:	40020428 	.word	0x40020428
 8002c14:	40020440 	.word	0x40020440
 8002c18:	40020458 	.word	0x40020458
 8002c1c:	40020470 	.word	0x40020470
 8002c20:	40020488 	.word	0x40020488
 8002c24:	400204a0 	.word	0x400204a0
 8002c28:	400204b8 	.word	0x400204b8
 8002c2c:	58025408 	.word	0x58025408
 8002c30:	5802541c 	.word	0x5802541c
 8002c34:	58025430 	.word	0x58025430
 8002c38:	58025444 	.word	0x58025444
 8002c3c:	58025458 	.word	0x58025458
 8002c40:	5802546c 	.word	0x5802546c
 8002c44:	58025480 	.word	0x58025480
 8002c48:	58025494 	.word	0x58025494
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d028      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2201      	movs	r2, #1
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ca2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop

08002cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cdc:	4b67      	ldr	r3, [pc, #412]	@ (8002e7c <HAL_DMA_IRQHandler+0x1ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a67      	ldr	r2, [pc, #412]	@ (8002e80 <HAL_DMA_IRQHandler+0x1b0>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a5f      	ldr	r2, [pc, #380]	@ (8002e84 <HAL_DMA_IRQHandler+0x1b4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d04a      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5d      	ldr	r2, [pc, #372]	@ (8002e88 <HAL_DMA_IRQHandler+0x1b8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d045      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002e8c <HAL_DMA_IRQHandler+0x1bc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d040      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a5a      	ldr	r2, [pc, #360]	@ (8002e90 <HAL_DMA_IRQHandler+0x1c0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d03b      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a59      	ldr	r2, [pc, #356]	@ (8002e94 <HAL_DMA_IRQHandler+0x1c4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d036      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a57      	ldr	r2, [pc, #348]	@ (8002e98 <HAL_DMA_IRQHandler+0x1c8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d031      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a56      	ldr	r2, [pc, #344]	@ (8002e9c <HAL_DMA_IRQHandler+0x1cc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d02c      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1d0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d027      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a53      	ldr	r2, [pc, #332]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1d4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a51      	ldr	r2, [pc, #324]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1d8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01d      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a50      	ldr	r2, [pc, #320]	@ (8002eac <HAL_DMA_IRQHandler+0x1dc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d018      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4e      	ldr	r2, [pc, #312]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1e0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1e4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00e      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1e8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a4a      	ldr	r2, [pc, #296]	@ (8002ebc <HAL_DMA_IRQHandler+0x1ec>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a48      	ldr	r2, [pc, #288]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d101      	bne.n	8002da6 <HAL_DMA_IRQHandler+0xd6>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_DMA_IRQHandler+0xd8>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 842b 	beq.w	8003604 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2208      	movs	r2, #8
 8002db8:	409a      	lsls	r2, r3
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80a2 	beq.w	8002f08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e84 <HAL_DMA_IRQHandler+0x1b4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <HAL_DMA_IRQHandler+0x1b8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d045      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <HAL_DMA_IRQHandler+0x1bc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d040      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e90 <HAL_DMA_IRQHandler+0x1c0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d03b      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a28      	ldr	r2, [pc, #160]	@ (8002e94 <HAL_DMA_IRQHandler+0x1c4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d036      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a27      	ldr	r2, [pc, #156]	@ (8002e98 <HAL_DMA_IRQHandler+0x1c8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d031      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a25      	ldr	r2, [pc, #148]	@ (8002e9c <HAL_DMA_IRQHandler+0x1cc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02c      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d027      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d022      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01d      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002eac <HAL_DMA_IRQHandler+0x1dc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1e0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1e4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1e8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a19      	ldr	r2, [pc, #100]	@ (8002ebc <HAL_DMA_IRQHandler+0x1ec>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d12f      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x1f4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e02e      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x208>
 8002e7a:	bf00      	nop
 8002e7c:	24000000 	.word	0x24000000
 8002e80:	1b4e81b5 	.word	0x1b4e81b5
 8002e84:	40020010 	.word	0x40020010
 8002e88:	40020028 	.word	0x40020028
 8002e8c:	40020040 	.word	0x40020040
 8002e90:	40020058 	.word	0x40020058
 8002e94:	40020070 	.word	0x40020070
 8002e98:	40020088 	.word	0x40020088
 8002e9c:	400200a0 	.word	0x400200a0
 8002ea0:	400200b8 	.word	0x400200b8
 8002ea4:	40020410 	.word	0x40020410
 8002ea8:	40020428 	.word	0x40020428
 8002eac:	40020440 	.word	0x40020440
 8002eb0:	40020458 	.word	0x40020458
 8002eb4:	40020470 	.word	0x40020470
 8002eb8:	40020488 	.word	0x40020488
 8002ebc:	400204a0 	.word	0x400204a0
 8002ec0:	400204b8 	.word	0x400204b8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d06e      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a69      	ldr	r2, [pc, #420]	@ (80030c8 <HAL_DMA_IRQHandler+0x3f8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d04a      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a67      	ldr	r2, [pc, #412]	@ (80030cc <HAL_DMA_IRQHandler+0x3fc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d045      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a66      	ldr	r2, [pc, #408]	@ (80030d0 <HAL_DMA_IRQHandler+0x400>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d040      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a64      	ldr	r2, [pc, #400]	@ (80030d4 <HAL_DMA_IRQHandler+0x404>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d03b      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a63      	ldr	r2, [pc, #396]	@ (80030d8 <HAL_DMA_IRQHandler+0x408>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d036      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a61      	ldr	r2, [pc, #388]	@ (80030dc <HAL_DMA_IRQHandler+0x40c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d031      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a60      	ldr	r2, [pc, #384]	@ (80030e0 <HAL_DMA_IRQHandler+0x410>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d02c      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a5e      	ldr	r2, [pc, #376]	@ (80030e4 <HAL_DMA_IRQHandler+0x414>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d027      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5d      	ldr	r2, [pc, #372]	@ (80030e8 <HAL_DMA_IRQHandler+0x418>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d022      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5b      	ldr	r2, [pc, #364]	@ (80030ec <HAL_DMA_IRQHandler+0x41c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01d      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5a      	ldr	r2, [pc, #360]	@ (80030f0 <HAL_DMA_IRQHandler+0x420>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d018      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a58      	ldr	r2, [pc, #352]	@ (80030f4 <HAL_DMA_IRQHandler+0x424>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a57      	ldr	r2, [pc, #348]	@ (80030f8 <HAL_DMA_IRQHandler+0x428>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a55      	ldr	r2, [pc, #340]	@ (80030fc <HAL_DMA_IRQHandler+0x42c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a54      	ldr	r2, [pc, #336]	@ (8003100 <HAL_DMA_IRQHandler+0x430>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <HAL_DMA_IRQHandler+0x434>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x304>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e003      	b.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2201      	movs	r2, #1
 8002fea:	409a      	lsls	r2, r3
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	f043 0202 	orr.w	r2, r3, #2
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2204      	movs	r2, #4
 8003006:	409a      	lsls	r2, r3
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 808f 	beq.w	8003130 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2c      	ldr	r2, [pc, #176]	@ (80030c8 <HAL_DMA_IRQHandler+0x3f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d04a      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2a      	ldr	r2, [pc, #168]	@ (80030cc <HAL_DMA_IRQHandler+0x3fc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d045      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a29      	ldr	r2, [pc, #164]	@ (80030d0 <HAL_DMA_IRQHandler+0x400>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d040      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <HAL_DMA_IRQHandler+0x404>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03b      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a26      	ldr	r2, [pc, #152]	@ (80030d8 <HAL_DMA_IRQHandler+0x408>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d036      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a24      	ldr	r2, [pc, #144]	@ (80030dc <HAL_DMA_IRQHandler+0x40c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <HAL_DMA_IRQHandler+0x410>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d02c      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a21      	ldr	r2, [pc, #132]	@ (80030e4 <HAL_DMA_IRQHandler+0x414>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d027      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a20      	ldr	r2, [pc, #128]	@ (80030e8 <HAL_DMA_IRQHandler+0x418>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1e      	ldr	r2, [pc, #120]	@ (80030ec <HAL_DMA_IRQHandler+0x41c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <HAL_DMA_IRQHandler+0x420>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1b      	ldr	r2, [pc, #108]	@ (80030f4 <HAL_DMA_IRQHandler+0x424>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1a      	ldr	r2, [pc, #104]	@ (80030f8 <HAL_DMA_IRQHandler+0x428>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <HAL_DMA_IRQHandler+0x42c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <HAL_DMA_IRQHandler+0x430>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a15      	ldr	r2, [pc, #84]	@ (8003104 <HAL_DMA_IRQHandler+0x434>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d12a      	bne.n	8003108 <HAL_DMA_IRQHandler+0x438>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e023      	b.n	8003110 <HAL_DMA_IRQHandler+0x440>
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00d      	beq.n	8003130 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2204      	movs	r2, #4
 800311e:	409a      	lsls	r2, r3
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2210      	movs	r2, #16
 800313a:	409a      	lsls	r2, r3
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a6 	beq.w	8003292 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a85      	ldr	r2, [pc, #532]	@ (8003360 <HAL_DMA_IRQHandler+0x690>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d04a      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a83      	ldr	r2, [pc, #524]	@ (8003364 <HAL_DMA_IRQHandler+0x694>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d045      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a82      	ldr	r2, [pc, #520]	@ (8003368 <HAL_DMA_IRQHandler+0x698>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d040      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a80      	ldr	r2, [pc, #512]	@ (800336c <HAL_DMA_IRQHandler+0x69c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d03b      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7f      	ldr	r2, [pc, #508]	@ (8003370 <HAL_DMA_IRQHandler+0x6a0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d036      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7d      	ldr	r2, [pc, #500]	@ (8003374 <HAL_DMA_IRQHandler+0x6a4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d031      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a7c      	ldr	r2, [pc, #496]	@ (8003378 <HAL_DMA_IRQHandler+0x6a8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d02c      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a7a      	ldr	r2, [pc, #488]	@ (800337c <HAL_DMA_IRQHandler+0x6ac>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d027      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a79      	ldr	r2, [pc, #484]	@ (8003380 <HAL_DMA_IRQHandler+0x6b0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d022      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a77      	ldr	r2, [pc, #476]	@ (8003384 <HAL_DMA_IRQHandler+0x6b4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01d      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a76      	ldr	r2, [pc, #472]	@ (8003388 <HAL_DMA_IRQHandler+0x6b8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d018      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a74      	ldr	r2, [pc, #464]	@ (800338c <HAL_DMA_IRQHandler+0x6bc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a73      	ldr	r2, [pc, #460]	@ (8003390 <HAL_DMA_IRQHandler+0x6c0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a71      	ldr	r2, [pc, #452]	@ (8003394 <HAL_DMA_IRQHandler+0x6c4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a70      	ldr	r2, [pc, #448]	@ (8003398 <HAL_DMA_IRQHandler+0x6c8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <HAL_DMA_IRQHandler+0x6cc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10a      	bne.n	80031fc <HAL_DMA_IRQHandler+0x52c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e009      	b.n	8003210 <HAL_DMA_IRQHandler+0x540>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	bf14      	ite	ne
 800320a:	2301      	movne	r3, #1
 800320c:	2300      	moveq	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d03e      	beq.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2210      	movs	r2, #16
 800321e:	409a      	lsls	r2, r3
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d024      	beq.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e01f      	b.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01b      	beq.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e016      	b.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2220      	movs	r2, #32
 800329c:	409a      	lsls	r2, r3
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8110 	beq.w	80034c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003360 <HAL_DMA_IRQHandler+0x690>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d04a      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003364 <HAL_DMA_IRQHandler+0x694>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d045      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a29      	ldr	r2, [pc, #164]	@ (8003368 <HAL_DMA_IRQHandler+0x698>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d040      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a28      	ldr	r2, [pc, #160]	@ (800336c <HAL_DMA_IRQHandler+0x69c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d03b      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a26      	ldr	r2, [pc, #152]	@ (8003370 <HAL_DMA_IRQHandler+0x6a0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d036      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <HAL_DMA_IRQHandler+0x6a4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d031      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a23      	ldr	r2, [pc, #140]	@ (8003378 <HAL_DMA_IRQHandler+0x6a8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d02c      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a22      	ldr	r2, [pc, #136]	@ (800337c <HAL_DMA_IRQHandler+0x6ac>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d027      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a20      	ldr	r2, [pc, #128]	@ (8003380 <HAL_DMA_IRQHandler+0x6b0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d022      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <HAL_DMA_IRQHandler+0x6b4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d01d      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1d      	ldr	r2, [pc, #116]	@ (8003388 <HAL_DMA_IRQHandler+0x6b8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d018      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1c      	ldr	r2, [pc, #112]	@ (800338c <HAL_DMA_IRQHandler+0x6bc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1a      	ldr	r2, [pc, #104]	@ (8003390 <HAL_DMA_IRQHandler+0x6c0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00e      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <HAL_DMA_IRQHandler+0x6c4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d009      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a17      	ldr	r2, [pc, #92]	@ (8003398 <HAL_DMA_IRQHandler+0x6c8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	@ (800339c <HAL_DMA_IRQHandler+0x6cc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d12b      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x6d0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e02a      	b.n	80033b4 <HAL_DMA_IRQHandler+0x6e4>
 800335e:	bf00      	nop
 8003360:	40020010 	.word	0x40020010
 8003364:	40020028 	.word	0x40020028
 8003368:	40020040 	.word	0x40020040
 800336c:	40020058 	.word	0x40020058
 8003370:	40020070 	.word	0x40020070
 8003374:	40020088 	.word	0x40020088
 8003378:	400200a0 	.word	0x400200a0
 800337c:	400200b8 	.word	0x400200b8
 8003380:	40020410 	.word	0x40020410
 8003384:	40020428 	.word	0x40020428
 8003388:	40020440 	.word	0x40020440
 800338c:	40020458 	.word	0x40020458
 8003390:	40020470 	.word	0x40020470
 8003394:	40020488 	.word	0x40020488
 8003398:	400204a0 	.word	0x400204a0
 800339c:	400204b8 	.word	0x400204b8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8087 	beq.w	80034c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2220      	movs	r2, #32
 80033c4:	409a      	lsls	r2, r3
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d139      	bne.n	800344a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0216 	bic.w	r2, r2, #22
 80033e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <HAL_DMA_IRQHandler+0x736>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0208 	bic.w	r2, r2, #8
 8003414:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	223f      	movs	r2, #63	@ 0x3f
 8003420:	409a      	lsls	r2, r3
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 834a 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
          }
          return;
 8003448:	e344      	b.n	8003ad4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d018      	beq.n	800348a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
 8003476:	e027      	b.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d023      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
 8003488:	e01e      	b.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10f      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0210 	bic.w	r2, r2, #16
 80034a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8306 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8088 	beq.w	80035f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2204      	movs	r2, #4
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a7a      	ldr	r2, [pc, #488]	@ (80036d8 <HAL_DMA_IRQHandler+0xa08>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d04a      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a79      	ldr	r2, [pc, #484]	@ (80036dc <HAL_DMA_IRQHandler+0xa0c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d045      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a77      	ldr	r2, [pc, #476]	@ (80036e0 <HAL_DMA_IRQHandler+0xa10>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d040      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a76      	ldr	r2, [pc, #472]	@ (80036e4 <HAL_DMA_IRQHandler+0xa14>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d03b      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a74      	ldr	r2, [pc, #464]	@ (80036e8 <HAL_DMA_IRQHandler+0xa18>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d036      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a73      	ldr	r2, [pc, #460]	@ (80036ec <HAL_DMA_IRQHandler+0xa1c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d031      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a71      	ldr	r2, [pc, #452]	@ (80036f0 <HAL_DMA_IRQHandler+0xa20>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02c      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a70      	ldr	r2, [pc, #448]	@ (80036f4 <HAL_DMA_IRQHandler+0xa24>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d027      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	@ (80036f8 <HAL_DMA_IRQHandler+0xa28>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d022      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6d      	ldr	r2, [pc, #436]	@ (80036fc <HAL_DMA_IRQHandler+0xa2c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d01d      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6b      	ldr	r2, [pc, #428]	@ (8003700 <HAL_DMA_IRQHandler+0xa30>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6a      	ldr	r2, [pc, #424]	@ (8003704 <HAL_DMA_IRQHandler+0xa34>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a68      	ldr	r2, [pc, #416]	@ (8003708 <HAL_DMA_IRQHandler+0xa38>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a67      	ldr	r2, [pc, #412]	@ (800370c <HAL_DMA_IRQHandler+0xa3c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a65      	ldr	r2, [pc, #404]	@ (8003710 <HAL_DMA_IRQHandler+0xa40>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a64      	ldr	r2, [pc, #400]	@ (8003714 <HAL_DMA_IRQHandler+0xa44>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <HAL_DMA_IRQHandler+0x8ca>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e007      	b.n	80035aa <HAL_DMA_IRQHandler+0x8da>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3301      	adds	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d307      	bcc.n	80035c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f2      	bne.n	80035aa <HAL_DMA_IRQHandler+0x8da>
 80035c4:	e000      	b.n	80035c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80035de:	e003      	b.n	80035e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8272 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
 8003602:	e26c      	b.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a43      	ldr	r2, [pc, #268]	@ (8003718 <HAL_DMA_IRQHandler+0xa48>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a42      	ldr	r2, [pc, #264]	@ (800371c <HAL_DMA_IRQHandler+0xa4c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a40      	ldr	r2, [pc, #256]	@ (8003720 <HAL_DMA_IRQHandler+0xa50>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3f      	ldr	r2, [pc, #252]	@ (8003724 <HAL_DMA_IRQHandler+0xa54>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3d      	ldr	r2, [pc, #244]	@ (8003728 <HAL_DMA_IRQHandler+0xa58>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3c      	ldr	r2, [pc, #240]	@ (800372c <HAL_DMA_IRQHandler+0xa5c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3a      	ldr	r2, [pc, #232]	@ (8003730 <HAL_DMA_IRQHandler+0xa60>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a39      	ldr	r2, [pc, #228]	@ (8003734 <HAL_DMA_IRQHandler+0xa64>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_DMA_IRQHandler+0x988>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_DMA_IRQHandler+0x98a>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 823f 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2204      	movs	r2, #4
 8003672:	409a      	lsls	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80cd 	beq.w	8003818 <HAL_DMA_IRQHandler+0xb48>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80c7 	beq.w	8003818 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2204      	movs	r2, #4
 8003694:	409a      	lsls	r2, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d049      	beq.n	8003738 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8210 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036c0:	e20a      	b.n	8003ad8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8206 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d4:	e200      	b.n	8003ad8 <HAL_DMA_IRQHandler+0xe08>
 80036d6:	bf00      	nop
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	58025408 	.word	0x58025408
 800371c:	5802541c 	.word	0x5802541c
 8003720:	58025430 	.word	0x58025430
 8003724:	58025444 	.word	0x58025444
 8003728:	58025458 	.word	0x58025458
 800372c:	5802546c 	.word	0x5802546c
 8003730:	58025480 	.word	0x58025480
 8003734:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d160      	bne.n	8003804 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7f      	ldr	r2, [pc, #508]	@ (8003944 <HAL_DMA_IRQHandler+0xc74>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d04a      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7d      	ldr	r2, [pc, #500]	@ (8003948 <HAL_DMA_IRQHandler+0xc78>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d045      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7c      	ldr	r2, [pc, #496]	@ (800394c <HAL_DMA_IRQHandler+0xc7c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d040      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7a      	ldr	r2, [pc, #488]	@ (8003950 <HAL_DMA_IRQHandler+0xc80>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d03b      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a79      	ldr	r2, [pc, #484]	@ (8003954 <HAL_DMA_IRQHandler+0xc84>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d036      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a77      	ldr	r2, [pc, #476]	@ (8003958 <HAL_DMA_IRQHandler+0xc88>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d031      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a76      	ldr	r2, [pc, #472]	@ (800395c <HAL_DMA_IRQHandler+0xc8c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d02c      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a74      	ldr	r2, [pc, #464]	@ (8003960 <HAL_DMA_IRQHandler+0xc90>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d027      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a73      	ldr	r2, [pc, #460]	@ (8003964 <HAL_DMA_IRQHandler+0xc94>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d022      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a71      	ldr	r2, [pc, #452]	@ (8003968 <HAL_DMA_IRQHandler+0xc98>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01d      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a70      	ldr	r2, [pc, #448]	@ (800396c <HAL_DMA_IRQHandler+0xc9c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d018      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003970 <HAL_DMA_IRQHandler+0xca0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6d      	ldr	r2, [pc, #436]	@ (8003974 <HAL_DMA_IRQHandler+0xca4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003978 <HAL_DMA_IRQHandler+0xca8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6a      	ldr	r2, [pc, #424]	@ (800397c <HAL_DMA_IRQHandler+0xcac>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a68      	ldr	r2, [pc, #416]	@ (8003980 <HAL_DMA_IRQHandler+0xcb0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <HAL_DMA_IRQHandler+0xb24>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0208 	bic.w	r2, r2, #8
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e007      	b.n	8003804 <HAL_DMA_IRQHandler+0xb34>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8165 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003816:	e15f      	b.n	8003ad8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2202      	movs	r2, #2
 8003822:	409a      	lsls	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80c5 	beq.w	80039b8 <HAL_DMA_IRQHandler+0xce8>
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80bf 	beq.w	80039b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2202      	movs	r2, #2
 8003844:	409a      	lsls	r2, r3
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d018      	beq.n	8003886 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 813a 	beq.w	8003adc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003870:	e134      	b.n	8003adc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8130 	beq.w	8003adc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003884:	e12a      	b.n	8003adc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	f040 8089 	bne.w	80039a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2b      	ldr	r2, [pc, #172]	@ (8003944 <HAL_DMA_IRQHandler+0xc74>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d04a      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a29      	ldr	r2, [pc, #164]	@ (8003948 <HAL_DMA_IRQHandler+0xc78>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d045      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a28      	ldr	r2, [pc, #160]	@ (800394c <HAL_DMA_IRQHandler+0xc7c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d040      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a26      	ldr	r2, [pc, #152]	@ (8003950 <HAL_DMA_IRQHandler+0xc80>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d03b      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a25      	ldr	r2, [pc, #148]	@ (8003954 <HAL_DMA_IRQHandler+0xc84>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d036      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a23      	ldr	r2, [pc, #140]	@ (8003958 <HAL_DMA_IRQHandler+0xc88>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d031      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a22      	ldr	r2, [pc, #136]	@ (800395c <HAL_DMA_IRQHandler+0xc8c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d02c      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a20      	ldr	r2, [pc, #128]	@ (8003960 <HAL_DMA_IRQHandler+0xc90>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d027      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003964 <HAL_DMA_IRQHandler+0xc94>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <HAL_DMA_IRQHandler+0xc98>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01d      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	@ (800396c <HAL_DMA_IRQHandler+0xc9c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1a      	ldr	r2, [pc, #104]	@ (8003970 <HAL_DMA_IRQHandler+0xca0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a19      	ldr	r2, [pc, #100]	@ (8003974 <HAL_DMA_IRQHandler+0xca4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <HAL_DMA_IRQHandler+0xca8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a16      	ldr	r2, [pc, #88]	@ (800397c <HAL_DMA_IRQHandler+0xcac>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a14      	ldr	r2, [pc, #80]	@ (8003980 <HAL_DMA_IRQHandler+0xcb0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d128      	bne.n	8003984 <HAL_DMA_IRQHandler+0xcb4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0214 	bic.w	r2, r2, #20
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e027      	b.n	8003994 <HAL_DMA_IRQHandler+0xcc4>
 8003944:	40020010 	.word	0x40020010
 8003948:	40020028 	.word	0x40020028
 800394c:	40020040 	.word	0x40020040
 8003950:	40020058 	.word	0x40020058
 8003954:	40020070 	.word	0x40020070
 8003958:	40020088 	.word	0x40020088
 800395c:	400200a0 	.word	0x400200a0
 8003960:	400200b8 	.word	0x400200b8
 8003964:	40020410 	.word	0x40020410
 8003968:	40020428 	.word	0x40020428
 800396c:	40020440 	.word	0x40020440
 8003970:	40020458 	.word	0x40020458
 8003974:	40020470 	.word	0x40020470
 8003978:	40020488 	.word	0x40020488
 800397c:	400204a0 	.word	0x400204a0
 8003980:	400204b8 	.word	0x400204b8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 020a 	bic.w	r2, r2, #10
 8003992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8097 	beq.w	8003adc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b6:	e091      	b.n	8003adc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2208      	movs	r2, #8
 80039c2:	409a      	lsls	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8088 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8082 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a41      	ldr	r2, [pc, #260]	@ (8003ae4 <HAL_DMA_IRQHandler+0xe14>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae8 <HAL_DMA_IRQHandler+0xe18>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a3e      	ldr	r2, [pc, #248]	@ (8003aec <HAL_DMA_IRQHandler+0xe1c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a3c      	ldr	r2, [pc, #240]	@ (8003af0 <HAL_DMA_IRQHandler+0xe20>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a3b      	ldr	r2, [pc, #236]	@ (8003af4 <HAL_DMA_IRQHandler+0xe24>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a39      	ldr	r2, [pc, #228]	@ (8003af8 <HAL_DMA_IRQHandler+0xe28>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a38      	ldr	r2, [pc, #224]	@ (8003afc <HAL_DMA_IRQHandler+0xe2c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <HAL_DMA_IRQHandler+0xe30>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a35      	ldr	r2, [pc, #212]	@ (8003b04 <HAL_DMA_IRQHandler+0xe34>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a33      	ldr	r2, [pc, #204]	@ (8003b08 <HAL_DMA_IRQHandler+0xe38>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a32      	ldr	r2, [pc, #200]	@ (8003b0c <HAL_DMA_IRQHandler+0xe3c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a30      	ldr	r2, [pc, #192]	@ (8003b10 <HAL_DMA_IRQHandler+0xe40>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2f      	ldr	r2, [pc, #188]	@ (8003b14 <HAL_DMA_IRQHandler+0xe44>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2d      	ldr	r2, [pc, #180]	@ (8003b18 <HAL_DMA_IRQHandler+0xe48>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b1c <HAL_DMA_IRQHandler+0xe4c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	@ (8003b20 <HAL_DMA_IRQHandler+0xe50>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <HAL_DMA_IRQHandler+0xdbc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 021c 	bic.w	r2, r2, #28
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e007      	b.n	8003a9c <HAL_DMA_IRQHandler+0xdcc>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 020e 	bic.w	r2, r2, #14
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
 8003ad2:	e004      	b.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ad4:	bf00      	nop
 8003ad6:	e002      	b.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003adc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ade:	3728      	adds	r7, #40	@ 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40020010 	.word	0x40020010
 8003ae8:	40020028 	.word	0x40020028
 8003aec:	40020040 	.word	0x40020040
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40020070 	.word	0x40020070
 8003af8:	40020088 	.word	0x40020088
 8003afc:	400200a0 	.word	0x400200a0
 8003b00:	400200b8 	.word	0x400200b8
 8003b04:	40020410 	.word	0x40020410
 8003b08:	40020428 	.word	0x40020428
 8003b0c:	40020440 	.word	0x40020440
 8003b10:	40020458 	.word	0x40020458
 8003b14:	40020470 	.word	0x40020470
 8003b18:	40020488 	.word	0x40020488
 8003b1c:	400204a0 	.word	0x400204a0
 8003b20:	400204b8 	.word	0x400204b8

08003b24 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d58 <DMA_SetConfig+0x21c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d072      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a7d      	ldr	r2, [pc, #500]	@ (8003d5c <DMA_SetConfig+0x220>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d06d      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d60 <DMA_SetConfig+0x224>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d068      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a7a      	ldr	r2, [pc, #488]	@ (8003d64 <DMA_SetConfig+0x228>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d063      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a79      	ldr	r2, [pc, #484]	@ (8003d68 <DMA_SetConfig+0x22c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d05e      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a77      	ldr	r2, [pc, #476]	@ (8003d6c <DMA_SetConfig+0x230>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d059      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a76      	ldr	r2, [pc, #472]	@ (8003d70 <DMA_SetConfig+0x234>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d054      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a74      	ldr	r2, [pc, #464]	@ (8003d74 <DMA_SetConfig+0x238>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d04f      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a73      	ldr	r2, [pc, #460]	@ (8003d78 <DMA_SetConfig+0x23c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d04a      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a71      	ldr	r2, [pc, #452]	@ (8003d7c <DMA_SetConfig+0x240>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d045      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a70      	ldr	r2, [pc, #448]	@ (8003d80 <DMA_SetConfig+0x244>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d040      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8003d84 <DMA_SetConfig+0x248>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d03b      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6d      	ldr	r2, [pc, #436]	@ (8003d88 <DMA_SetConfig+0x24c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d036      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8003d8c <DMA_SetConfig+0x250>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6a      	ldr	r2, [pc, #424]	@ (8003d90 <DMA_SetConfig+0x254>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d02c      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a68      	ldr	r2, [pc, #416]	@ (8003d94 <DMA_SetConfig+0x258>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d027      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a67      	ldr	r2, [pc, #412]	@ (8003d98 <DMA_SetConfig+0x25c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a65      	ldr	r2, [pc, #404]	@ (8003d9c <DMA_SetConfig+0x260>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01d      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a64      	ldr	r2, [pc, #400]	@ (8003da0 <DMA_SetConfig+0x264>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d018      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a62      	ldr	r2, [pc, #392]	@ (8003da4 <DMA_SetConfig+0x268>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a61      	ldr	r2, [pc, #388]	@ (8003da8 <DMA_SetConfig+0x26c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a5f      	ldr	r2, [pc, #380]	@ (8003dac <DMA_SetConfig+0x270>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a5e      	ldr	r2, [pc, #376]	@ (8003db0 <DMA_SetConfig+0x274>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a5c      	ldr	r2, [pc, #368]	@ (8003db4 <DMA_SetConfig+0x278>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <DMA_SetConfig+0x10e>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <DMA_SetConfig+0x110>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00d      	beq.n	8003c6c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c58:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c6a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a39      	ldr	r2, [pc, #228]	@ (8003d58 <DMA_SetConfig+0x21c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d04a      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a38      	ldr	r2, [pc, #224]	@ (8003d5c <DMA_SetConfig+0x220>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d045      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a36      	ldr	r2, [pc, #216]	@ (8003d60 <DMA_SetConfig+0x224>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d040      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a35      	ldr	r2, [pc, #212]	@ (8003d64 <DMA_SetConfig+0x228>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d03b      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a33      	ldr	r2, [pc, #204]	@ (8003d68 <DMA_SetConfig+0x22c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d036      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a32      	ldr	r2, [pc, #200]	@ (8003d6c <DMA_SetConfig+0x230>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d031      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a30      	ldr	r2, [pc, #192]	@ (8003d70 <DMA_SetConfig+0x234>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02c      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d74 <DMA_SetConfig+0x238>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d027      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d78 <DMA_SetConfig+0x23c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d022      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2c      	ldr	r2, [pc, #176]	@ (8003d7c <DMA_SetConfig+0x240>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01d      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d80 <DMA_SetConfig+0x244>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d018      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a29      	ldr	r2, [pc, #164]	@ (8003d84 <DMA_SetConfig+0x248>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a27      	ldr	r2, [pc, #156]	@ (8003d88 <DMA_SetConfig+0x24c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a26      	ldr	r2, [pc, #152]	@ (8003d8c <DMA_SetConfig+0x250>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a24      	ldr	r2, [pc, #144]	@ (8003d90 <DMA_SetConfig+0x254>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a23      	ldr	r2, [pc, #140]	@ (8003d94 <DMA_SetConfig+0x258>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <DMA_SetConfig+0x1d4>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <DMA_SetConfig+0x1d6>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d059      	beq.n	8003dca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	223f      	movs	r2, #63	@ 0x3f
 8003d20:	409a      	lsls	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d34:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b40      	cmp	r3, #64	@ 0x40
 8003d44:	d138      	bne.n	8003db8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d56:	e086      	b.n	8003e66 <DMA_SetConfig+0x32a>
 8003d58:	40020010 	.word	0x40020010
 8003d5c:	40020028 	.word	0x40020028
 8003d60:	40020040 	.word	0x40020040
 8003d64:	40020058 	.word	0x40020058
 8003d68:	40020070 	.word	0x40020070
 8003d6c:	40020088 	.word	0x40020088
 8003d70:	400200a0 	.word	0x400200a0
 8003d74:	400200b8 	.word	0x400200b8
 8003d78:	40020410 	.word	0x40020410
 8003d7c:	40020428 	.word	0x40020428
 8003d80:	40020440 	.word	0x40020440
 8003d84:	40020458 	.word	0x40020458
 8003d88:	40020470 	.word	0x40020470
 8003d8c:	40020488 	.word	0x40020488
 8003d90:	400204a0 	.word	0x400204a0
 8003d94:	400204b8 	.word	0x400204b8
 8003d98:	58025408 	.word	0x58025408
 8003d9c:	5802541c 	.word	0x5802541c
 8003da0:	58025430 	.word	0x58025430
 8003da4:	58025444 	.word	0x58025444
 8003da8:	58025458 	.word	0x58025458
 8003dac:	5802546c 	.word	0x5802546c
 8003db0:	58025480 	.word	0x58025480
 8003db4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
}
 8003dc8:	e04d      	b.n	8003e66 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <DMA_SetConfig+0x338>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	@ (8003e78 <DMA_SetConfig+0x33c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a26      	ldr	r2, [pc, #152]	@ (8003e7c <DMA_SetConfig+0x340>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a24      	ldr	r2, [pc, #144]	@ (8003e80 <DMA_SetConfig+0x344>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a23      	ldr	r2, [pc, #140]	@ (8003e84 <DMA_SetConfig+0x348>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a21      	ldr	r2, [pc, #132]	@ (8003e88 <DMA_SetConfig+0x34c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <DMA_SetConfig+0x350>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1e      	ldr	r2, [pc, #120]	@ (8003e90 <DMA_SetConfig+0x354>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d101      	bne.n	8003e1e <DMA_SetConfig+0x2e2>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <DMA_SetConfig+0x2e4>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b40      	cmp	r3, #64	@ 0x40
 8003e42:	d108      	bne.n	8003e56 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	60da      	str	r2, [r3, #12]
}
 8003e54:	e007      	b.n	8003e66 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	60da      	str	r2, [r3, #12]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	58025408 	.word	0x58025408
 8003e78:	5802541c 	.word	0x5802541c
 8003e7c:	58025430 	.word	0x58025430
 8003e80:	58025444 	.word	0x58025444
 8003e84:	58025458 	.word	0x58025458
 8003e88:	5802546c 	.word	0x5802546c
 8003e8c:	58025480 	.word	0x58025480
 8003e90:	58025494 	.word	0x58025494

08003e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a42      	ldr	r2, [pc, #264]	@ (8003fac <DMA_CalcBaseAndBitshift+0x118>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a41      	ldr	r2, [pc, #260]	@ (8003fb0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a3f      	ldr	r2, [pc, #252]	@ (8003fb4 <DMA_CalcBaseAndBitshift+0x120>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb8 <DMA_CalcBaseAndBitshift+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fbc <DMA_CalcBaseAndBitshift+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a39      	ldr	r2, [pc, #228]	@ (8003fc4 <DMA_CalcBaseAndBitshift+0x130>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a38      	ldr	r2, [pc, #224]	@ (8003fc8 <DMA_CalcBaseAndBitshift+0x134>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a36      	ldr	r2, [pc, #216]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x138>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a35      	ldr	r2, [pc, #212]	@ (8003fd0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a33      	ldr	r2, [pc, #204]	@ (8003fd4 <DMA_CalcBaseAndBitshift+0x140>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a32      	ldr	r2, [pc, #200]	@ (8003fd8 <DMA_CalcBaseAndBitshift+0x144>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a30      	ldr	r2, [pc, #192]	@ (8003fdc <DMA_CalcBaseAndBitshift+0x148>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2f      	ldr	r2, [pc, #188]	@ (8003fe0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe4 <DMA_CalcBaseAndBitshift+0x150>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe8 <DMA_CalcBaseAndBitshift+0x154>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <DMA_CalcBaseAndBitshift+0xac>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <DMA_CalcBaseAndBitshift+0xae>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d024      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	3b10      	subs	r3, #16
 8003f4e:	4a27      	ldr	r2, [pc, #156]	@ (8003fec <DMA_CalcBaseAndBitshift+0x158>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	4a24      	ldr	r2, [pc, #144]	@ (8003ff0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d908      	bls.n	8003f80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	1d1a      	adds	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f7e:	e00d      	b.n	8003f9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f8e:	e005      	b.n	8003f9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40020010 	.word	0x40020010
 8003fb0:	40020028 	.word	0x40020028
 8003fb4:	40020040 	.word	0x40020040
 8003fb8:	40020058 	.word	0x40020058
 8003fbc:	40020070 	.word	0x40020070
 8003fc0:	40020088 	.word	0x40020088
 8003fc4:	400200a0 	.word	0x400200a0
 8003fc8:	400200b8 	.word	0x400200b8
 8003fcc:	40020410 	.word	0x40020410
 8003fd0:	40020428 	.word	0x40020428
 8003fd4:	40020440 	.word	0x40020440
 8003fd8:	40020458 	.word	0x40020458
 8003fdc:	40020470 	.word	0x40020470
 8003fe0:	40020488 	.word	0x40020488
 8003fe4:	400204a0 	.word	0x400204a0
 8003fe8:	400204b8 	.word	0x400204b8
 8003fec:	aaaaaaab 	.word	0xaaaaaaab
 8003ff0:	0800cf9c 	.word	0x0800cf9c
 8003ff4:	fffffc00 	.word	0xfffffc00

08003ff8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d120      	bne.n	800404e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	2b03      	cmp	r3, #3
 8004012:	d858      	bhi.n	80040c6 <DMA_CheckFifoParam+0xce>
 8004014:	a201      	add	r2, pc, #4	@ (adr r2, 800401c <DMA_CheckFifoParam+0x24>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	0800402d 	.word	0x0800402d
 8004020:	0800403f 	.word	0x0800403f
 8004024:	0800402d 	.word	0x0800402d
 8004028:	080040c7 	.word	0x080040c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d048      	beq.n	80040ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800403c:	e045      	b.n	80040ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004046:	d142      	bne.n	80040ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800404c:	e03f      	b.n	80040ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004056:	d123      	bne.n	80040a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	2b03      	cmp	r3, #3
 800405e:	d838      	bhi.n	80040d2 <DMA_CheckFifoParam+0xda>
 8004060:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <DMA_CheckFifoParam+0x70>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	08004079 	.word	0x08004079
 800406c:	0800407f 	.word	0x0800407f
 8004070:	08004079 	.word	0x08004079
 8004074:	08004091 	.word	0x08004091
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
        break;
 800407c:	e030      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d025      	beq.n	80040d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800408e:	e022      	b.n	80040d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004098:	d11f      	bne.n	80040da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800409e:	e01c      	b.n	80040da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d902      	bls.n	80040ae <DMA_CheckFifoParam+0xb6>
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d003      	beq.n	80040b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040ac:	e018      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
        break;
 80040b2:	e015      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00e      	beq.n	80040de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
    break;
 80040c4:	e00b      	b.n	80040de <DMA_CheckFifoParam+0xe6>
        break;
 80040c6:	bf00      	nop
 80040c8:	e00a      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040ca:	bf00      	nop
 80040cc:	e008      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040ce:	bf00      	nop
 80040d0:	e006      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040d2:	bf00      	nop
 80040d4:	e004      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
    break;
 80040de:	bf00      	nop
    }
  }

  return status;
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop

080040f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a38      	ldr	r2, [pc, #224]	@ (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a36      	ldr	r2, [pc, #216]	@ (80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a35      	ldr	r2, [pc, #212]	@ (80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a33      	ldr	r2, [pc, #204]	@ (80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a32      	ldr	r2, [pc, #200]	@ (80041f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a30      	ldr	r2, [pc, #192]	@ (80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2f      	ldr	r2, [pc, #188]	@ (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2d      	ldr	r2, [pc, #180]	@ (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01a      	beq.n	800418e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	3b08      	subs	r3, #8
 8004160:	4a28      	ldr	r2, [pc, #160]	@ (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4b26      	ldr	r3, [pc, #152]	@ (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a24      	ldr	r2, [pc, #144]	@ (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800417c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800418c:	e024      	b.n	80041d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	3b10      	subs	r3, #16
 8004196:	4a1e      	ldr	r2, [pc, #120]	@ (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d806      	bhi.n	80041b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d902      	bls.n	80041b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3308      	adds	r3, #8
 80041b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4b18      	ldr	r3, [pc, #96]	@ (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	@ (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2201      	movs	r2, #1
 80041d2:	409a      	lsls	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	58025408 	.word	0x58025408
 80041e8:	5802541c 	.word	0x5802541c
 80041ec:	58025430 	.word	0x58025430
 80041f0:	58025444 	.word	0x58025444
 80041f4:	58025458 	.word	0x58025458
 80041f8:	5802546c 	.word	0x5802546c
 80041fc:	58025480 	.word	0x58025480
 8004200:	58025494 	.word	0x58025494
 8004204:	cccccccd 	.word	0xcccccccd
 8004208:	16009600 	.word	0x16009600
 800420c:	58025880 	.word	0x58025880
 8004210:	aaaaaaab 	.word	0xaaaaaaab
 8004214:	400204b8 	.word	0x400204b8
 8004218:	4002040f 	.word	0x4002040f
 800421c:	10008200 	.word	0x10008200
 8004220:	40020880 	.word	0x40020880

08004224 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d04a      	beq.n	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d847      	bhi.n	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a25      	ldr	r2, [pc, #148]	@ (80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01d      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a22      	ldr	r2, [pc, #136]	@ (80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a21      	ldr	r2, [pc, #132]	@ (80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1f      	ldr	r2, [pc, #124]	@ (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1e      	ldr	r2, [pc, #120]	@ (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1c      	ldr	r2, [pc, #112]	@ (80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1b      	ldr	r2, [pc, #108]	@ (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4b17      	ldr	r3, [pc, #92]	@ (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a15      	ldr	r2, [pc, #84]	@ (8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80042ae:	e009      	b.n	80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4b14      	ldr	r3, [pc, #80]	@ (8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	461a      	mov	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a11      	ldr	r2, [pc, #68]	@ (8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	58025408 	.word	0x58025408
 80042e0:	5802541c 	.word	0x5802541c
 80042e4:	58025430 	.word	0x58025430
 80042e8:	58025444 	.word	0x58025444
 80042ec:	58025458 	.word	0x58025458
 80042f0:	5802546c 	.word	0x5802546c
 80042f4:	58025480 	.word	0x58025480
 80042f8:	58025494 	.word	0x58025494
 80042fc:	1600963f 	.word	0x1600963f
 8004300:	58025940 	.word	0x58025940
 8004304:	1000823f 	.word	0x1000823f
 8004308:	40020940 	.word	0x40020940

0800430c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	7a1b      	ldrb	r3, [r3, #8]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d154      	bne.n	80043d0 <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a4b      	ldr	r2, [pc, #300]	@ (8004458 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d049      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a49      	ldr	r2, [pc, #292]	@ (800445c <HAL_DMAEx_ConfigMuxSync+0x150>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d044      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a48      	ldr	r2, [pc, #288]	@ (8004460 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d03f      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a46      	ldr	r2, [pc, #280]	@ (8004464 <HAL_DMAEx_ConfigMuxSync+0x158>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d03a      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a45      	ldr	r2, [pc, #276]	@ (8004468 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d035      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a43      	ldr	r2, [pc, #268]	@ (800446c <HAL_DMAEx_ConfigMuxSync+0x160>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d030      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a42      	ldr	r2, [pc, #264]	@ (8004470 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d02b      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a40      	ldr	r2, [pc, #256]	@ (8004474 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d026      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a3f      	ldr	r2, [pc, #252]	@ (8004478 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d021      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a3d      	ldr	r2, [pc, #244]	@ (800447c <HAL_DMAEx_ConfigMuxSync+0x170>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d01c      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3c      	ldr	r2, [pc, #240]	@ (8004480 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d017      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3a      	ldr	r2, [pc, #232]	@ (8004484 <HAL_DMAEx_ConfigMuxSync+0x178>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d012      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a39      	ldr	r2, [pc, #228]	@ (8004488 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00d      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a37      	ldr	r2, [pc, #220]	@ (800448c <HAL_DMAEx_ConfigMuxSync+0x180>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d008      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a36      	ldr	r2, [pc, #216]	@ (8004490 <HAL_DMAEx_ConfigMuxSync+0x184>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a34      	ldr	r2, [pc, #208]	@ (8004494 <HAL_DMAEx_ConfigMuxSync+0x188>)
 80043c2:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d131      	bne.n	8004440 <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_DMAEx_ConfigMuxSync+0xde>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e02f      	b.n	800444a <HAL_DMAEx_ConfigMuxSync+0x13e>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043fc:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 8004400:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	b2d9      	uxtb	r1, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	061a      	lsls	r2, r3, #24
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	3b01      	subs	r3, #1
 8004414:	04db      	lsls	r3, r3, #19
 8004416:	431a      	orrs	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	431a      	orrs	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	7a1b      	ldrb	r3, [r3, #8]
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	431a      	orrs	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	7a5b      	ldrb	r3, [r3, #9]
 8004428:	025b      	lsls	r3, r3, #9
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004430:	430a      	orrs	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	e004      	b.n	800444a <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004446:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
  }
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40020010 	.word	0x40020010
 800445c:	40020028 	.word	0x40020028
 8004460:	40020040 	.word	0x40020040
 8004464:	40020058 	.word	0x40020058
 8004468:	40020070 	.word	0x40020070
 800446c:	40020088 	.word	0x40020088
 8004470:	400200a0 	.word	0x400200a0
 8004474:	400200b8 	.word	0x400200b8
 8004478:	40020410 	.word	0x40020410
 800447c:	40020428 	.word	0x40020428
 8004480:	40020440 	.word	0x40020440
 8004484:	40020458 	.word	0x40020458
 8004488:	40020470 	.word	0x40020470
 800448c:	40020488 	.word	0x40020488
 8004490:	400204a0 	.word	0x400204a0
 8004494:	400204b8 	.word	0x400204b8

08004498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	@ 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80044a6:	4b89      	ldr	r3, [pc, #548]	@ (80046cc <HAL_GPIO_Init+0x234>)
 80044a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044aa:	e194      	b.n	80047d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	2101      	movs	r1, #1
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	fa01 f303 	lsl.w	r3, r1, r3
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 8186 	beq.w	80047d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d005      	beq.n	80044dc <HAL_GPIO_Init+0x44>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d130      	bne.n	800453e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	2203      	movs	r2, #3
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68da      	ldr	r2, [r3, #12]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004512:	2201      	movs	r2, #1
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	091b      	lsrs	r3, r3, #4
 8004528:	f003 0201 	and.w	r2, r3, #1
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	fa02 f303 	lsl.w	r3, r2, r3
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	4313      	orrs	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	2b03      	cmp	r3, #3
 8004548:	d017      	beq.n	800457a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	2203      	movs	r2, #3
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43db      	mvns	r3, r3
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	4013      	ands	r3, r2
 8004560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d123      	bne.n	80045ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	08da      	lsrs	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	3208      	adds	r2, #8
 800458e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	220f      	movs	r2, #15
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	08da      	lsrs	r2, r3, #3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3208      	adds	r2, #8
 80045c8:	69b9      	ldr	r1, [r7, #24]
 80045ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	2203      	movs	r2, #3
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43db      	mvns	r3, r3
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4013      	ands	r3, r2
 80045e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0203 	and.w	r2, r3, #3
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800460a:	2b00      	cmp	r3, #0
 800460c:	f000 80e0 	beq.w	80047d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004610:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <HAL_GPIO_Init+0x238>)
 8004612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004616:	4a2e      	ldr	r2, [pc, #184]	@ (80046d0 <HAL_GPIO_Init+0x238>)
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004620:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <HAL_GPIO_Init+0x238>)
 8004622:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800462e:	4a29      	ldr	r2, [pc, #164]	@ (80046d4 <HAL_GPIO_Init+0x23c>)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	3302      	adds	r3, #2
 8004636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	220f      	movs	r2, #15
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a20      	ldr	r2, [pc, #128]	@ (80046d8 <HAL_GPIO_Init+0x240>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d052      	beq.n	8004700 <HAL_GPIO_Init+0x268>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <HAL_GPIO_Init+0x244>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d031      	beq.n	80046c6 <HAL_GPIO_Init+0x22e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_GPIO_Init+0x248>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d02b      	beq.n	80046c2 <HAL_GPIO_Init+0x22a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1d      	ldr	r2, [pc, #116]	@ (80046e4 <HAL_GPIO_Init+0x24c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d025      	beq.n	80046be <HAL_GPIO_Init+0x226>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <HAL_GPIO_Init+0x250>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d01f      	beq.n	80046ba <HAL_GPIO_Init+0x222>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ec <HAL_GPIO_Init+0x254>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d019      	beq.n	80046b6 <HAL_GPIO_Init+0x21e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a1a      	ldr	r2, [pc, #104]	@ (80046f0 <HAL_GPIO_Init+0x258>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_GPIO_Init+0x21a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <HAL_GPIO_Init+0x25c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d00d      	beq.n	80046ae <HAL_GPIO_Init+0x216>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a18      	ldr	r2, [pc, #96]	@ (80046f8 <HAL_GPIO_Init+0x260>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d007      	beq.n	80046aa <HAL_GPIO_Init+0x212>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a17      	ldr	r2, [pc, #92]	@ (80046fc <HAL_GPIO_Init+0x264>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d101      	bne.n	80046a6 <HAL_GPIO_Init+0x20e>
 80046a2:	2309      	movs	r3, #9
 80046a4:	e02d      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046a6:	230a      	movs	r3, #10
 80046a8:	e02b      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046aa:	2308      	movs	r3, #8
 80046ac:	e029      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046ae:	2307      	movs	r3, #7
 80046b0:	e027      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046b2:	2306      	movs	r3, #6
 80046b4:	e025      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046b6:	2305      	movs	r3, #5
 80046b8:	e023      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046ba:	2304      	movs	r3, #4
 80046bc:	e021      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046be:	2303      	movs	r3, #3
 80046c0:	e01f      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e01d      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e01b      	b.n	8004702 <HAL_GPIO_Init+0x26a>
 80046ca:	bf00      	nop
 80046cc:	58000080 	.word	0x58000080
 80046d0:	58024400 	.word	0x58024400
 80046d4:	58000400 	.word	0x58000400
 80046d8:	58020000 	.word	0x58020000
 80046dc:	58020400 	.word	0x58020400
 80046e0:	58020800 	.word	0x58020800
 80046e4:	58020c00 	.word	0x58020c00
 80046e8:	58021000 	.word	0x58021000
 80046ec:	58021400 	.word	0x58021400
 80046f0:	58021800 	.word	0x58021800
 80046f4:	58021c00 	.word	0x58021c00
 80046f8:	58022000 	.word	0x58022000
 80046fc:	58022400 	.word	0x58022400
 8004700:	2300      	movs	r3, #0
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	f002 0203 	and.w	r2, r2, #3
 8004708:	0092      	lsls	r2, r2, #2
 800470a:	4093      	lsls	r3, r2
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004712:	4938      	ldr	r1, [pc, #224]	@ (80047f4 <HAL_GPIO_Init+0x35c>)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	089b      	lsrs	r3, r3, #2
 8004718:	3302      	adds	r3, #2
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800474e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004774:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	43db      	mvns	r3, r3
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	4013      	ands	r3, r2
 800478a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f47f ae63 	bne.w	80044ac <HAL_GPIO_Init+0x14>
  }
}
 80047e6:	bf00      	nop
 80047e8:	bf00      	nop
 80047ea:	3724      	adds	r7, #36	@ 0x24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	58000400 	.word	0x58000400

080047f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004800:	4a08      	ldr	r2, [pc, #32]	@ (8004824 <HAL_HSEM_FastTake+0x2c>)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3320      	adds	r3, #32
 8004806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480a:	4a07      	ldr	r2, [pc, #28]	@ (8004828 <HAL_HSEM_FastTake+0x30>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d101      	bne.n	8004814 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	58026400 	.word	0x58026400
 8004828:	80000300 	.word	0x80000300

0800482c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004836:	4906      	ldr	r1, [pc, #24]	@ (8004850 <HAL_HSEM_Release+0x24>)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	58026400 	.word	0x58026400

08004854 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800485c:	4b29      	ldr	r3, [pc, #164]	@ (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	2b06      	cmp	r3, #6
 8004866:	d00a      	beq.n	800487e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004868:	4b26      	ldr	r3, [pc, #152]	@ (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d001      	beq.n	800487a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e040      	b.n	80048fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	e03e      	b.n	80048fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800487e:	4b21      	ldr	r3, [pc, #132]	@ (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8004886:	491f      	ldr	r1, [pc, #124]	@ (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4313      	orrs	r3, r2
 800488c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800488e:	f7fc fd31 	bl	80012f4 <HAL_GetTick>
 8004892:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004894:	e009      	b.n	80048aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004896:	f7fc fd2d 	bl	80012f4 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048a4:	d901      	bls.n	80048aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e028      	b.n	80048fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80048aa:	4b16      	ldr	r3, [pc, #88]	@ (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048b6:	d1ee      	bne.n	8004896 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b1e      	cmp	r3, #30
 80048bc:	d008      	beq.n	80048d0 <HAL_PWREx_ConfigSupply+0x7c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80048c2:	d005      	beq.n	80048d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b1d      	cmp	r3, #29
 80048c8:	d002      	beq.n	80048d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b2d      	cmp	r3, #45	@ 0x2d
 80048ce:	d114      	bne.n	80048fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80048d0:	f7fc fd10 	bl	80012f4 <HAL_GetTick>
 80048d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048d6:	e009      	b.n	80048ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80048d8:	f7fc fd0c 	bl	80012f4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048e6:	d901      	bls.n	80048ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80048ec:	4b05      	ldr	r3, [pc, #20]	@ (8004904 <HAL_PWREx_ConfigSupply+0xb0>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f8:	d1ee      	bne.n	80048d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	58024800 	.word	0x58024800

08004908 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08c      	sub	sp, #48	@ 0x30
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d102      	bne.n	800491c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f000 bc48 	b.w	80051ac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 8088 	beq.w	8004a3a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800492a:	4b99      	ldr	r3, [pc, #612]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004934:	4b96      	ldr	r3, [pc, #600]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004938:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800493a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493c:	2b10      	cmp	r3, #16
 800493e:	d007      	beq.n	8004950 <HAL_RCC_OscConfig+0x48>
 8004940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004942:	2b18      	cmp	r3, #24
 8004944:	d111      	bne.n	800496a <HAL_RCC_OscConfig+0x62>
 8004946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004948:	f003 0303 	and.w	r3, r3, #3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d10c      	bne.n	800496a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b8f      	ldr	r3, [pc, #572]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d06d      	beq.n	8004a38 <HAL_RCC_OscConfig+0x130>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d169      	bne.n	8004a38 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f000 bc21 	b.w	80051ac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004972:	d106      	bne.n	8004982 <HAL_RCC_OscConfig+0x7a>
 8004974:	4b86      	ldr	r3, [pc, #536]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a85      	ldr	r2, [pc, #532]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 800497a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e02e      	b.n	80049e0 <HAL_RCC_OscConfig+0xd8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x9c>
 800498a:	4b81      	ldr	r3, [pc, #516]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a80      	ldr	r2, [pc, #512]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b7e      	ldr	r3, [pc, #504]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a7d      	ldr	r2, [pc, #500]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 800499c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e01d      	b.n	80049e0 <HAL_RCC_OscConfig+0xd8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049ac:	d10c      	bne.n	80049c8 <HAL_RCC_OscConfig+0xc0>
 80049ae:	4b78      	ldr	r3, [pc, #480]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a77      	ldr	r2, [pc, #476]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049b8:	6013      	str	r3, [r2, #0]
 80049ba:	4b75      	ldr	r3, [pc, #468]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a74      	ldr	r2, [pc, #464]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e00b      	b.n	80049e0 <HAL_RCC_OscConfig+0xd8>
 80049c8:	4b71      	ldr	r3, [pc, #452]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a70      	ldr	r2, [pc, #448]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	4b6e      	ldr	r3, [pc, #440]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6d      	ldr	r2, [pc, #436]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 80049da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fc fc84 	bl	80012f4 <HAL_GetTick>
 80049ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f0:	f7fc fc80 	bl	80012f4 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e3d4      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a02:	4b63      	ldr	r3, [pc, #396]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0xe8>
 8004a0e:	e014      	b.n	8004a3a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fc fc70 	bl	80012f4 <HAL_GetTick>
 8004a14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a18:	f7fc fc6c 	bl	80012f4 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	@ 0x64
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e3c0      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004a2a:	4b59      	ldr	r3, [pc, #356]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x110>
 8004a36:	e000      	b.n	8004a3a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 80ca 	beq.w	8004bdc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a48:	4b51      	ldr	r3, [pc, #324]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a52:	4b4f      	ldr	r3, [pc, #316]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <HAL_RCC_OscConfig+0x166>
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	2b18      	cmp	r3, #24
 8004a62:	d156      	bne.n	8004b12 <HAL_RCC_OscConfig+0x20a>
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d151      	bne.n	8004b12 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6e:	4b48      	ldr	r3, [pc, #288]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_RCC_OscConfig+0x17e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e392      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a86:	4b42      	ldr	r3, [pc, #264]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 0219 	bic.w	r2, r3, #25
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	493f      	ldr	r1, [pc, #252]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fc fc2c 	bl	80012f4 <HAL_GetTick>
 8004a9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa0:	f7fc fc28 	bl	80012f4 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e37c      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ab2:	4b37      	ldr	r3, [pc, #220]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004abe:	f7fc fc49 	bl	8001354 <HAL_GetREVID>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d817      	bhi.n	8004afc <HAL_RCC_OscConfig+0x1f4>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b40      	cmp	r3, #64	@ 0x40
 8004ad2:	d108      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x1de>
 8004ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004adc:	4a2c      	ldr	r2, [pc, #176]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ae4:	e07a      	b.n	8004bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	031b      	lsls	r3, r3, #12
 8004af4:	4926      	ldr	r1, [pc, #152]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afa:	e06f      	b.n	8004bdc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afc:	4b24      	ldr	r3, [pc, #144]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	4921      	ldr	r1, [pc, #132]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b10:	e064      	b.n	8004bdc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d047      	beq.n	8004baa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 0219 	bic.w	r2, r3, #25
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	491a      	ldr	r1, [pc, #104]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fc fbe2 	bl	80012f4 <HAL_GetTick>
 8004b30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b34:	f7fc fbde 	bl	80012f4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e332      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b46:	4b12      	ldr	r3, [pc, #72]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b52:	f7fc fbff 	bl	8001354 <HAL_GetREVID>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d819      	bhi.n	8004b94 <HAL_RCC_OscConfig+0x28c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d108      	bne.n	8004b7a <HAL_RCC_OscConfig+0x272>
 8004b68:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004b70:	4a07      	ldr	r2, [pc, #28]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b76:	6053      	str	r3, [r2, #4]
 8004b78:	e030      	b.n	8004bdc <HAL_RCC_OscConfig+0x2d4>
 8004b7a:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	031b      	lsls	r3, r3, #12
 8004b88:	4901      	ldr	r1, [pc, #4]	@ (8004b90 <HAL_RCC_OscConfig+0x288>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
 8004b8e:	e025      	b.n	8004bdc <HAL_RCC_OscConfig+0x2d4>
 8004b90:	58024400 	.word	0x58024400
 8004b94:	4b9a      	ldr	r3, [pc, #616]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	061b      	lsls	r3, r3, #24
 8004ba2:	4997      	ldr	r1, [pc, #604]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	604b      	str	r3, [r1, #4]
 8004ba8:	e018      	b.n	8004bdc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004baa:	4b95      	ldr	r3, [pc, #596]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a94      	ldr	r2, [pc, #592]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fc fb9d 	bl	80012f4 <HAL_GetTick>
 8004bba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fc fb99 	bl	80012f4 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e2ed      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bd0:	4b8b      	ldr	r3, [pc, #556]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f0      	bne.n	8004bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0310 	and.w	r3, r3, #16
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80a9 	beq.w	8004d3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bea:	4b85      	ldr	r3, [pc, #532]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bf4:	4b82      	ldr	r3, [pc, #520]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	2b08      	cmp	r3, #8
 8004bfe:	d007      	beq.n	8004c10 <HAL_RCC_OscConfig+0x308>
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b18      	cmp	r3, #24
 8004c04:	d13a      	bne.n	8004c7c <HAL_RCC_OscConfig+0x374>
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d135      	bne.n	8004c7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c10:	4b7b      	ldr	r3, [pc, #492]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_OscConfig+0x320>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	2b80      	cmp	r3, #128	@ 0x80
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e2c1      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c28:	f7fc fb94 	bl	8001354 <HAL_GetREVID>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d817      	bhi.n	8004c66 <HAL_RCC_OscConfig+0x35e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d108      	bne.n	8004c50 <HAL_RCC_OscConfig+0x348>
 8004c3e:	4b70      	ldr	r3, [pc, #448]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004c46:	4a6e      	ldr	r2, [pc, #440]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c4e:	e075      	b.n	8004d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c50:	4b6b      	ldr	r3, [pc, #428]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	069b      	lsls	r3, r3, #26
 8004c5e:	4968      	ldr	r1, [pc, #416]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c64:	e06a      	b.n	8004d3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c66:	4b66      	ldr	r3, [pc, #408]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	4962      	ldr	r1, [pc, #392]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c7a:	e05f      	b.n	8004d3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d042      	beq.n	8004d0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c84:	4b5e      	ldr	r3, [pc, #376]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a5d      	ldr	r2, [pc, #372]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fc fb30 	bl	80012f4 <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c98:	f7fc fb2c 	bl	80012f4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e280      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004caa:	4b55      	ldr	r3, [pc, #340]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb6:	f7fc fb4d 	bl	8001354 <HAL_GetREVID>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d817      	bhi.n	8004cf4 <HAL_RCC_OscConfig+0x3ec>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d108      	bne.n	8004cde <HAL_RCC_OscConfig+0x3d6>
 8004ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004cd4:	4a4a      	ldr	r2, [pc, #296]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004cd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004cda:	6053      	str	r3, [r2, #4]
 8004cdc:	e02e      	b.n	8004d3c <HAL_RCC_OscConfig+0x434>
 8004cde:	4b48      	ldr	r3, [pc, #288]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	069b      	lsls	r3, r3, #26
 8004cec:	4944      	ldr	r1, [pc, #272]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
 8004cf2:	e023      	b.n	8004d3c <HAL_RCC_OscConfig+0x434>
 8004cf4:	4b42      	ldr	r3, [pc, #264]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	061b      	lsls	r3, r3, #24
 8004d02:	493f      	ldr	r1, [pc, #252]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60cb      	str	r3, [r1, #12]
 8004d08:	e018      	b.n	8004d3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d16:	f7fc faed 	bl	80012f4 <HAL_GetTick>
 8004d1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004d1e:	f7fc fae9 	bl	80012f4 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e23d      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004d30:	4b33      	ldr	r3, [pc, #204]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f0      	bne.n	8004d1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d036      	beq.n	8004db6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d019      	beq.n	8004d84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d50:	4b2b      	ldr	r3, [pc, #172]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d54:	4a2a      	ldr	r2, [pc, #168]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fc faca 	bl	80012f4 <HAL_GetTick>
 8004d60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fc fac6 	bl	80012f4 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e21a      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d76:	4b22      	ldr	r3, [pc, #136]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x45c>
 8004d82:	e018      	b.n	8004db6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d84:	4b1e      	ldr	r3, [pc, #120]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d88:	4a1d      	ldr	r2, [pc, #116]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d90:	f7fc fab0 	bl	80012f4 <HAL_GetTick>
 8004d94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d98:	f7fc faac 	bl	80012f4 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e200      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004daa:	4b15      	ldr	r3, [pc, #84]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1f0      	bne.n	8004d98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d039      	beq.n	8004e36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01c      	beq.n	8004e04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004dca:	4b0d      	ldr	r3, [pc, #52]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a0c      	ldr	r2, [pc, #48]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004dd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dd6:	f7fc fa8d 	bl	80012f4 <HAL_GetTick>
 8004dda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dde:	f7fc fa89 	bl	80012f4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e1dd      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004df0:	4b03      	ldr	r3, [pc, #12]	@ (8004e00 <HAL_RCC_OscConfig+0x4f8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0f0      	beq.n	8004dde <HAL_RCC_OscConfig+0x4d6>
 8004dfc:	e01b      	b.n	8004e36 <HAL_RCC_OscConfig+0x52e>
 8004dfe:	bf00      	nop
 8004e00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e04:	4b9b      	ldr	r3, [pc, #620]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a9a      	ldr	r2, [pc, #616]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004e0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004e10:	f7fc fa70 	bl	80012f4 <HAL_GetTick>
 8004e14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e18:	f7fc fa6c 	bl	80012f4 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e1c0      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004e2a:	4b92      	ldr	r3, [pc, #584]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0304 	and.w	r3, r3, #4
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 8081 	beq.w	8004f46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e44:	4b8c      	ldr	r3, [pc, #560]	@ (8005078 <HAL_RCC_OscConfig+0x770>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a8b      	ldr	r2, [pc, #556]	@ (8005078 <HAL_RCC_OscConfig+0x770>)
 8004e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e50:	f7fc fa50 	bl	80012f4 <HAL_GetTick>
 8004e54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e58:	f7fc fa4c 	bl	80012f4 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b64      	cmp	r3, #100	@ 0x64
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e1a0      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e6a:	4b83      	ldr	r3, [pc, #524]	@ (8005078 <HAL_RCC_OscConfig+0x770>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d106      	bne.n	8004e8c <HAL_RCC_OscConfig+0x584>
 8004e7e:	4b7d      	ldr	r3, [pc, #500]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e82:	4a7c      	ldr	r2, [pc, #496]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8a:	e02d      	b.n	8004ee8 <HAL_RCC_OscConfig+0x5e0>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10c      	bne.n	8004eae <HAL_RCC_OscConfig+0x5a6>
 8004e94:	4b77      	ldr	r3, [pc, #476]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	4a76      	ldr	r2, [pc, #472]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea0:	4b74      	ldr	r3, [pc, #464]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea4:	4a73      	ldr	r2, [pc, #460]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eac:	e01c      	b.n	8004ee8 <HAL_RCC_OscConfig+0x5e0>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b05      	cmp	r3, #5
 8004eb4:	d10c      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x5c8>
 8004eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eba:	4a6e      	ldr	r2, [pc, #440]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	4a6b      	ldr	r2, [pc, #428]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCC_OscConfig+0x5e0>
 8004ed0:	4b68      	ldr	r3, [pc, #416]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed4:	4a67      	ldr	r2, [pc, #412]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004edc:	4b65      	ldr	r3, [pc, #404]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee0:	4a64      	ldr	r2, [pc, #400]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ee2:	f023 0304 	bic.w	r3, r3, #4
 8004ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d015      	beq.n	8004f1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef0:	f7fc fa00 	bl	80012f4 <HAL_GetTick>
 8004ef4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fc f9fc 	bl	80012f4 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e14e      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f0e:	4b59      	ldr	r3, [pc, #356]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ee      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x5f0>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1c:	f7fc f9ea 	bl	80012f4 <HAL_GetTick>
 8004f20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f24:	f7fc f9e6 	bl	80012f4 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e138      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1ee      	bne.n	8004f24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 812d 	beq.w	80051aa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f50:	4b48      	ldr	r3, [pc, #288]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f58:	2b18      	cmp	r3, #24
 8004f5a:	f000 80bd 	beq.w	80050d8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	f040 809e 	bne.w	80050a4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f68:	4b42      	ldr	r3, [pc, #264]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a41      	ldr	r2, [pc, #260]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004f6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fc f9be 	bl	80012f4 <HAL_GetTick>
 8004f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fc f9ba 	bl	80012f4 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e10e      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f8e:	4b39      	ldr	r3, [pc, #228]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f9a:	4b36      	ldr	r3, [pc, #216]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004f9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f9e:	4b37      	ldr	r3, [pc, #220]	@ (800507c <HAL_RCC_OscConfig+0x774>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004faa:	0112      	lsls	r2, r2, #4
 8004fac:	430a      	orrs	r2, r1
 8004fae:	4931      	ldr	r1, [pc, #196]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb8:	3b01      	subs	r3, #1
 8004fba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	025b      	lsls	r3, r3, #9
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	041b      	lsls	r3, r3, #16
 8004fd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	061b      	lsls	r3, r3, #24
 8004fe0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fe4:	4923      	ldr	r1, [pc, #140]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004fea:	4b22      	ldr	r3, [pc, #136]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fee:	4a21      	ldr	r2, [pc, #132]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ff0:	f023 0301 	bic.w	r3, r3, #1
 8004ff4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8004ff8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ffa:	4b21      	ldr	r3, [pc, #132]	@ (8005080 <HAL_RCC_OscConfig+0x778>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005002:	00d2      	lsls	r2, r2, #3
 8005004:	491b      	ldr	r1, [pc, #108]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800500a:	4b1a      	ldr	r3, [pc, #104]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	f023 020c 	bic.w	r2, r3, #12
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005016:	4917      	ldr	r1, [pc, #92]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005018:	4313      	orrs	r3, r2
 800501a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800501c:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 800501e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005020:	f023 0202 	bic.w	r2, r3, #2
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	4912      	ldr	r1, [pc, #72]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800502e:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	4a10      	ldr	r2, [pc, #64]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005038:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 800503c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503e:	4a0d      	ldr	r2, [pc, #52]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005044:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005046:	4b0b      	ldr	r3, [pc, #44]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504a:	4a0a      	ldr	r2, [pc, #40]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 800504c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005052:	4b08      	ldr	r3, [pc, #32]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005056:	4a07      	ldr	r2, [pc, #28]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005058:	f043 0301 	orr.w	r3, r3, #1
 800505c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800505e:	4b05      	ldr	r3, [pc, #20]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a04      	ldr	r2, [pc, #16]	@ (8005074 <HAL_RCC_OscConfig+0x76c>)
 8005064:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506a:	f7fc f943 	bl	80012f4 <HAL_GetTick>
 800506e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005070:	e011      	b.n	8005096 <HAL_RCC_OscConfig+0x78e>
 8005072:	bf00      	nop
 8005074:	58024400 	.word	0x58024400
 8005078:	58024800 	.word	0x58024800
 800507c:	fffffc0c 	.word	0xfffffc0c
 8005080:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005084:	f7fc f936 	bl	80012f4 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e08a      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005096:	4b47      	ldr	r3, [pc, #284]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x77c>
 80050a2:	e082      	b.n	80051aa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a4:	4b43      	ldr	r3, [pc, #268]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a42      	ldr	r2, [pc, #264]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 80050aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fc f920 	bl	80012f4 <HAL_GetTick>
 80050b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fc f91c 	bl	80012f4 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e070      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80050ca:	4b3a      	ldr	r3, [pc, #232]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x7b0>
 80050d6:	e068      	b.n	80051aa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80050d8:	4b36      	ldr	r3, [pc, #216]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050de:	4b35      	ldr	r3, [pc, #212]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 80050e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d031      	beq.n	8005150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f003 0203 	and.w	r2, r3, #3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d12a      	bne.n	8005150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	091b      	lsrs	r3, r3, #4
 80050fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d122      	bne.n	8005150 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005114:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d11a      	bne.n	8005150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	0a5b      	lsrs	r3, r3, #9
 800511e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005126:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d111      	bne.n	8005150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	0c1b      	lsrs	r3, r3, #16
 8005130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005138:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d108      	bne.n	8005150 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	0e1b      	lsrs	r3, r3, #24
 8005142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e02b      	b.n	80051ac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005154:	4b17      	ldr	r3, [pc, #92]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 8005156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005158:	08db      	lsrs	r3, r3, #3
 800515a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800515e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	429a      	cmp	r2, r3
 8005168:	d01f      	beq.n	80051aa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800516a:	4b12      	ldr	r3, [pc, #72]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	4a11      	ldr	r2, [pc, #68]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005176:	f7fc f8bd 	bl	80012f4 <HAL_GetTick>
 800517a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800517c:	bf00      	nop
 800517e:	f7fc f8b9 	bl	80012f4 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	4293      	cmp	r3, r2
 8005188:	d0f9      	beq.n	800517e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800518a:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 800518c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800518e:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <HAL_RCC_OscConfig+0x8b0>)
 8005190:	4013      	ands	r3, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005196:	00d2      	lsls	r2, r2, #3
 8005198:	4906      	ldr	r1, [pc, #24]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 800519a:	4313      	orrs	r3, r2
 800519c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800519e:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 80051a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a2:	4a04      	ldr	r2, [pc, #16]	@ (80051b4 <HAL_RCC_OscConfig+0x8ac>)
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3730      	adds	r7, #48	@ 0x30
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	58024400 	.word	0x58024400
 80051b8:	ffff0007 	.word	0xffff0007

080051bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e19c      	b.n	800550a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d0:	4b8a      	ldr	r3, [pc, #552]	@ (80053fc <HAL_RCC_ClockConfig+0x240>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d910      	bls.n	8005200 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b87      	ldr	r3, [pc, #540]	@ (80053fc <HAL_RCC_ClockConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 020f 	bic.w	r2, r3, #15
 80051e6:	4985      	ldr	r1, [pc, #532]	@ (80053fc <HAL_RCC_ClockConfig+0x240>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b83      	ldr	r3, [pc, #524]	@ (80053fc <HAL_RCC_ClockConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e184      	b.n	800550a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d010      	beq.n	800522e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	4b7b      	ldr	r3, [pc, #492]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005218:	429a      	cmp	r2, r3
 800521a:	d908      	bls.n	800522e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800521c:	4b78      	ldr	r3, [pc, #480]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	4975      	ldr	r1, [pc, #468]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800522a:	4313      	orrs	r3, r2
 800522c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d010      	beq.n	800525c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	4b70      	ldr	r3, [pc, #448]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005246:	429a      	cmp	r2, r3
 8005248:	d908      	bls.n	800525c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800524a:	4b6d      	ldr	r3, [pc, #436]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	496a      	ldr	r1, [pc, #424]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 8005258:	4313      	orrs	r3, r2
 800525a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	d010      	beq.n	800528a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699a      	ldr	r2, [r3, #24]
 800526c:	4b64      	ldr	r3, [pc, #400]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005274:	429a      	cmp	r2, r3
 8005276:	d908      	bls.n	800528a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005278:	4b61      	ldr	r3, [pc, #388]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	495e      	ldr	r1, [pc, #376]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 8005286:	4313      	orrs	r3, r2
 8005288:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d010      	beq.n	80052b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69da      	ldr	r2, [r3, #28]
 800529a:	4b59      	ldr	r3, [pc, #356]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d908      	bls.n	80052b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052a6:	4b56      	ldr	r3, [pc, #344]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	4953      	ldr	r1, [pc, #332]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d010      	beq.n	80052e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	4b4d      	ldr	r3, [pc, #308]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d908      	bls.n	80052e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052d4:	4b4a      	ldr	r3, [pc, #296]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f023 020f 	bic.w	r2, r3, #15
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4947      	ldr	r1, [pc, #284]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d055      	beq.n	800539e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052f2:	4b43      	ldr	r3, [pc, #268]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	4940      	ldr	r1, [pc, #256]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 8005300:	4313      	orrs	r3, r2
 8005302:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d107      	bne.n	800531c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800530c:	4b3c      	ldr	r3, [pc, #240]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d121      	bne.n	800535c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0f6      	b.n	800550a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b03      	cmp	r3, #3
 8005322:	d107      	bne.n	8005334 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005324:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d115      	bne.n	800535c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e0ea      	b.n	800550a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d107      	bne.n	800534c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800533c:	4b30      	ldr	r3, [pc, #192]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005344:	2b00      	cmp	r3, #0
 8005346:	d109      	bne.n	800535c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0de      	b.n	800550a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800534c:	4b2c      	ldr	r3, [pc, #176]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e0d6      	b.n	800550a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800535c:	4b28      	ldr	r3, [pc, #160]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f023 0207 	bic.w	r2, r3, #7
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4925      	ldr	r1, [pc, #148]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800536a:	4313      	orrs	r3, r2
 800536c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800536e:	f7fb ffc1 	bl	80012f4 <HAL_GetTick>
 8005372:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005374:	e00a      	b.n	800538c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005376:	f7fb ffbd 	bl	80012f4 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e0be      	b.n	800550a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538c:	4b1c      	ldr	r3, [pc, #112]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	00db      	lsls	r3, r3, #3
 800539a:	429a      	cmp	r2, r3
 800539c:	d1eb      	bne.n	8005376 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d010      	beq.n	80053cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	4b14      	ldr	r3, [pc, #80]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d208      	bcs.n	80053cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ba:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	f023 020f 	bic.w	r2, r3, #15
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	490e      	ldr	r1, [pc, #56]	@ (8005400 <HAL_RCC_ClockConfig+0x244>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053cc:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <HAL_RCC_ClockConfig+0x240>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d214      	bcs.n	8005404 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053da:	4b08      	ldr	r3, [pc, #32]	@ (80053fc <HAL_RCC_ClockConfig+0x240>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 020f 	bic.w	r2, r3, #15
 80053e2:	4906      	ldr	r1, [pc, #24]	@ (80053fc <HAL_RCC_ClockConfig+0x240>)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b04      	ldr	r3, [pc, #16]	@ (80053fc <HAL_RCC_ClockConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d005      	beq.n	8005404 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e086      	b.n	800550a <HAL_RCC_ClockConfig+0x34e>
 80053fc:	52002000 	.word	0x52002000
 8005400:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	4b3f      	ldr	r3, [pc, #252]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800541c:	429a      	cmp	r2, r3
 800541e:	d208      	bcs.n	8005432 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005420:	4b3c      	ldr	r3, [pc, #240]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	4939      	ldr	r1, [pc, #228]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 800542e:	4313      	orrs	r3, r2
 8005430:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d010      	beq.n	8005460 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	695a      	ldr	r2, [r3, #20]
 8005442:	4b34      	ldr	r3, [pc, #208]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800544a:	429a      	cmp	r2, r3
 800544c:	d208      	bcs.n	8005460 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800544e:	4b31      	ldr	r3, [pc, #196]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	492e      	ldr	r1, [pc, #184]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 800545c:	4313      	orrs	r3, r2
 800545e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	d010      	beq.n	800548e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	4b28      	ldr	r3, [pc, #160]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005478:	429a      	cmp	r2, r3
 800547a:	d208      	bcs.n	800548e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800547c:	4b25      	ldr	r3, [pc, #148]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	4922      	ldr	r1, [pc, #136]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 800548a:	4313      	orrs	r3, r2
 800548c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d010      	beq.n	80054bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69da      	ldr	r2, [r3, #28]
 800549e:	4b1d      	ldr	r3, [pc, #116]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d208      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80054aa:	4b1a      	ldr	r3, [pc, #104]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4917      	ldr	r1, [pc, #92]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80054bc:	f000 f834 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b14      	ldr	r3, [pc, #80]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	4912      	ldr	r1, [pc, #72]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	f003 031f 	and.w	r3, r3, #31
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
 80054d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80054da:	4b0e      	ldr	r3, [pc, #56]	@ (8005514 <HAL_RCC_ClockConfig+0x358>)
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005518 <HAL_RCC_ClockConfig+0x35c>)
 80054e4:	5cd3      	ldrb	r3, [r2, r3]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
 80054f0:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <HAL_RCC_ClockConfig+0x360>)
 80054f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005520 <HAL_RCC_ClockConfig+0x364>)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005524 <HAL_RCC_ClockConfig+0x368>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fb feae 	bl	8001260 <HAL_InitTick>
 8005504:	4603      	mov	r3, r0
 8005506:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005508:	7bfb      	ldrb	r3, [r7, #15]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	58024400 	.word	0x58024400
 8005518:	0800cf8c 	.word	0x0800cf8c
 800551c:	24000004 	.word	0x24000004
 8005520:	24000000 	.word	0x24000000
 8005524:	24000008 	.word	0x24000008

08005528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	@ 0x24
 800552c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800552e:	4bb3      	ldr	r3, [pc, #716]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005536:	2b18      	cmp	r3, #24
 8005538:	f200 8155 	bhi.w	80057e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800553c:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <HAL_RCC_GetSysClockFreq+0x1c>)
 800553e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005542:	bf00      	nop
 8005544:	080055a9 	.word	0x080055a9
 8005548:	080057e7 	.word	0x080057e7
 800554c:	080057e7 	.word	0x080057e7
 8005550:	080057e7 	.word	0x080057e7
 8005554:	080057e7 	.word	0x080057e7
 8005558:	080057e7 	.word	0x080057e7
 800555c:	080057e7 	.word	0x080057e7
 8005560:	080057e7 	.word	0x080057e7
 8005564:	080055cf 	.word	0x080055cf
 8005568:	080057e7 	.word	0x080057e7
 800556c:	080057e7 	.word	0x080057e7
 8005570:	080057e7 	.word	0x080057e7
 8005574:	080057e7 	.word	0x080057e7
 8005578:	080057e7 	.word	0x080057e7
 800557c:	080057e7 	.word	0x080057e7
 8005580:	080057e7 	.word	0x080057e7
 8005584:	080055d5 	.word	0x080055d5
 8005588:	080057e7 	.word	0x080057e7
 800558c:	080057e7 	.word	0x080057e7
 8005590:	080057e7 	.word	0x080057e7
 8005594:	080057e7 	.word	0x080057e7
 8005598:	080057e7 	.word	0x080057e7
 800559c:	080057e7 	.word	0x080057e7
 80055a0:	080057e7 	.word	0x080057e7
 80055a4:	080055db 	.word	0x080055db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055a8:	4b94      	ldr	r3, [pc, #592]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055b4:	4b91      	ldr	r3, [pc, #580]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	08db      	lsrs	r3, r3, #3
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	4a90      	ldr	r2, [pc, #576]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80055c6:	e111      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80055c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80055ca:	61bb      	str	r3, [r7, #24]
      break;
 80055cc:	e10e      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80055ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055d0:	61bb      	str	r3, [r7, #24]
      break;
 80055d2:	e10b      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80055d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005808 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80055d6:	61bb      	str	r3, [r7, #24]
      break;
 80055d8:	e108      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80055da:	4b88      	ldr	r3, [pc, #544]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80055e4:	4b85      	ldr	r3, [pc, #532]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055f0:	4b82      	ldr	r3, [pc, #520]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055fa:	4b80      	ldr	r3, [pc, #512]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055fe:	08db      	lsrs	r3, r3, #3
 8005600:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	fb02 f303 	mul.w	r3, r2, r3
 800560a:	ee07 3a90 	vmov	s15, r3
 800560e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005612:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80e1 	beq.w	80057e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b02      	cmp	r3, #2
 8005622:	f000 8083 	beq.w	800572c <HAL_RCC_GetSysClockFreq+0x204>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b02      	cmp	r3, #2
 800562a:	f200 80a1 	bhi.w	8005770 <HAL_RCC_GetSysClockFreq+0x248>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0x114>
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d056      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800563a:	e099      	b.n	8005770 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800563c:	4b6f      	ldr	r3, [pc, #444]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d02d      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005648:	4b6c      	ldr	r3, [pc, #432]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	08db      	lsrs	r3, r3, #3
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	4a6b      	ldr	r2, [pc, #428]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
 8005658:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005672:	4b62      	ldr	r3, [pc, #392]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005682:	ed97 6a02 	vldr	s12, [r7, #8]
 8005686:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800580c <HAL_RCC_GetSysClockFreq+0x2e4>
 800568a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80056a2:	e087      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005810 <HAL_RCC_GetSysClockFreq+0x2e8>
 80056b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b6:	4b51      	ldr	r3, [pc, #324]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800580c <HAL_RCC_GetSysClockFreq+0x2e4>
 80056ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056e6:	e065      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005814 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fa:	4b40      	ldr	r3, [pc, #256]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570a:	ed97 6a02 	vldr	s12, [r7, #8]
 800570e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800580c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800571e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800572a:	e043      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005818 <HAL_RCC_GetSysClockFreq+0x2f0>
 800573a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573e:	4b2f      	ldr	r3, [pc, #188]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005752:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800580c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800576e:	e021      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	ee07 3a90 	vmov	s15, r3
 8005776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005814 <HAL_RCC_GetSysClockFreq+0x2ec>
 800577e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005782:	4b1e      	ldr	r3, [pc, #120]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005792:	ed97 6a02 	vldr	s12, [r7, #8]
 8005796:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800580c <HAL_RCC_GetSysClockFreq+0x2e4>
 800579a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800579e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80057b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80057b4:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b8:	0a5b      	lsrs	r3, r3, #9
 80057ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057be:	3301      	adds	r3, #1
 80057c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	ee07 3a90 	vmov	s15, r3
 80057c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80057cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80057d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d8:	ee17 3a90 	vmov	r3, s15
 80057dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80057de:	e005      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
      break;
 80057e4:	e002      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80057e6:	4b07      	ldr	r3, [pc, #28]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057e8:	61bb      	str	r3, [r7, #24]
      break;
 80057ea:	bf00      	nop
  }

  return sysclockfreq;
 80057ec:	69bb      	ldr	r3, [r7, #24]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	@ 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	58024400 	.word	0x58024400
 8005800:	03d09000 	.word	0x03d09000
 8005804:	003d0900 	.word	0x003d0900
 8005808:	017d7840 	.word	0x017d7840
 800580c:	46000000 	.word	0x46000000
 8005810:	4c742400 	.word	0x4c742400
 8005814:	4a742400 	.word	0x4a742400
 8005818:	4bbebc20 	.word	0x4bbebc20

0800581c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005822:	f7ff fe81 	bl	8005528 <HAL_RCC_GetSysClockFreq>
 8005826:	4602      	mov	r2, r0
 8005828:	4b10      	ldr	r3, [pc, #64]	@ (800586c <HAL_RCC_GetHCLKFreq+0x50>)
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	0a1b      	lsrs	r3, r3, #8
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	490f      	ldr	r1, [pc, #60]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x54>)
 8005834:	5ccb      	ldrb	r3, [r1, r3]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	fa22 f303 	lsr.w	r3, r2, r3
 800583e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005840:	4b0a      	ldr	r3, [pc, #40]	@ (800586c <HAL_RCC_GetHCLKFreq+0x50>)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	4a09      	ldr	r2, [pc, #36]	@ (8005870 <HAL_RCC_GetHCLKFreq+0x54>)
 800584a:	5cd3      	ldrb	r3, [r2, r3]
 800584c:	f003 031f 	and.w	r3, r3, #31
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	fa22 f303 	lsr.w	r3, r2, r3
 8005856:	4a07      	ldr	r2, [pc, #28]	@ (8005874 <HAL_RCC_GetHCLKFreq+0x58>)
 8005858:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800585a:	4a07      	ldr	r2, [pc, #28]	@ (8005878 <HAL_RCC_GetHCLKFreq+0x5c>)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005860:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <HAL_RCC_GetHCLKFreq+0x58>)
 8005862:	681b      	ldr	r3, [r3, #0]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	58024400 	.word	0x58024400
 8005870:	0800cf8c 	.word	0x0800cf8c
 8005874:	24000004 	.word	0x24000004
 8005878:	24000000 	.word	0x24000000

0800587c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005880:	f7ff ffcc 	bl	800581c <HAL_RCC_GetHCLKFreq>
 8005884:	4602      	mov	r2, r0
 8005886:	4b06      	ldr	r3, [pc, #24]	@ (80058a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	091b      	lsrs	r3, r3, #4
 800588c:	f003 0307 	and.w	r3, r3, #7
 8005890:	4904      	ldr	r1, [pc, #16]	@ (80058a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005892:	5ccb      	ldrb	r3, [r1, r3]
 8005894:	f003 031f 	and.w	r3, r3, #31
 8005898:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800589c:	4618      	mov	r0, r3
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	58024400 	.word	0x58024400
 80058a4:	0800cf8c 	.word	0x0800cf8c

080058a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80058ac:	f7ff ffb6 	bl	800581c <HAL_RCC_GetHCLKFreq>
 80058b0:	4602      	mov	r2, r0
 80058b2:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	f003 0307 	and.w	r3, r3, #7
 80058bc:	4904      	ldr	r1, [pc, #16]	@ (80058d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80058be:	5ccb      	ldrb	r3, [r1, r3]
 80058c0:	f003 031f 	and.w	r3, r3, #31
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	58024400 	.word	0x58024400
 80058d0:	0800cf8c 	.word	0x0800cf8c

080058d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d8:	b0cc      	sub	sp, #304	@ 0x130
 80058da:	af00      	add	r7, sp, #0
 80058dc:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058e6:	2300      	movs	r3, #0
 80058e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80058f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80058f8:	2500      	movs	r5, #0
 80058fa:	ea54 0305 	orrs.w	r3, r4, r5
 80058fe:	d049      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005904:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005906:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800590a:	d02f      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800590c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005910:	d828      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005912:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005916:	d01a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800591c:	d822      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d003      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005922:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005926:	d007      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005928:	e01c      	b.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800592a:	4bb8      	ldr	r3, [pc, #736]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800592c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800592e:	4ab7      	ldr	r2, [pc, #732]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005936:	e01a      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800593c:	3308      	adds	r3, #8
 800593e:	2102      	movs	r1, #2
 8005940:	4618      	mov	r0, r3
 8005942:	f002 fba1 	bl	8008088 <RCCEx_PLL2_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800594c:	e00f      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800594e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005952:	3328      	adds	r3, #40	@ 0x28
 8005954:	2102      	movs	r1, #2
 8005956:	4618      	mov	r0, r3
 8005958:	f002 fc48 	bl	80081ec <RCCEx_PLL3_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005962:	e004      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800596a:	e000      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800596c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10a      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005976:	4ba5      	ldr	r3, [pc, #660]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800597a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800597e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005984:	4aa1      	ldr	r2, [pc, #644]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005986:	430b      	orrs	r3, r1
 8005988:	6513      	str	r3, [r2, #80]	@ 0x50
 800598a:	e003      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800598c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005990:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005994:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80059a0:	f04f 0900 	mov.w	r9, #0
 80059a4:	ea58 0309 	orrs.w	r3, r8, r9
 80059a8:	d047      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80059aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d82a      	bhi.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80059b4:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	080059d1 	.word	0x080059d1
 80059c0:	080059df 	.word	0x080059df
 80059c4:	080059f5 	.word	0x080059f5
 80059c8:	08005a13 	.word	0x08005a13
 80059cc:	08005a13 	.word	0x08005a13
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059d0:	4b8e      	ldr	r3, [pc, #568]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d4:	4a8d      	ldr	r2, [pc, #564]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059dc:	e01a      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059e2:	3308      	adds	r3, #8
 80059e4:	2100      	movs	r1, #0
 80059e6:	4618      	mov	r0, r3
 80059e8:	f002 fb4e 	bl	8008088 <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059f2:	e00f      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80059f8:	3328      	adds	r3, #40	@ 0x28
 80059fa:	2100      	movs	r1, #0
 80059fc:	4618      	mov	r0, r3
 80059fe:	f002 fbf5 	bl	80081ec <RCCEx_PLL3_Config>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a08:	e004      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005a10:	e000      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a1c:	4b7b      	ldr	r3, [pc, #492]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a20:	f023 0107 	bic.w	r1, r3, #7
 8005a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2a:	4a78      	ldr	r2, [pc, #480]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a30:	e003      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005a36:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005a46:	f04f 0b00 	mov.w	fp, #0
 8005a4a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a4e:	d04c      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5a:	d030      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a60:	d829      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a62:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a64:	d02d      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005a66:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a68:	d825      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a6a:	2b80      	cmp	r3, #128	@ 0x80
 8005a6c:	d018      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005a6e:	2b80      	cmp	r3, #128	@ 0x80
 8005a70:	d821      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005a76:	2b40      	cmp	r3, #64	@ 0x40
 8005a78:	d007      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005a7a:	e01c      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7c:	4b63      	ldr	r3, [pc, #396]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	4a62      	ldr	r2, [pc, #392]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a88:	e01c      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005a8e:	3308      	adds	r3, #8
 8005a90:	2100      	movs	r1, #0
 8005a92:	4618      	mov	r0, r3
 8005a94:	f002 faf8 	bl	8008088 <RCCEx_PLL2_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005a9e:	e011      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aa4:	3328      	adds	r3, #40	@ 0x28
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f002 fb9f 	bl	80081ec <RCCEx_PLL3_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005ab4:	e006      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005acc:	4b4f      	ldr	r3, [pc, #316]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ada:	4a4c      	ldr	r2, [pc, #304]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ae0:	e003      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ae6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005af6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005afa:	2300      	movs	r3, #0
 8005afc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005b00:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005b04:	460b      	mov	r3, r1
 8005b06:	4313      	orrs	r3, r2
 8005b08:	d053      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b16:	d035      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005b18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005b1c:	d82e      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b1e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b22:	d031      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005b24:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005b28:	d828      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b2e:	d01a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005b30:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b34:	d822      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005b3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005b40:	e01c      	b.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b42:	4b32      	ldr	r3, [pc, #200]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b46:	4a31      	ldr	r2, [pc, #196]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b4e:	e01c      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b54:	3308      	adds	r3, #8
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f002 fa95 	bl	8008088 <RCCEx_PLL2_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b64:	e011      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b6a:	3328      	adds	r3, #40	@ 0x28
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f002 fb3c 	bl	80081ec <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b7a:	e006      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005b82:	e002      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b84:	bf00      	nop
 8005b86:	e000      	b.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10b      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005b92:	4b1e      	ldr	r3, [pc, #120]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b96:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005b9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ba8:	e003      	b.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005baa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005bae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005bbe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005bc8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005bcc:	460b      	mov	r3, r1
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	d056      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005bd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bde:	d038      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005be0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005be4:	d831      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005be6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bea:	d034      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005bec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bf0:	d82b      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bf6:	d01d      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005bf8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bfc:	d825      	bhi.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c06:	d00a      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c08:	e01f      	b.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005c0a:	bf00      	nop
 8005c0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4ba2      	ldr	r3, [pc, #648]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	4aa1      	ldr	r2, [pc, #644]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c1c:	e01c      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c22:	3308      	adds	r3, #8
 8005c24:	2100      	movs	r1, #0
 8005c26:	4618      	mov	r0, r3
 8005c28:	f002 fa2e 	bl	8008088 <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005c32:	e011      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c38:	3328      	adds	r3, #40	@ 0x28
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f002 fad5 	bl	80081ec <RCCEx_PLL3_Config>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005c48:	e006      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005c50:	e002      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c52:	bf00      	nop
 8005c54:	e000      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005c56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005c60:	4b8e      	ldr	r3, [pc, #568]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c64:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c70:	4a8a      	ldr	r2, [pc, #552]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c76:	e003      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005c7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005c90:	2300      	movs	r3, #0
 8005c92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005c96:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	d03a      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca6:	2b30      	cmp	r3, #48	@ 0x30
 8005ca8:	d01f      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005caa:	2b30      	cmp	r3, #48	@ 0x30
 8005cac:	d819      	bhi.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d00c      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d815      	bhi.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d019      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d111      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cbe:	4b77      	ldr	r3, [pc, #476]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	4a76      	ldr	r2, [pc, #472]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005cca:	e011      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f002 f9d7 	bl	8008088 <RCCEx_PLL2_Config>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ce0:	e006      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005ce8:	e002      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005cea:	bf00      	nop
 8005cec:	e000      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10a      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005cf8:	4b68      	ldr	r3, [pc, #416]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cfc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005d00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d06:	4a65      	ldr	r2, [pc, #404]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d08:	430b      	orrs	r3, r1
 8005d0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d0c:	e003      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005d12:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005d22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005d26:	2300      	movs	r3, #0
 8005d28:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005d2c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005d30:	460b      	mov	r3, r1
 8005d32:	4313      	orrs	r3, r2
 8005d34:	d051      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d40:	d035      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005d42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d46:	d82e      	bhi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d4c:	d031      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005d4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d52:	d828      	bhi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d58:	d01a      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d5e:	d822      	bhi.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d68:	d007      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005d6a:	e01c      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	4a4a      	ldr	r2, [pc, #296]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d78:	e01c      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d7e:	3308      	adds	r3, #8
 8005d80:	2100      	movs	r1, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f002 f980 	bl	8008088 <RCCEx_PLL2_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005d8e:	e011      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005d90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d94:	3328      	adds	r3, #40	@ 0x28
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f002 fa27 	bl	80081ec <RCCEx_PLL3_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005da4:	e006      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005dac:	e002      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005dae:	bf00      	nop
 8005db0:	e000      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005dbc:	4b37      	ldr	r3, [pc, #220]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dca:	4a34      	ldr	r2, [pc, #208]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6513      	str	r3, [r2, #80]	@ 0x50
 8005dd0:	e003      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005dd6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005de6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005dea:	2300      	movs	r3, #0
 8005dec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005df0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4313      	orrs	r3, r2
 8005df8:	d056      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e04:	d033      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005e06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e0a:	d82c      	bhi.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e10:	d02f      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005e12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e16:	d826      	bhi.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e1c:	d02b      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005e1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005e22:	d820      	bhi.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e28:	d012      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005e2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005e2e:	d81a      	bhi.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d022      	beq.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e38:	d115      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e3e:	3308      	adds	r3, #8
 8005e40:	2101      	movs	r1, #1
 8005e42:	4618      	mov	r0, r3
 8005e44:	f002 f920 	bl	8008088 <RCCEx_PLL2_Config>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e4e:	e015      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e54:	3328      	adds	r3, #40	@ 0x28
 8005e56:	2101      	movs	r1, #1
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f002 f9c7 	bl	80081ec <RCCEx_PLL3_Config>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005e64:	e00a      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005e6c:	e006      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e6e:	bf00      	nop
 8005e70:	e004      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e7c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10d      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005e84:	4b05      	ldr	r3, [pc, #20]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e90:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e92:	4a02      	ldr	r2, [pc, #8]	@ (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e94:	430b      	orrs	r3, r1
 8005e96:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e9a:	bf00      	nop
 8005e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005ea4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005eb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ebe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	d055      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ecc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ed4:	d033      	beq.n	8005f3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005ed6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eda:	d82c      	bhi.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee0:	d02f      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee6:	d826      	bhi.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ee8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005eec:	d02b      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005eee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ef2:	d820      	bhi.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ef8:	d012      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005efa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005efe:	d81a      	bhi.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d022      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f08:	d115      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f0e:	3308      	adds	r3, #8
 8005f10:	2101      	movs	r1, #1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f002 f8b8 	bl	8008088 <RCCEx_PLL2_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f1e:	e015      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f24:	3328      	adds	r3, #40	@ 0x28
 8005f26:	2101      	movs	r1, #1
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f002 f95f 	bl	80081ec <RCCEx_PLL3_Config>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005f34:	e00a      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005f3c:	e006      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f3e:	bf00      	nop
 8005f40:	e004      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f42:	bf00      	nop
 8005f44:	e002      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f46:	bf00      	nop
 8005f48:	e000      	b.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10b      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005f54:	4bb6      	ldr	r3, [pc, #728]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f58:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f64:	4ab2      	ldr	r2, [pc, #712]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f66:	430b      	orrs	r3, r1
 8005f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f6a:	e003      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f6c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005f70:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005f74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f84:	2300      	movs	r3, #0
 8005f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f8a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4313      	orrs	r3, r2
 8005f92:	d02a      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8005f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d011      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa2:	d10a      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa8:	3308      	adds	r3, #8
 8005faa:	2101      	movs	r1, #1
 8005fac:	4618      	mov	r0, r3
 8005fae:	f002 f86b 	bl	8008088 <RCCEx_PLL2_Config>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8005fb8:	e004      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8005fc0:	e000      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8005fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005fcc:	4b98      	ldr	r3, [pc, #608]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fd0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fda:	4a95      	ldr	r2, [pc, #596]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005fdc:	430b      	orrs	r3, r1
 8005fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005fe0:	e003      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8005fe6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006000:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006004:	460b      	mov	r3, r1
 8006006:	4313      	orrs	r3, r2
 8006008:	d037      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800600a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800600e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006010:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006014:	d00e      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8006016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800601a:	d816      	bhi.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x776>
 800601c:	2b00      	cmp	r3, #0
 800601e:	d018      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8006020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006024:	d111      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006026:	4b82      	ldr	r3, [pc, #520]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	4a81      	ldr	r2, [pc, #516]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800602c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006030:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006032:	e00f      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006034:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006038:	3308      	adds	r3, #8
 800603a:	2101      	movs	r1, #1
 800603c:	4618      	mov	r0, r3
 800603e:	f002 f823 	bl	8008088 <RCCEx_PLL2_Config>
 8006042:	4603      	mov	r3, r0
 8006044:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006048:	e004      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006050:	e000      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8006052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006054:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10a      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800605c:	4b74      	ldr	r3, [pc, #464]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800605e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006060:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006064:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606a:	4a71      	ldr	r2, [pc, #452]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800606c:	430b      	orrs	r3, r1
 800606e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006070:	e003      	b.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006072:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006076:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800607a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006086:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800608a:	2300      	movs	r3, #0
 800608c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006090:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006094:	460b      	mov	r3, r1
 8006096:	4313      	orrs	r3, r2
 8006098:	d03a      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800609a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800609e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d81d      	bhi.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80060a4:	a201      	add	r2, pc, #4	@ (adr r2, 80060ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80060a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060aa:	bf00      	nop
 80060ac:	080060e9 	.word	0x080060e9
 80060b0:	080060bd 	.word	0x080060bd
 80060b4:	080060cb 	.word	0x080060cb
 80060b8:	080060e9 	.word	0x080060e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060bc:	4b5c      	ldr	r3, [pc, #368]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c0:	4a5b      	ldr	r2, [pc, #364]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060c8:	e00f      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060ce:	3308      	adds	r3, #8
 80060d0:	2102      	movs	r1, #2
 80060d2:	4618      	mov	r0, r3
 80060d4:	f001 ffd8 	bl	8008088 <RCCEx_PLL2_Config>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80060de:	e004      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80060e6:	e000      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80060e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80060f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f6:	f023 0103 	bic.w	r1, r3, #3
 80060fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80060fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006100:	4a4b      	ldr	r2, [pc, #300]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006102:	430b      	orrs	r3, r1
 8006104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800610c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800611c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	f000 80a0 	beq.w	8006272 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006132:	4b40      	ldr	r3, [pc, #256]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a3f      	ldr	r2, [pc, #252]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800613c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800613e:	f7fb f8d9 	bl	80012f4 <HAL_GetTick>
 8006142:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006146:	e00b      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006148:	f7fb f8d4 	bl	80012f4 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b64      	cmp	r3, #100	@ 0x64
 8006156:	d903      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800615e:	e005      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006160:	4b34      	ldr	r3, [pc, #208]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0ed      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800616c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006170:	2b00      	cmp	r3, #0
 8006172:	d17a      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006174:	4b2e      	ldr	r3, [pc, #184]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006176:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006178:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800617c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006180:	4053      	eors	r3, r2
 8006182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006186:	2b00      	cmp	r3, #0
 8006188:	d015      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800618a:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800618c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800618e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006192:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006196:	4b26      	ldr	r3, [pc, #152]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800619a:	4a25      	ldr	r2, [pc, #148]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800619c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061a2:	4b23      	ldr	r3, [pc, #140]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	4a22      	ldr	r2, [pc, #136]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061ae:	4a20      	ldr	r2, [pc, #128]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80061b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80061ba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061c2:	d118      	bne.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c4:	f7fb f896 	bl	80012f4 <HAL_GetTick>
 80061c8:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061cc:	e00d      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ce:	f7fb f891 	bl	80012f4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061d8:	1ad2      	subs	r2, r2, r3
 80061da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80061de:	429a      	cmp	r2, r3
 80061e0:	d903      	bls.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 80061e8:	e005      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061ea:	4b11      	ldr	r3, [pc, #68]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0eb      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80061f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d130      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006202:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800620a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800620e:	d115      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8006210:	4b07      	ldr	r3, [pc, #28]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800621c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006220:	091a      	lsrs	r2, r3, #4
 8006222:	4b05      	ldr	r3, [pc, #20]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8006224:	4013      	ands	r3, r2
 8006226:	4a02      	ldr	r2, [pc, #8]	@ (8006230 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006228:	430b      	orrs	r3, r1
 800622a:	6113      	str	r3, [r2, #16]
 800622c:	e00c      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800622e:	bf00      	nop
 8006230:	58024400 	.word	0x58024400
 8006234:	58024800 	.word	0x58024800
 8006238:	00ffffcf 	.word	0x00ffffcf
 800623c:	4bd4      	ldr	r3, [pc, #848]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800623e:	691b      	ldr	r3, [r3, #16]
 8006240:	4ad3      	ldr	r2, [pc, #844]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006242:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006246:	6113      	str	r3, [r2, #16]
 8006248:	4bd1      	ldr	r3, [pc, #836]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800624a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800624c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006250:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006258:	4acd      	ldr	r2, [pc, #820]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800625a:	430b      	orrs	r3, r1
 800625c:	6713      	str	r3, [r2, #112]	@ 0x70
 800625e:	e008      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006260:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006264:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8006268:	e003      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800626e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f002 0301 	and.w	r3, r2, #1
 800627e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006282:	2300      	movs	r3, #0
 8006284:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006288:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800628c:	460b      	mov	r3, r1
 800628e:	4313      	orrs	r3, r2
 8006290:	f000 808b 	beq.w	80063aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800629c:	2b28      	cmp	r3, #40	@ 0x28
 800629e:	d86b      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80062a0:	a201      	add	r2, pc, #4	@ (adr r2, 80062a8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80062a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062a6:	bf00      	nop
 80062a8:	08006381 	.word	0x08006381
 80062ac:	08006379 	.word	0x08006379
 80062b0:	08006379 	.word	0x08006379
 80062b4:	08006379 	.word	0x08006379
 80062b8:	08006379 	.word	0x08006379
 80062bc:	08006379 	.word	0x08006379
 80062c0:	08006379 	.word	0x08006379
 80062c4:	08006379 	.word	0x08006379
 80062c8:	0800634d 	.word	0x0800634d
 80062cc:	08006379 	.word	0x08006379
 80062d0:	08006379 	.word	0x08006379
 80062d4:	08006379 	.word	0x08006379
 80062d8:	08006379 	.word	0x08006379
 80062dc:	08006379 	.word	0x08006379
 80062e0:	08006379 	.word	0x08006379
 80062e4:	08006379 	.word	0x08006379
 80062e8:	08006363 	.word	0x08006363
 80062ec:	08006379 	.word	0x08006379
 80062f0:	08006379 	.word	0x08006379
 80062f4:	08006379 	.word	0x08006379
 80062f8:	08006379 	.word	0x08006379
 80062fc:	08006379 	.word	0x08006379
 8006300:	08006379 	.word	0x08006379
 8006304:	08006379 	.word	0x08006379
 8006308:	08006381 	.word	0x08006381
 800630c:	08006379 	.word	0x08006379
 8006310:	08006379 	.word	0x08006379
 8006314:	08006379 	.word	0x08006379
 8006318:	08006379 	.word	0x08006379
 800631c:	08006379 	.word	0x08006379
 8006320:	08006379 	.word	0x08006379
 8006324:	08006379 	.word	0x08006379
 8006328:	08006381 	.word	0x08006381
 800632c:	08006379 	.word	0x08006379
 8006330:	08006379 	.word	0x08006379
 8006334:	08006379 	.word	0x08006379
 8006338:	08006379 	.word	0x08006379
 800633c:	08006379 	.word	0x08006379
 8006340:	08006379 	.word	0x08006379
 8006344:	08006379 	.word	0x08006379
 8006348:	08006381 	.word	0x08006381
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800634c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006350:	3308      	adds	r3, #8
 8006352:	2101      	movs	r1, #1
 8006354:	4618      	mov	r0, r3
 8006356:	f001 fe97 	bl	8008088 <RCCEx_PLL2_Config>
 800635a:	4603      	mov	r3, r0
 800635c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006360:	e00f      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006366:	3328      	adds	r3, #40	@ 0x28
 8006368:	2101      	movs	r1, #1
 800636a:	4618      	mov	r0, r3
 800636c:	f001 ff3e 	bl	80081ec <RCCEx_PLL3_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006376:	e004      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8006380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006382:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800638a:	4b81      	ldr	r3, [pc, #516]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800638c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800638e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006392:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800639a:	4a7d      	ldr	r2, [pc, #500]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800639c:	430b      	orrs	r3, r1
 800639e:	6553      	str	r3, [r2, #84]	@ 0x54
 80063a0:	e003      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80063a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80063aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	f002 0302 	and.w	r3, r2, #2
 80063b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063ba:	2300      	movs	r3, #0
 80063bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80063c0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80063c4:	460b      	mov	r3, r1
 80063c6:	4313      	orrs	r3, r2
 80063c8:	d042      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80063ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063d0:	2b05      	cmp	r3, #5
 80063d2:	d825      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006429 	.word	0x08006429
 80063e0:	080063f5 	.word	0x080063f5
 80063e4:	0800640b 	.word	0x0800640b
 80063e8:	08006429 	.word	0x08006429
 80063ec:	08006429 	.word	0x08006429
 80063f0:	08006429 	.word	0x08006429
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80063f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80063f8:	3308      	adds	r3, #8
 80063fa:	2101      	movs	r1, #1
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fe43 	bl	8008088 <RCCEx_PLL2_Config>
 8006402:	4603      	mov	r3, r0
 8006404:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006408:	e00f      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800640a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800640e:	3328      	adds	r3, #40	@ 0x28
 8006410:	2101      	movs	r1, #1
 8006412:	4618      	mov	r0, r3
 8006414:	f001 feea 	bl	80081ec <RCCEx_PLL3_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800641e:	e004      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8006428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006432:	4b57      	ldr	r3, [pc, #348]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006436:	f023 0107 	bic.w	r1, r3, #7
 800643a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800643e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006440:	4a53      	ldr	r2, [pc, #332]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8006442:	430b      	orrs	r3, r1
 8006444:	6553      	str	r3, [r2, #84]	@ 0x54
 8006446:	e003      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800644c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006450:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f002 0304 	and.w	r3, r2, #4
 800645c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006460:	2300      	movs	r3, #0
 8006462:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006466:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d044      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006478:	2b05      	cmp	r3, #5
 800647a:	d825      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 800647c:	a201      	add	r2, pc, #4	@ (adr r2, 8006484 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064d1 	.word	0x080064d1
 8006488:	0800649d 	.word	0x0800649d
 800648c:	080064b3 	.word	0x080064b3
 8006490:	080064d1 	.word	0x080064d1
 8006494:	080064d1 	.word	0x080064d1
 8006498:	080064d1 	.word	0x080064d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800649c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064a0:	3308      	adds	r3, #8
 80064a2:	2101      	movs	r1, #1
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 fdef 	bl	8008088 <RCCEx_PLL2_Config>
 80064aa:	4603      	mov	r3, r0
 80064ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064b0:	e00f      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064b6:	3328      	adds	r3, #40	@ 0x28
 80064b8:	2101      	movs	r1, #1
 80064ba:	4618      	mov	r0, r3
 80064bc:	f001 fe96 	bl	80081ec <RCCEx_PLL3_Config>
 80064c0:	4603      	mov	r3, r0
 80064c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80064c6:	e004      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80064ce:	e000      	b.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80064d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d10b      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064da:	4b2d      	ldr	r3, [pc, #180]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80064dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064de:	f023 0107 	bic.w	r1, r3, #7
 80064e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064ea:	4a29      	ldr	r2, [pc, #164]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80064f0:	e003      	b.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80064f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f002 0320 	and.w	r3, r2, #32
 8006506:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800650a:	2300      	movs	r3, #0
 800650c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006514:	460b      	mov	r3, r1
 8006516:	4313      	orrs	r3, r2
 8006518:	d057      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800651a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800651e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006522:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006526:	d035      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8006528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800652c:	d82c      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006532:	d031      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006538:	d826      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800653a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800653e:	d02d      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8006540:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006544:	d820      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800654a:	d012      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800654c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006550:	d81a      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d024      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8006556:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800655a:	d115      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800655c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006560:	3308      	adds	r3, #8
 8006562:	2100      	movs	r1, #0
 8006564:	4618      	mov	r0, r3
 8006566:	f001 fd8f 	bl	8008088 <RCCEx_PLL2_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006570:	e017      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006576:	3328      	adds	r3, #40	@ 0x28
 8006578:	2102      	movs	r1, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f001 fe36 	bl	80081ec <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006586:	e00c      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800658e:	e008      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8006590:	58024400 	.word	0x58024400
        break;
 8006594:	bf00      	nop
 8006596:	e004      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8006598:	bf00      	nop
 800659a:	e002      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800659c:	bf00      	nop
 800659e:	e000      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80065a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065aa:	4bc2      	ldr	r3, [pc, #776]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80065b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80065ba:	4abe      	ldr	r2, [pc, #760]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80065bc:	430b      	orrs	r3, r1
 80065be:	6553      	str	r3, [r2, #84]	@ 0x54
 80065c0:	e003      	b.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80065c6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80065ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80065d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4313      	orrs	r3, r2
 80065e8:	d055      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80065ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80065ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80065f6:	d033      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80065f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80065fc:	d82c      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80065fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006602:	d02f      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006608:	d826      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800660a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800660e:	d02b      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006610:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006614:	d820      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800661a:	d012      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800661c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006620:	d81a      	bhi.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d022      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800662a:	d115      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800662c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006630:	3308      	adds	r3, #8
 8006632:	2100      	movs	r1, #0
 8006634:	4618      	mov	r0, r3
 8006636:	f001 fd27 	bl	8008088 <RCCEx_PLL2_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006640:	e015      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006646:	3328      	adds	r3, #40	@ 0x28
 8006648:	2102      	movs	r1, #2
 800664a:	4618      	mov	r0, r3
 800664c:	f001 fdce 	bl	80081ec <RCCEx_PLL3_Config>
 8006650:	4603      	mov	r3, r0
 8006652:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006656:	e00a      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800665e:	e006      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006660:	bf00      	nop
 8006662:	e004      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006664:	bf00      	nop
 8006666:	e002      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006668:	bf00      	nop
 800666a:	e000      	b.n	800666e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800666c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10b      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006676:	4b8f      	ldr	r3, [pc, #572]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800667a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800667e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006682:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006686:	4a8b      	ldr	r2, [pc, #556]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006688:	430b      	orrs	r3, r1
 800668a:	6593      	str	r3, [r2, #88]	@ 0x58
 800668c:	e003      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006692:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80066a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80066a6:	2300      	movs	r3, #0
 80066a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80066ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80066b0:	460b      	mov	r3, r1
 80066b2:	4313      	orrs	r3, r2
 80066b4:	d055      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80066b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80066be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066c2:	d033      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80066c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80066c8:	d82c      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80066ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066ce:	d02f      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80066d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066d4:	d826      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80066d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066da:	d02b      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80066dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80066e0:	d820      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80066e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066e6:	d012      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80066e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066ec:	d81a      	bhi.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d022      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f6:	d115      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066fc:	3308      	adds	r3, #8
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f001 fcc1 	bl	8008088 <RCCEx_PLL2_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800670c:	e015      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800670e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006712:	3328      	adds	r3, #40	@ 0x28
 8006714:	2102      	movs	r1, #2
 8006716:	4618      	mov	r0, r3
 8006718:	f001 fd68 	bl	80081ec <RCCEx_PLL3_Config>
 800671c:	4603      	mov	r3, r0
 800671e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006722:	e00a      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800672a:	e006      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800672c:	bf00      	nop
 800672e:	e004      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006730:	bf00      	nop
 8006732:	e002      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006734:	bf00      	nop
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10b      	bne.n	800675a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006742:	4b5c      	ldr	r3, [pc, #368]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006746:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800674a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800674e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006752:	4a58      	ldr	r2, [pc, #352]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006754:	430b      	orrs	r3, r1
 8006756:	6593      	str	r3, [r2, #88]	@ 0x58
 8006758:	e003      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800675e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	f002 0308 	and.w	r3, r2, #8
 800676e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006772:	2300      	movs	r3, #0
 8006774:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006778:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800677c:	460b      	mov	r3, r1
 800677e:	4313      	orrs	r3, r2
 8006780:	d01e      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800678a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800678e:	d10c      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006790:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006794:	3328      	adds	r3, #40	@ 0x28
 8006796:	2102      	movs	r1, #2
 8006798:	4618      	mov	r0, r3
 800679a:	f001 fd27 	bl	80081ec <RCCEx_PLL3_Config>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80067aa:	4b42      	ldr	r3, [pc, #264]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80067b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ba:	4a3e      	ldr	r2, [pc, #248]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80067bc:	430b      	orrs	r3, r1
 80067be:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c8:	f002 0310 	and.w	r3, r2, #16
 80067cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067d0:	2300      	movs	r3, #0
 80067d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80067d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80067da:	460b      	mov	r3, r1
 80067dc:	4313      	orrs	r3, r2
 80067de:	d01e      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80067e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80067e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ec:	d10c      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80067f2:	3328      	adds	r3, #40	@ 0x28
 80067f4:	2102      	movs	r1, #2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f001 fcf8 	bl	80081ec <RCCEx_PLL3_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006808:	4b2a      	ldr	r3, [pc, #168]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800680a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006814:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006818:	4a26      	ldr	r2, [pc, #152]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800681a:	430b      	orrs	r3, r1
 800681c:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800681e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006826:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800682a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800682e:	2300      	movs	r3, #0
 8006830:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006834:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006838:	460b      	mov	r3, r1
 800683a:	4313      	orrs	r3, r2
 800683c:	d040      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800683e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006842:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800684a:	d022      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800684c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006850:	d81b      	bhi.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800685a:	d00b      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800685c:	e015      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800685e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006862:	3308      	adds	r3, #8
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f001 fc0e 	bl	8008088 <RCCEx_PLL2_Config>
 800686c:	4603      	mov	r3, r0
 800686e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006872:	e00f      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006874:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006878:	3328      	adds	r3, #40	@ 0x28
 800687a:	2102      	movs	r1, #2
 800687c:	4618      	mov	r0, r3
 800687e:	f001 fcb5 	bl	80081ec <RCCEx_PLL3_Config>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006888:	e004      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006890:	e000      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8006892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006894:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10d      	bne.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800689c:	4b05      	ldr	r3, [pc, #20]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800689e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068a0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80068a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80068ac:	4a01      	ldr	r2, [pc, #4]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80068b2:	e005      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80068b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80068bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80068cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068ce:	2300      	movs	r3, #0
 80068d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80068d2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80068d6:	460b      	mov	r3, r1
 80068d8:	4313      	orrs	r3, r2
 80068da:	d03b      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80068dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80068e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068e8:	d01f      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80068ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80068ee:	d818      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80068f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068f4:	d003      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80068f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068fa:	d007      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80068fc:	e011      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068fe:	4b64      	ldr	r3, [pc, #400]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006902:	4a63      	ldr	r2, [pc, #396]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006908:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800690a:	e00f      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800690c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006910:	3328      	adds	r3, #40	@ 0x28
 8006912:	2101      	movs	r1, #1
 8006914:	4618      	mov	r0, r3
 8006916:	f001 fc69 	bl	80081ec <RCCEx_PLL3_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006920:	e004      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006928:	e000      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800692a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800692c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006934:	4b56      	ldr	r3, [pc, #344]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006938:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800693c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006944:	4a52      	ldr	r2, [pc, #328]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006946:	430b      	orrs	r3, r1
 8006948:	6553      	str	r3, [r2, #84]	@ 0x54
 800694a:	e003      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006950:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006960:	673b      	str	r3, [r7, #112]	@ 0x70
 8006962:	2300      	movs	r3, #0
 8006964:	677b      	str	r3, [r7, #116]	@ 0x74
 8006966:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800696a:	460b      	mov	r3, r1
 800696c:	4313      	orrs	r3, r2
 800696e:	d031      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006970:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800697a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697e:	d007      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006980:	e011      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006982:	4b43      	ldr	r3, [pc, #268]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	4a42      	ldr	r2, [pc, #264]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800698c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800698e:	e00e      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006994:	3308      	adds	r3, #8
 8006996:	2102      	movs	r1, #2
 8006998:	4618      	mov	r0, r3
 800699a:	f001 fb75 	bl	8008088 <RCCEx_PLL2_Config>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80069a4:	e003      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80069ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80069b6:	4b36      	ldr	r3, [pc, #216]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80069be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069c4:	4a32      	ldr	r2, [pc, #200]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80069c6:	430b      	orrs	r3, r1
 80069c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80069ca:	e003      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80069d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80069e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069e2:	2300      	movs	r3, #0
 80069e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80069ea:	460b      	mov	r3, r1
 80069ec:	4313      	orrs	r3, r2
 80069ee:	d00c      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80069f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80069f4:	3328      	adds	r3, #40	@ 0x28
 80069f6:	2102      	movs	r1, #2
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 fbf7 	bl	80081ec <RCCEx_PLL3_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006a16:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a18:	2300      	movs	r3, #0
 8006a1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006a20:	460b      	mov	r3, r1
 8006a22:	4313      	orrs	r3, r2
 8006a24:	d03a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a32:	d018      	beq.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a38:	d811      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a3e:	d014      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a44:	d80b      	bhi.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d011      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8006a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a4e:	d106      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a50:	4b0f      	ldr	r3, [pc, #60]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a54:	4a0e      	ldr	r2, [pc, #56]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006a5c:	e008      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8006a64:	e004      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006a66:	bf00      	nop
 8006a68:	e002      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006a6a:	bf00      	nop
 8006a6c:	e000      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10d      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a78:	4b05      	ldr	r3, [pc, #20]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a88:	4a01      	ldr	r2, [pc, #4]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8006a8e:	e005      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8006a90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a94:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006a98:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006aaa:	2300      	movs	r3, #0
 8006aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	d009      	beq.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006ab8:	4baa      	ldr	r3, [pc, #680]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006abc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ac6:	4aa7      	ldr	r2, [pc, #668]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006ad8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ada:	2300      	movs	r3, #0
 8006adc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ade:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d00a      	beq.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006ae8:	4b9e      	ldr	r3, [pc, #632]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006af4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006af8:	4a9a      	ldr	r2, [pc, #616]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006afa:	430b      	orrs	r3, r1
 8006afc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006b14:	460b      	mov	r3, r1
 8006b16:	4313      	orrs	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b1a:	4b92      	ldr	r3, [pc, #584]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b1e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b28:	4a8e      	ldr	r2, [pc, #568]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b2a:	430b      	orrs	r3, r1
 8006b2c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006b3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b40:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006b44:	460b      	mov	r3, r1
 8006b46:	4313      	orrs	r3, r2
 8006b48:	d00e      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006b4a:	4b86      	ldr	r3, [pc, #536]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	4a85      	ldr	r2, [pc, #532]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b54:	6113      	str	r3, [r2, #16]
 8006b56:	4b83      	ldr	r3, [pc, #524]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b58:	6919      	ldr	r1, [r3, #16]
 8006b5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b5e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b62:	4a80      	ldr	r2, [pc, #512]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b64:	430b      	orrs	r3, r1
 8006b66:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b70:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006b74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b76:	2300      	movs	r3, #0
 8006b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b7a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4313      	orrs	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006b84:	4b77      	ldr	r3, [pc, #476]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b92:	4a74      	ldr	r2, [pc, #464]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006b94:	430b      	orrs	r3, r1
 8006b96:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006baa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	d00a      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bb8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc4:	4a67      	ldr	r2, [pc, #412]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006bc6:	430b      	orrs	r3, r1
 8006bc8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bdc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006be0:	460b      	mov	r3, r1
 8006be2:	4313      	orrs	r3, r2
 8006be4:	d011      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006bea:	3308      	adds	r3, #8
 8006bec:	2100      	movs	r1, #0
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f001 fa4a 	bl	8008088 <RCCEx_PLL2_Config>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006bfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	2100      	movs	r1, #0
 8006c14:	6239      	str	r1, [r7, #32]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c20:	460b      	mov	r3, r1
 8006c22:	4313      	orrs	r3, r2
 8006c24:	d011      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f001 fa2a 	bl	8008088 <RCCEx_PLL2_Config>
 8006c34:	4603      	mov	r3, r0
 8006c36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006c3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c52:	2100      	movs	r1, #0
 8006c54:	61b9      	str	r1, [r7, #24]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	61fb      	str	r3, [r7, #28]
 8006c5c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c60:	460b      	mov	r3, r1
 8006c62:	4313      	orrs	r3, r2
 8006c64:	d011      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 fa0a 	bl	8008088 <RCCEx_PLL2_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006c7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006c86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006c8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	2100      	movs	r1, #0
 8006c94:	6139      	str	r1, [r7, #16]
 8006c96:	f003 0308 	and.w	r3, r3, #8
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	d011      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006caa:	3328      	adds	r3, #40	@ 0x28
 8006cac:	2100      	movs	r1, #0
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fa9c 	bl	80081ec <RCCEx_PLL3_Config>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8006cba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cc6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006cca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	f003 0310 	and.w	r3, r3, #16
 8006cda:	60fb      	str	r3, [r7, #12]
 8006cdc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	d011      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006cea:	3328      	adds	r3, #40	@ 0x28
 8006cec:	2101      	movs	r1, #1
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fa7c 	bl	80081ec <RCCEx_PLL3_Config>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006cfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	2100      	movs	r1, #0
 8006d14:	6039      	str	r1, [r7, #0]
 8006d16:	f003 0320 	and.w	r3, r3, #32
 8006d1a:	607b      	str	r3, [r7, #4]
 8006d1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d20:	460b      	mov	r3, r1
 8006d22:	4313      	orrs	r3, r2
 8006d24:	d011      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006d2a:	3328      	adds	r3, #40	@ 0x28
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 fa5c 	bl	80081ec <RCCEx_PLL3_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8006d3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d42:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8006d46:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8006d4a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e000      	b.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d64:	58024400 	.word	0x58024400

08006d68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b090      	sub	sp, #64	@ 0x40
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d76:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006d7a:	430b      	orrs	r3, r1
 8006d7c:	f040 8094 	bne.w	8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006d80:	4b9e      	ldr	r3, [pc, #632]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d84:	f003 0307 	and.w	r3, r3, #7
 8006d88:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	2b04      	cmp	r3, #4
 8006d8e:	f200 8087 	bhi.w	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006d92:	a201      	add	r2, pc, #4	@ (adr r2, 8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006dad 	.word	0x08006dad
 8006d9c:	08006dd5 	.word	0x08006dd5
 8006da0:	08006dfd 	.word	0x08006dfd
 8006da4:	08006e99 	.word	0x08006e99
 8006da8:	08006e25 	.word	0x08006e25
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006dac:	4b93      	ldr	r3, [pc, #588]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006db4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006db8:	d108      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f001 f810 	bl	8007de4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dc8:	f000 bd45 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006dd0:	f000 bd41 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006dd4:	4b89      	ldr	r3, [pc, #548]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ddc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006de0:	d108      	bne.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de2:	f107 0318 	add.w	r3, r7, #24
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fd54 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006df0:	f000 bd31 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006df4:	2300      	movs	r3, #0
 8006df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006df8:	f000 bd2d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dfc:	4b7f      	ldr	r3, [pc, #508]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e08:	d108      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e0a:	f107 030c 	add.w	r3, r7, #12
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fe94 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e18:	f000 bd1d 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e20:	f000 bd19 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e24:	4b75      	ldr	r3, [pc, #468]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e2e:	4b73      	ldr	r3, [pc, #460]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d10c      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d109      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e40:	4b6e      	ldr	r3, [pc, #440]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	08db      	lsrs	r3, r3, #3
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	4a6d      	ldr	r2, [pc, #436]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e52:	e01f      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e54:	4b69      	ldr	r3, [pc, #420]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e60:	d106      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e68:	d102      	bne.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e6a:	4b66      	ldr	r3, [pc, #408]	@ (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e6e:	e011      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e70:	4b62      	ldr	r3, [pc, #392]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e7c:	d106      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e84:	d102      	bne.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e86:	4b60      	ldr	r3, [pc, #384]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8a:	e003      	b.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006e90:	f000 bce1 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e94:	f000 bcdf 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e98:	4b5c      	ldr	r3, [pc, #368]	@ (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e9c:	f000 bcdb 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea4:	f000 bcd7 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006eb0:	430b      	orrs	r3, r1
 8006eb2:	f040 80ad 	bne.w	8007010 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006eb6:	4b51      	ldr	r3, [pc, #324]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006ebe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ec6:	d056      	beq.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ece:	f200 8090 	bhi.w	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed4:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ed6:	f000 8088 	beq.w	8006fea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8006eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006edc:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ede:	f200 8088 	bhi.w	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	2b80      	cmp	r3, #128	@ 0x80
 8006ee6:	d032      	beq.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eea:	2b80      	cmp	r3, #128	@ 0x80
 8006eec:	f200 8081 	bhi.w	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8006ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef8:	2b40      	cmp	r3, #64	@ 0x40
 8006efa:	d014      	beq.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8006efc:	e079      	b.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006efe:	4b3f      	ldr	r3, [pc, #252]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006f0a:	d108      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 ff67 	bl	8007de4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f1a:	f000 bc9c 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f22:	f000 bc98 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f26:	4b35      	ldr	r3, [pc, #212]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f32:	d108      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f34:	f107 0318 	add.w	r3, r7, #24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fcab 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f42:	f000 bc88 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f46:	2300      	movs	r3, #0
 8006f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f4a:	f000 bc84 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f5a:	d108      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f5c:	f107 030c 	add.w	r3, r7, #12
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fdeb 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f6a:	f000 bc74 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006f72:	f000 bc70 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f76:	4b21      	ldr	r3, [pc, #132]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006f7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f80:	4b1e      	ldr	r3, [pc, #120]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d10c      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f92:	4b1a      	ldr	r3, [pc, #104]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	08db      	lsrs	r3, r3, #3
 8006f98:	f003 0303 	and.w	r3, r3, #3
 8006f9c:	4a18      	ldr	r2, [pc, #96]	@ (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8006fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fa4:	e01f      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006fa6:	4b15      	ldr	r3, [pc, #84]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fb2:	d106      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fba:	d102      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006fbc:	4b11      	ldr	r3, [pc, #68]	@ (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fc0:	e011      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006fce:	d106      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fd6:	d102      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fdc:	e003      	b.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8006fe2:	f000 bc38 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006fe6:	f000 bc36 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006fea:	4b08      	ldr	r3, [pc, #32]	@ (800700c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006fee:	f000 bc32 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ff6:	f000 bc2e 	b.w	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ffa:	bf00      	nop
 8006ffc:	58024400 	.word	0x58024400
 8007000:	03d09000 	.word	0x03d09000
 8007004:	003d0900 	.word	0x003d0900
 8007008:	017d7840 	.word	0x017d7840
 800700c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007014:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007018:	430b      	orrs	r3, r1
 800701a:	f040 809c 	bne.w	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800701e:	4b9e      	ldr	r3, [pc, #632]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007022:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8007026:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800702e:	d054      	beq.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8007030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007032:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007036:	f200 808b 	bhi.w	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007040:	f000 8083 	beq.w	800714a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8007044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007046:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800704a:	f200 8081 	bhi.w	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007054:	d02f      	beq.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007058:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800705c:	d878      	bhi.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800705e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007060:	2b00      	cmp	r3, #0
 8007062:	d004      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007066:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800706a:	d012      	beq.n	8007092 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800706c:	e070      	b.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800706e:	4b8a      	ldr	r3, [pc, #552]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800707a:	d107      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800707c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007080:	4618      	mov	r0, r3
 8007082:	f000 feaf 	bl	8007de4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800708a:	e3e4      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800708c:	2300      	movs	r3, #0
 800708e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007090:	e3e1      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007092:	4b81      	ldr	r3, [pc, #516]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800709a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800709e:	d107      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070a0:	f107 0318 	add.w	r3, r7, #24
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 fbf5 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070ae:	e3d2      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070b0:	2300      	movs	r3, #0
 80070b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070b4:	e3cf      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80070b6:	4b78      	ldr	r3, [pc, #480]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070c2:	d107      	bne.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070c4:	f107 030c 	add.w	r3, r7, #12
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 fd37 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80070d2:	e3c0      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80070d8:	e3bd      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80070da:	4b6f      	ldr	r3, [pc, #444]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80070e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80070e4:	4b6c      	ldr	r3, [pc, #432]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d10c      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80070f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070f6:	4b68      	ldr	r3, [pc, #416]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	08db      	lsrs	r3, r3, #3
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	4a66      	ldr	r2, [pc, #408]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007102:	fa22 f303 	lsr.w	r3, r2, r3
 8007106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007108:	e01e      	b.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800710a:	4b63      	ldr	r3, [pc, #396]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007116:	d106      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800711a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800711e:	d102      	bne.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007120:	4b5f      	ldr	r3, [pc, #380]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8007122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007124:	e010      	b.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007126:	4b5c      	ldr	r3, [pc, #368]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800712e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007132:	d106      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8007134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800713a:	d102      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800713c:	4b59      	ldr	r3, [pc, #356]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800713e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007140:	e002      	b.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007142:	2300      	movs	r3, #0
 8007144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8007146:	e386      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007148:	e385      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800714a:	4b57      	ldr	r3, [pc, #348]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800714c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800714e:	e382      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007154:	e37f      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007156:	e9d7 2300 	ldrd	r2, r3, [r7]
 800715a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800715e:	430b      	orrs	r3, r1
 8007160:	f040 80a7 	bne.w	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007164:	4b4c      	ldr	r3, [pc, #304]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007168:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800716c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800716e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007174:	d055      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8007176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007178:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800717c:	f200 8096 	bhi.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007182:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007186:	f000 8084 	beq.w	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007190:	f200 808c 	bhi.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8007194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007196:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800719a:	d030      	beq.n	80071fe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071a2:	f200 8083 	bhi.w	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80071a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071b2:	d012      	beq.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80071b4:	e07a      	b.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071b6:	4b38      	ldr	r3, [pc, #224]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c2:	d107      	bne.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fe0b 	bl	8007de4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071d2:	e340      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071d8:	e33d      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80071da:	4b2f      	ldr	r3, [pc, #188]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071e6:	d107      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071e8:	f107 0318 	add.w	r3, r7, #24
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 fb51 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071f6:	e32e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80071fc:	e32b      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071fe:	4b26      	ldr	r3, [pc, #152]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007206:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800720a:	d107      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fc93 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800721a:	e31c      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007220:	e319      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007222:	4b1d      	ldr	r3, [pc, #116]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800722a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800722c:	4b1a      	ldr	r3, [pc, #104]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0304 	and.w	r3, r3, #4
 8007234:	2b04      	cmp	r3, #4
 8007236:	d10c      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8007238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800723e:	4b16      	ldr	r3, [pc, #88]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	08db      	lsrs	r3, r3, #3
 8007244:	f003 0303 	and.w	r3, r3, #3
 8007248:	4a14      	ldr	r2, [pc, #80]	@ (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800724a:	fa22 f303 	lsr.w	r3, r2, r3
 800724e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007250:	e01e      	b.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007252:	4b11      	ldr	r3, [pc, #68]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800725e:	d106      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8007260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007266:	d102      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007268:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800726a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800726c:	e010      	b.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800726e:	4b0a      	ldr	r3, [pc, #40]	@ (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800727a:	d106      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800727c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800727e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007282:	d102      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007284:	4b07      	ldr	r3, [pc, #28]	@ (80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8007286:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007288:	e002      	b.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800728e:	e2e2      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007290:	e2e1      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007292:	4b05      	ldr	r3, [pc, #20]	@ (80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8007294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007296:	e2de      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007298:	58024400 	.word	0x58024400
 800729c:	03d09000 	.word	0x03d09000
 80072a0:	003d0900 	.word	0x003d0900
 80072a4:	017d7840 	.word	0x017d7840
 80072a8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072b0:	e2d1      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80072b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80072ba:	430b      	orrs	r3, r1
 80072bc:	f040 809c 	bne.w	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80072c0:	4b93      	ldr	r3, [pc, #588]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80072c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80072c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d0:	d054      	beq.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80072d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d8:	f200 808b 	bhi.w	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80072dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072e2:	f000 8083 	beq.w	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80072e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072ec:	f200 8081 	bhi.w	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80072f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072f6:	d02f      	beq.n	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072fe:	d878      	bhi.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007302:	2b00      	cmp	r3, #0
 8007304:	d004      	beq.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800730c:	d012      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800730e:	e070      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007310:	4b7f      	ldr	r3, [pc, #508]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007318:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800731c:	d107      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800731e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fd5e 	bl	8007de4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800732c:	e293      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007332:	e290      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007334:	4b76      	ldr	r3, [pc, #472]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800733c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007340:	d107      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007342:	f107 0318 	add.w	r3, r7, #24
 8007346:	4618      	mov	r0, r3
 8007348:	f000 faa4 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007350:	e281      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007356:	e27e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007358:	4b6d      	ldr	r3, [pc, #436]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007364:	d107      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007366:	f107 030c 	add.w	r3, r7, #12
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fbe6 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007374:	e26f      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800737a:	e26c      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800737c:	4b64      	ldr	r3, [pc, #400]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800737e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007380:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007384:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007386:	4b62      	ldr	r3, [pc, #392]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b04      	cmp	r3, #4
 8007390:	d10c      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8007392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007394:	2b00      	cmp	r3, #0
 8007396:	d109      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007398:	4b5d      	ldr	r3, [pc, #372]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	08db      	lsrs	r3, r3, #3
 800739e:	f003 0303 	and.w	r3, r3, #3
 80073a2:	4a5c      	ldr	r2, [pc, #368]	@ (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
 80073a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073aa:	e01e      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073ac:	4b58      	ldr	r3, [pc, #352]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b8:	d106      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80073ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073c0:	d102      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80073c2:	4b55      	ldr	r3, [pc, #340]	@ (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80073c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073c6:	e010      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073c8:	4b51      	ldr	r3, [pc, #324]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073d4:	d106      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80073d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073dc:	d102      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80073de:	4b4f      	ldr	r3, [pc, #316]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80073e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073e2:	e002      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80073e8:	e235      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80073ea:	e234      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80073ec:	4b4c      	ldr	r3, [pc, #304]	@ (8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80073ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f0:	e231      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80073f2:	2300      	movs	r3, #0
 80073f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f6:	e22e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80073f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073fc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8007400:	430b      	orrs	r3, r1
 8007402:	f040 808f 	bne.w	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007406:	4b42      	ldr	r3, [pc, #264]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800740e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8007410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007412:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007416:	d06b      	beq.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800741a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800741e:	d874      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007422:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007426:	d056      	beq.n	80074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8007428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800742e:	d86c      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007432:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007436:	d03b      	beq.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8007438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800743a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800743e:	d864      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007446:	d021      	beq.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800744a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800744e:	d85c      	bhi.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8007456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800745c:	d004      	beq.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800745e:	e054      	b.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007460:	f7fe fa0c 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8007464:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007466:	e1f6      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007468:	4b29      	ldr	r3, [pc, #164]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007470:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007474:	d107      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007476:	f107 0318 	add.w	r3, r7, #24
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fa0a 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007484:	e1e7      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800748a:	e1e4      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800748c:	4b20      	ldr	r3, [pc, #128]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007494:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007498:	d107      	bne.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800749a:	f107 030c 	add.w	r3, r7, #12
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fb4c 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074a8:	e1d5      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ae:	e1d2      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80074b0:	4b17      	ldr	r3, [pc, #92]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d109      	bne.n	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074bc:	4b14      	ldr	r3, [pc, #80]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	08db      	lsrs	r3, r3, #3
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	4a13      	ldr	r2, [pc, #76]	@ (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80074c8:	fa22 f303 	lsr.w	r3, r2, r3
 80074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ce:	e1c2      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074d4:	e1bf      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80074d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074e2:	d102      	bne.n	80074ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80074e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074e8:	e1b5      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80074ea:	2300      	movs	r3, #0
 80074ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074ee:	e1b2      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80074f0:	4b07      	ldr	r3, [pc, #28]	@ (8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074fc:	d102      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80074fe:	4b07      	ldr	r3, [pc, #28]	@ (800751c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8007500:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007502:	e1a8      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007508:	e1a5      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800750e:	e1a2      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007510:	58024400 	.word	0x58024400
 8007514:	03d09000 	.word	0x03d09000
 8007518:	003d0900 	.word	0x003d0900
 800751c:	017d7840 	.word	0x017d7840
 8007520:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007528:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800752c:	430b      	orrs	r3, r1
 800752e:	d173      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007530:	4b9c      	ldr	r3, [pc, #624]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007538:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800753a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800753c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007540:	d02f      	beq.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8007542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007544:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007548:	d863      	bhi.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800754a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800754c:	2b00      	cmp	r3, #0
 800754e:	d004      	beq.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8007550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007556:	d012      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8007558:	e05b      	b.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800755a:	4b92      	ldr	r3, [pc, #584]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007562:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007566:	d107      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007568:	f107 0318 	add.w	r3, r7, #24
 800756c:	4618      	mov	r0, r3
 800756e:	f000 f991 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007576:	e16e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800757c:	e16b      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800757e:	4b89      	ldr	r3, [pc, #548]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007586:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800758a:	d107      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800758c:	f107 030c 	add.w	r3, r7, #12
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fad3 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800759a:	e15c      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80075a0:	e159      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80075a2:	4b80      	ldr	r3, [pc, #512]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075ac:	4b7d      	ldr	r3, [pc, #500]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d10c      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80075b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d109      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80075be:	4b79      	ldr	r3, [pc, #484]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	08db      	lsrs	r3, r3, #3
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	4a77      	ldr	r2, [pc, #476]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80075ca:	fa22 f303 	lsr.w	r3, r2, r3
 80075ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075d0:	e01e      	b.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075d2:	4b74      	ldr	r3, [pc, #464]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075de:	d106      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80075e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075e6:	d102      	bne.n	80075ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80075e8:	4b70      	ldr	r3, [pc, #448]	@ (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80075ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80075ec:	e010      	b.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075ee:	4b6d      	ldr	r3, [pc, #436]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075fa:	d106      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80075fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007602:	d102      	bne.n	800760a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007604:	4b6a      	ldr	r3, [pc, #424]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007608:	e002      	b.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800760e:	e122      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8007610:	e121      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007616:	e11e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800761c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007620:	430b      	orrs	r3, r1
 8007622:	d133      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007624:	4b5f      	ldr	r3, [pc, #380]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800762c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800762e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007630:	2b00      	cmp	r3, #0
 8007632:	d004      	beq.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800763a:	d012      	beq.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800763c:	e023      	b.n	8007686 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800763e:	4b59      	ldr	r3, [pc, #356]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800764a:	d107      	bne.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800764c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007650:	4618      	mov	r0, r3
 8007652:	f000 fbc7 	bl	8007de4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800765a:	e0fc      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007660:	e0f9      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007662:	4b50      	ldr	r3, [pc, #320]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800766a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800766e:	d107      	bne.n	8007680 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007670:	f107 0318 	add.w	r3, r7, #24
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f90d 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800767e:	e0ea      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007684:	e0e7      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800768a:	e0e4      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800768c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007690:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8007694:	430b      	orrs	r3, r1
 8007696:	f040 808d 	bne.w	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800769a:	4b42      	ldr	r3, [pc, #264]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800769c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800769e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80076a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80076a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076aa:	d06b      	beq.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80076ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076b2:	d874      	bhi.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ba:	d056      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80076bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c2:	d86c      	bhi.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076ca:	d03b      	beq.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80076cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80076d2:	d864      	bhi.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076da:	d021      	beq.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80076dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076e2:	d85c      	bhi.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d004      	beq.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80076ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076f0:	d004      	beq.n	80076fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80076f2:	e054      	b.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80076f4:	f000 f8b8 	bl	8007868 <HAL_RCCEx_GetD3PCLK1Freq>
 80076f8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80076fa:	e0ac      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076fc:	4b29      	ldr	r3, [pc, #164]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007704:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007708:	d107      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800770a:	f107 0318 	add.w	r3, r7, #24
 800770e:	4618      	mov	r0, r3
 8007710:	f000 f8c0 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007718:	e09d      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800771a:	2300      	movs	r3, #0
 800771c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800771e:	e09a      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007720:	4b20      	ldr	r3, [pc, #128]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007728:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800772c:	d107      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800772e:	f107 030c 	add.w	r3, r7, #12
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fa02 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800773c:	e08b      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007742:	e088      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007744:	4b17      	ldr	r3, [pc, #92]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b04      	cmp	r3, #4
 800774e:	d109      	bne.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007750:	4b14      	ldr	r3, [pc, #80]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	08db      	lsrs	r3, r3, #3
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	4a13      	ldr	r2, [pc, #76]	@ (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800775c:	fa22 f303 	lsr.w	r3, r2, r3
 8007760:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007762:	e078      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007768:	e075      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800776a:	4b0e      	ldr	r3, [pc, #56]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007776:	d102      	bne.n	800777e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8007778:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800777a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800777c:	e06b      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007782:	e068      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007784:	4b07      	ldr	r3, [pc, #28]	@ (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800778c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007790:	d102      	bne.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8007792:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8007794:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007796:	e05e      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800779c:	e05b      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80077a2:	e058      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80077a4:	58024400 	.word	0x58024400
 80077a8:	03d09000 	.word	0x03d09000
 80077ac:	003d0900 	.word	0x003d0900
 80077b0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80077b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80077bc:	430b      	orrs	r3, r1
 80077be:	d148      	bne.n	8007852 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80077c0:	4b27      	ldr	r3, [pc, #156]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80077c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80077c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80077ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d0:	d02a      	beq.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80077d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077d8:	d838      	bhi.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80077da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80077e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077e6:	d00d      	beq.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80077e8:	e030      	b.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077ea:	4b1d      	ldr	r3, [pc, #116]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077f6:	d102      	bne.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80077f8:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80077fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80077fc:	e02b      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007802:	e028      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007804:	4b16      	ldr	r3, [pc, #88]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800780c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007810:	d107      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fae4 	bl	8007de4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800781c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007820:	e019      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007826:	e016      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007828:	4b0d      	ldr	r3, [pc, #52]	@ (8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007830:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007834:	d107      	bne.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007836:	f107 0318 	add.w	r3, r7, #24
 800783a:	4618      	mov	r0, r3
 800783c:	f000 f82a 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007844:	e007      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007846:	2300      	movs	r3, #0
 8007848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800784a:	e004      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800784c:	2300      	movs	r3, #0
 800784e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007850:	e001      	b.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8007856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007858:	4618      	mov	r0, r3
 800785a:	3740      	adds	r7, #64	@ 0x40
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	58024400 	.word	0x58024400
 8007864:	017d7840 	.word	0x017d7840

08007868 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800786c:	f7fd ffd6 	bl	800581c <HAL_RCC_GetHCLKFreq>
 8007870:	4602      	mov	r2, r0
 8007872:	4b06      	ldr	r3, [pc, #24]	@ (800788c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	091b      	lsrs	r3, r3, #4
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	4904      	ldr	r1, [pc, #16]	@ (8007890 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800787e:	5ccb      	ldrb	r3, [r1, r3]
 8007880:	f003 031f 	and.w	r3, r3, #31
 8007884:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007888:	4618      	mov	r0, r3
 800788a:	bd80      	pop	{r7, pc}
 800788c:	58024400 	.word	0x58024400
 8007890:	0800cf8c 	.word	0x0800cf8c

08007894 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007894:	b480      	push	{r7}
 8007896:	b089      	sub	sp, #36	@ 0x24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800789c:	4ba1      	ldr	r3, [pc, #644]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80078a6:	4b9f      	ldr	r3, [pc, #636]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078aa:	0b1b      	lsrs	r3, r3, #12
 80078ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80078b2:	4b9c      	ldr	r3, [pc, #624]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078b6:	091b      	lsrs	r3, r3, #4
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80078be:	4b99      	ldr	r3, [pc, #612]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c2:	08db      	lsrs	r3, r3, #3
 80078c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	fb02 f303 	mul.w	r3, r2, r3
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 8111 	beq.w	8007b04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	f000 8083 	beq.w	80079f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	f200 80a1 	bhi.w	8007a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d056      	beq.n	80079ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80078fe:	e099      	b.n	8007a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007900:	4b88      	ldr	r3, [pc, #544]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b00      	cmp	r3, #0
 800790a:	d02d      	beq.n	8007968 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800790c:	4b85      	ldr	r3, [pc, #532]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	08db      	lsrs	r3, r3, #3
 8007912:	f003 0303 	and.w	r3, r3, #3
 8007916:	4a84      	ldr	r2, [pc, #528]	@ (8007b28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007918:	fa22 f303 	lsr.w	r3, r2, r3
 800791c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	ee07 3a90 	vmov	s15, r3
 8007924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	ee07 3a90 	vmov	s15, r3
 800792e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007936:	4b7b      	ldr	r3, [pc, #492]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007946:	ed97 6a03 	vldr	s12, [r7, #12]
 800794a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800794e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800795a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007962:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007966:	e087      	b.n	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007972:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007b30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800797a:	4b6a      	ldr	r3, [pc, #424]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800797c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800797e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007982:	ee07 3a90 	vmov	s15, r3
 8007986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800798a:	ed97 6a03 	vldr	s12, [r7, #12]
 800798e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800799a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800799e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079aa:	e065      	b.n	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	ee07 3a90 	vmov	s15, r3
 80079b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80079ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079be:	4b59      	ldr	r3, [pc, #356]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80079d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80079d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80079e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ee:	e043      	b.n	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	ee07 3a90 	vmov	s15, r3
 80079f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80079fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a02:	4b48      	ldr	r3, [pc, #288]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a32:	e021      	b.n	8007a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a46:	4b37      	ldr	r3, [pc, #220]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a4e:	ee07 3a90 	vmov	s15, r3
 8007a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007a78:	4b2a      	ldr	r3, [pc, #168]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a7c:	0a5b      	lsrs	r3, r3, #9
 8007a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9e:	ee17 2a90 	vmov	r2, s15
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aaa:	0c1b      	lsrs	r3, r3, #16
 8007aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007abc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007acc:	ee17 2a90 	vmov	r2, s15
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007ad4:	4b13      	ldr	r3, [pc, #76]	@ (8007b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad8:	0e1b      	lsrs	r3, r3, #24
 8007ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ade:	ee07 3a90 	vmov	s15, r3
 8007ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007afa:	ee17 2a90 	vmov	r2, s15
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007b02:	e008      	b.n	8007b16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	609a      	str	r2, [r3, #8]
}
 8007b16:	bf00      	nop
 8007b18:	3724      	adds	r7, #36	@ 0x24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	58024400 	.word	0x58024400
 8007b28:	03d09000 	.word	0x03d09000
 8007b2c:	46000000 	.word	0x46000000
 8007b30:	4c742400 	.word	0x4c742400
 8007b34:	4a742400 	.word	0x4a742400
 8007b38:	4bbebc20 	.word	0x4bbebc20

08007b3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b089      	sub	sp, #36	@ 0x24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b44:	4ba1      	ldr	r3, [pc, #644]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b48:	f003 0303 	and.w	r3, r3, #3
 8007b4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007b4e:	4b9f      	ldr	r3, [pc, #636]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b52:	0d1b      	lsrs	r3, r3, #20
 8007b54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007b5a:	4b9c      	ldr	r3, [pc, #624]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5e:	0a1b      	lsrs	r3, r3, #8
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007b66:	4b99      	ldr	r3, [pc, #612]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b6a:	08db      	lsrs	r3, r3, #3
 8007b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	fb02 f303 	mul.w	r3, r2, r3
 8007b76:	ee07 3a90 	vmov	s15, r3
 8007b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8111 	beq.w	8007dac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	2b02      	cmp	r3, #2
 8007b8e:	f000 8083 	beq.w	8007c98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	f200 80a1 	bhi.w	8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d003      	beq.n	8007ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d056      	beq.n	8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007ba6:	e099      	b.n	8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ba8:	4b88      	ldr	r3, [pc, #544]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d02d      	beq.n	8007c10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bb4:	4b85      	ldr	r3, [pc, #532]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	08db      	lsrs	r3, r3, #3
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	4a84      	ldr	r2, [pc, #528]	@ (8007dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	ee07 3a90 	vmov	s15, r3
 8007bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bde:	4b7b      	ldr	r3, [pc, #492]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bf2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c0e:	e087      	b.n	8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	ee07 3a90 	vmov	s15, r3
 8007c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c22:	4b6a      	ldr	r3, [pc, #424]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c52:	e065      	b.n	8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c66:	4b59      	ldr	r3, [pc, #356]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c96:	e043      	b.n	8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007caa:	4b48      	ldr	r3, [pc, #288]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cda:	e021      	b.n	8007d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	ee07 3a90 	vmov	s15, r3
 8007ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cee:	4b37      	ldr	r3, [pc, #220]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007d20:	4b2a      	ldr	r3, [pc, #168]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	0a5b      	lsrs	r3, r3, #9
 8007d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d2a:	ee07 3a90 	vmov	s15, r3
 8007d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d46:	ee17 2a90 	vmov	r2, s15
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d52:	0c1b      	lsrs	r3, r3, #16
 8007d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d58:	ee07 3a90 	vmov	s15, r3
 8007d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d68:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d74:	ee17 2a90 	vmov	r2, s15
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007d7c:	4b13      	ldr	r3, [pc, #76]	@ (8007dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d80:	0e1b      	lsrs	r3, r3, #24
 8007d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d86:	ee07 3a90 	vmov	s15, r3
 8007d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007da2:	ee17 2a90 	vmov	r2, s15
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007daa:	e008      	b.n	8007dbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	609a      	str	r2, [r3, #8]
}
 8007dbe:	bf00      	nop
 8007dc0:	3724      	adds	r7, #36	@ 0x24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	58024400 	.word	0x58024400
 8007dd0:	03d09000 	.word	0x03d09000
 8007dd4:	46000000 	.word	0x46000000
 8007dd8:	4c742400 	.word	0x4c742400
 8007ddc:	4a742400 	.word	0x4a742400
 8007de0:	4bbebc20 	.word	0x4bbebc20

08007de4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b089      	sub	sp, #36	@ 0x24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dec:	4ba0      	ldr	r3, [pc, #640]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	f003 0303 	and.w	r3, r3, #3
 8007df4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007df6:	4b9e      	ldr	r3, [pc, #632]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfa:	091b      	lsrs	r3, r3, #4
 8007dfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e00:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007e02:	4b9b      	ldr	r3, [pc, #620]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007e0c:	4b98      	ldr	r3, [pc, #608]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e10:	08db      	lsrs	r3, r3, #3
 8007e12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	fb02 f303 	mul.w	r3, r2, r3
 8007e1c:	ee07 3a90 	vmov	s15, r3
 8007e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e24:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 8111 	beq.w	8008052 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	f000 8083 	beq.w	8007f3e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	f200 80a1 	bhi.w	8007f82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d056      	beq.n	8007efa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007e4c:	e099      	b.n	8007f82 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e4e:	4b88      	ldr	r3, [pc, #544]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d02d      	beq.n	8007eb6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e5a:	4b85      	ldr	r3, [pc, #532]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	08db      	lsrs	r3, r3, #3
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	4a83      	ldr	r2, [pc, #524]	@ (8008074 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007e66:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	ee07 3a90 	vmov	s15, r3
 8007e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e84:	4b7a      	ldr	r3, [pc, #488]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e8c:	ee07 3a90 	vmov	s15, r3
 8007e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e94:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e98:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8008078 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ea4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eb0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007eb4:	e087      	b.n	8007fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	ee07 3a90 	vmov	s15, r3
 8007ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800807c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ec8:	4b69      	ldr	r3, [pc, #420]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed0:	ee07 3a90 	vmov	s15, r3
 8007ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007edc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8008078 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ef8:	e065      	b.n	8007fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	ee07 3a90 	vmov	s15, r3
 8007f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f04:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8008080 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f0c:	4b58      	ldr	r3, [pc, #352]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f14:	ee07 3a90 	vmov	s15, r3
 8007f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f20:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8008078 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f38:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f3c:	e043      	b.n	8007fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	ee07 3a90 	vmov	s15, r3
 8007f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f48:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008084 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007f4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f50:	4b47      	ldr	r3, [pc, #284]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f58:	ee07 3a90 	vmov	s15, r3
 8007f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f60:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f64:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8008078 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007f68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f80:	e021      	b.n	8007fc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800807c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007f90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f94:	4b36      	ldr	r3, [pc, #216]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9c:	ee07 3a90 	vmov	s15, r3
 8007fa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fa8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008078 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007fac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fb4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fc4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fca:	0a5b      	lsrs	r3, r3, #9
 8007fcc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd0:	ee07 3a90 	vmov	s15, r3
 8007fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fd8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fec:	ee17 2a90 	vmov	r2, s15
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff8:	0c1b      	lsrs	r3, r3, #16
 8007ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffe:	ee07 3a90 	vmov	s15, r3
 8008002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800800a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800800e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801a:	ee17 2a90 	vmov	r2, s15
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008022:	4b13      	ldr	r3, [pc, #76]	@ (8008070 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008026:	0e1b      	lsrs	r3, r3, #24
 8008028:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800802c:	ee07 3a90 	vmov	s15, r3
 8008030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008034:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800803c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008048:	ee17 2a90 	vmov	r2, s15
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008050:	e008      	b.n	8008064 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	609a      	str	r2, [r3, #8]
}
 8008064:	bf00      	nop
 8008066:	3724      	adds	r7, #36	@ 0x24
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	58024400 	.word	0x58024400
 8008074:	03d09000 	.word	0x03d09000
 8008078:	46000000 	.word	0x46000000
 800807c:	4c742400 	.word	0x4c742400
 8008080:	4a742400 	.word	0x4a742400
 8008084:	4bbebc20 	.word	0x4bbebc20

08008088 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008096:	4b53      	ldr	r3, [pc, #332]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d101      	bne.n	80080a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e099      	b.n	80081da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80080a6:	4b4f      	ldr	r3, [pc, #316]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a4e      	ldr	r2, [pc, #312]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80080ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b2:	f7f9 f91f 	bl	80012f4 <HAL_GetTick>
 80080b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080b8:	e008      	b.n	80080cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080ba:	f7f9 f91b 	bl	80012f4 <HAL_GetTick>
 80080be:	4602      	mov	r2, r0
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	1ad3      	subs	r3, r2, r3
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	d901      	bls.n	80080cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e086      	b.n	80081da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080cc:	4b45      	ldr	r3, [pc, #276]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f0      	bne.n	80080ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080d8:	4b42      	ldr	r3, [pc, #264]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80080da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	031b      	lsls	r3, r3, #12
 80080e6:	493f      	ldr	r1, [pc, #252]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	025b      	lsls	r3, r3, #9
 80080fe:	b29b      	uxth	r3, r3
 8008100:	431a      	orrs	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	3b01      	subs	r3, #1
 8008108:	041b      	lsls	r3, r3, #16
 800810a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	3b01      	subs	r3, #1
 8008116:	061b      	lsls	r3, r3, #24
 8008118:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800811c:	4931      	ldr	r1, [pc, #196]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 800811e:	4313      	orrs	r3, r2
 8008120:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008122:	4b30      	ldr	r3, [pc, #192]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008126:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	492d      	ldr	r1, [pc, #180]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008130:	4313      	orrs	r3, r2
 8008132:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008134:	4b2b      	ldr	r3, [pc, #172]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008138:	f023 0220 	bic.w	r2, r3, #32
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	699b      	ldr	r3, [r3, #24]
 8008140:	4928      	ldr	r1, [pc, #160]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008142:	4313      	orrs	r3, r2
 8008144:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008146:	4b27      	ldr	r3, [pc, #156]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	4a26      	ldr	r2, [pc, #152]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 800814c:	f023 0310 	bic.w	r3, r3, #16
 8008150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008152:	4b24      	ldr	r3, [pc, #144]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008156:	4b24      	ldr	r3, [pc, #144]	@ (80081e8 <RCCEx_PLL2_Config+0x160>)
 8008158:	4013      	ands	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	69d2      	ldr	r2, [r2, #28]
 800815e:	00d2      	lsls	r2, r2, #3
 8008160:	4920      	ldr	r1, [pc, #128]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008162:	4313      	orrs	r3, r2
 8008164:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008166:	4b1f      	ldr	r3, [pc, #124]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816a:	4a1e      	ldr	r2, [pc, #120]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 800816c:	f043 0310 	orr.w	r3, r3, #16
 8008170:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008178:	4b1a      	ldr	r3, [pc, #104]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817c:	4a19      	ldr	r2, [pc, #100]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 800817e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008182:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008184:	e00f      	b.n	80081a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d106      	bne.n	800819a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800818c:	4b15      	ldr	r3, [pc, #84]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	4a14      	ldr	r2, [pc, #80]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 8008192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008196:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008198:	e005      	b.n	80081a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800819a:	4b12      	ldr	r3, [pc, #72]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 800819c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819e:	4a11      	ldr	r2, [pc, #68]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80081a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80081a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80081a6:	4b0f      	ldr	r3, [pc, #60]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a0e      	ldr	r2, [pc, #56]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80081ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081b2:	f7f9 f89f 	bl	80012f4 <HAL_GetTick>
 80081b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081b8:	e008      	b.n	80081cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081ba:	f7f9 f89b 	bl	80012f4 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d901      	bls.n	80081cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e006      	b.n	80081da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081cc:	4b05      	ldr	r3, [pc, #20]	@ (80081e4 <RCCEx_PLL2_Config+0x15c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0f0      	beq.n	80081ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	58024400 	.word	0x58024400
 80081e8:	ffff0007 	.word	0xffff0007

080081ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081fa:	4b53      	ldr	r3, [pc, #332]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80081fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081fe:	f003 0303 	and.w	r3, r3, #3
 8008202:	2b03      	cmp	r3, #3
 8008204:	d101      	bne.n	800820a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e099      	b.n	800833e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800820a:	4b4f      	ldr	r3, [pc, #316]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a4e      	ldr	r2, [pc, #312]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008210:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008216:	f7f9 f86d 	bl	80012f4 <HAL_GetTick>
 800821a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800821c:	e008      	b.n	8008230 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800821e:	f7f9 f869 	bl	80012f4 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e086      	b.n	800833e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008230:	4b45      	ldr	r3, [pc, #276]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008238:	2b00      	cmp	r3, #0
 800823a:	d1f0      	bne.n	800821e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800823c:	4b42      	ldr	r3, [pc, #264]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 800823e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008240:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	051b      	lsls	r3, r3, #20
 800824a:	493f      	ldr	r1, [pc, #252]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 800824c:	4313      	orrs	r3, r2
 800824e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	3b01      	subs	r3, #1
 8008256:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	3b01      	subs	r3, #1
 8008260:	025b      	lsls	r3, r3, #9
 8008262:	b29b      	uxth	r3, r3
 8008264:	431a      	orrs	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	3b01      	subs	r3, #1
 800826c:	041b      	lsls	r3, r3, #16
 800826e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	3b01      	subs	r3, #1
 800827a:	061b      	lsls	r3, r3, #24
 800827c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008280:	4931      	ldr	r1, [pc, #196]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008282:	4313      	orrs	r3, r2
 8008284:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008286:	4b30      	ldr	r3, [pc, #192]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800828a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	492d      	ldr	r1, [pc, #180]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008294:	4313      	orrs	r3, r2
 8008296:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008298:	4b2b      	ldr	r3, [pc, #172]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 800829a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	4928      	ldr	r1, [pc, #160]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082aa:	4b27      	ldr	r3, [pc, #156]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ae:	4a26      	ldr	r2, [pc, #152]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082b6:	4b24      	ldr	r3, [pc, #144]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ba:	4b24      	ldr	r3, [pc, #144]	@ (800834c <RCCEx_PLL3_Config+0x160>)
 80082bc:	4013      	ands	r3, r2
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	69d2      	ldr	r2, [r2, #28]
 80082c2:	00d2      	lsls	r2, r2, #3
 80082c4:	4920      	ldr	r1, [pc, #128]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d106      	bne.n	80082ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e0:	4a19      	ldr	r2, [pc, #100]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80082e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082e8:	e00f      	b.n	800830a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d106      	bne.n	80082fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082f0:	4b15      	ldr	r3, [pc, #84]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082f4:	4a14      	ldr	r2, [pc, #80]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 80082f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082fc:	e005      	b.n	800830a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082fe:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008302:	4a11      	ldr	r2, [pc, #68]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008308:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800830a:	4b0f      	ldr	r3, [pc, #60]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a0e      	ldr	r2, [pc, #56]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008314:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008316:	f7f8 ffed 	bl	80012f4 <HAL_GetTick>
 800831a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800831c:	e008      	b.n	8008330 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800831e:	f7f8 ffe9 	bl	80012f4 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d901      	bls.n	8008330 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e006      	b.n	800833e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008330:	4b05      	ldr	r3, [pc, #20]	@ (8008348 <RCCEx_PLL3_Config+0x15c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0f0      	beq.n	800831e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800833c:	7bfb      	ldrb	r3, [r7, #15]
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	58024400 	.word	0x58024400
 800834c:	ffff0007 	.word	0xffff0007

08008350 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b08a      	sub	sp, #40	@ 0x28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e28e      	b.n	8008880 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008362:	f7f8 fff7 	bl	8001354 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800836c:	2b01      	cmp	r3, #1
 800836e:	d113      	bne.n	8008398 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a96      	ldr	r2, [pc, #600]	@ (80085d0 <HAL_SAI_Init+0x280>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d004      	beq.n	8008384 <HAL_SAI_Init+0x34>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a95      	ldr	r2, [pc, #596]	@ (80085d4 <HAL_SAI_Init+0x284>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d107      	bne.n	8008394 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008388:	2b01      	cmp	r3, #1
 800838a:	d103      	bne.n	8008394 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e273      	b.n	8008880 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a8c      	ldr	r2, [pc, #560]	@ (80085d0 <HAL_SAI_Init+0x280>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d004      	beq.n	80083ac <HAL_SAI_Init+0x5c>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a8c      	ldr	r2, [pc, #560]	@ (80085d8 <HAL_SAI_Init+0x288>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d102      	bne.n	80083b2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 80083ac:	4b8b      	ldr	r3, [pc, #556]	@ (80085dc <HAL_SAI_Init+0x28c>)
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	e028      	b.n	8008404 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a8a      	ldr	r2, [pc, #552]	@ (80085e0 <HAL_SAI_Init+0x290>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d004      	beq.n	80083c6 <HAL_SAI_Init+0x76>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a88      	ldr	r2, [pc, #544]	@ (80085e4 <HAL_SAI_Init+0x294>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d102      	bne.n	80083cc <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 80083c6:	4b88      	ldr	r3, [pc, #544]	@ (80085e8 <HAL_SAI_Init+0x298>)
 80083c8:	61bb      	str	r3, [r7, #24]
 80083ca:	e01b      	b.n	8008404 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a86      	ldr	r2, [pc, #536]	@ (80085ec <HAL_SAI_Init+0x29c>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d004      	beq.n	80083e0 <HAL_SAI_Init+0x90>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a85      	ldr	r2, [pc, #532]	@ (80085f0 <HAL_SAI_Init+0x2a0>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d102      	bne.n	80083e6 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 80083e0:	4b84      	ldr	r3, [pc, #528]	@ (80085f4 <HAL_SAI_Init+0x2a4>)
 80083e2:	61bb      	str	r3, [r7, #24]
 80083e4:	e00e      	b.n	8008404 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a7a      	ldr	r2, [pc, #488]	@ (80085d4 <HAL_SAI_Init+0x284>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d004      	beq.n	80083fa <HAL_SAI_Init+0xaa>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a80      	ldr	r2, [pc, #512]	@ (80085f8 <HAL_SAI_Init+0x2a8>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d102      	bne.n	8008400 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 80083fa:	4b80      	ldr	r3, [pc, #512]	@ (80085fc <HAL_SAI_Init+0x2ac>)
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	e001      	b.n	8008404 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e23d      	b.n	8008880 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d106      	bne.n	800841e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7f8 fd25 	bl	8000e68 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fd72 	bl	8008f08 <SAI_Disable>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e228      	b.n	8008880 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d00c      	beq.n	8008458 <HAL_SAI_Init+0x108>
 800843e:	2b02      	cmp	r3, #2
 8008440:	d80d      	bhi.n	800845e <HAL_SAI_Init+0x10e>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <HAL_SAI_Init+0xfc>
 8008446:	2b01      	cmp	r3, #1
 8008448:	d003      	beq.n	8008452 <HAL_SAI_Init+0x102>
 800844a:	e008      	b.n	800845e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800844c:	2300      	movs	r3, #0
 800844e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008450:	e008      	b.n	8008464 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008452:	2310      	movs	r3, #16
 8008454:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008456:	e005      	b.n	8008464 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008458:	2320      	movs	r3, #32
 800845a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800845c:	e002      	b.n	8008464 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800845e:	2300      	movs	r3, #0
 8008460:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8008462:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	2b05      	cmp	r3, #5
 800846a:	d832      	bhi.n	80084d2 <HAL_SAI_Init+0x182>
 800846c:	a201      	add	r2, pc, #4	@ (adr r2, 8008474 <HAL_SAI_Init+0x124>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	0800848d 	.word	0x0800848d
 8008478:	08008493 	.word	0x08008493
 800847c:	0800849b 	.word	0x0800849b
 8008480:	080084a3 	.word	0x080084a3
 8008484:	080084b3 	.word	0x080084b3
 8008488:	080084c3 	.word	0x080084c3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800848c:	2300      	movs	r3, #0
 800848e:	61fb      	str	r3, [r7, #28]
      break;
 8008490:	e022      	b.n	80084d8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008496:	61fb      	str	r3, [r7, #28]
      break;
 8008498:	e01e      	b.n	80084d8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800849a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800849e:	61fb      	str	r3, [r7, #28]
      break;
 80084a0:	e01a      	b.n	80084d8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80084a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084a6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	f043 0301 	orr.w	r3, r3, #1
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084b0:	e012      	b.n	80084d8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80084b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084b6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	f043 0302 	orr.w	r3, r3, #2
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084c0:	e00a      	b.n	80084d8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80084c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084c6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	f043 0303 	orr.w	r3, r3, #3
 80084ce:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80084d0:	e002      	b.n	80084d8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	61fb      	str	r3, [r7, #28]
      break;
 80084d6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084dc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 80c5 	beq.w	8008672 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 80084e8:	2300      	movs	r3, #0
 80084ea:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a37      	ldr	r2, [pc, #220]	@ (80085d0 <HAL_SAI_Init+0x280>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d004      	beq.n	8008500 <HAL_SAI_Init+0x1b0>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a37      	ldr	r2, [pc, #220]	@ (80085d8 <HAL_SAI_Init+0x288>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d106      	bne.n	800850e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008500:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8008504:	f04f 0100 	mov.w	r1, #0
 8008508:	f7fe fc2e 	bl	8006d68 <HAL_RCCEx_GetPeriphCLKFreq>
 800850c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a33      	ldr	r2, [pc, #204]	@ (80085e0 <HAL_SAI_Init+0x290>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d004      	beq.n	8008522 <HAL_SAI_Init+0x1d2>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a31      	ldr	r2, [pc, #196]	@ (80085e4 <HAL_SAI_Init+0x294>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d106      	bne.n	8008530 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008522:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008526:	f04f 0100 	mov.w	r1, #0
 800852a:	f7fe fc1d 	bl	8006d68 <HAL_RCCEx_GetPeriphCLKFreq>
 800852e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a2d      	ldr	r2, [pc, #180]	@ (80085ec <HAL_SAI_Init+0x29c>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d004      	beq.n	8008544 <HAL_SAI_Init+0x1f4>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a2c      	ldr	r2, [pc, #176]	@ (80085f0 <HAL_SAI_Init+0x2a0>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d106      	bne.n	8008552 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008544:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008548:	f04f 0100 	mov.w	r1, #0
 800854c:	f7fe fc0c 	bl	8006d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8008550:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1f      	ldr	r2, [pc, #124]	@ (80085d4 <HAL_SAI_Init+0x284>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d106      	bne.n	800856a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800855c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008560:	f04f 0100 	mov.w	r1, #0
 8008564:	f7fe fc00 	bl	8006d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8008568:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a22      	ldr	r2, [pc, #136]	@ (80085f8 <HAL_SAI_Init+0x2a8>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d106      	bne.n	8008582 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008574:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008578:	f04f 0100 	mov.w	r1, #0
 800857c:	f7fe fbf4 	bl	8006d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8008580:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800858a:	d139      	bne.n	8008600 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008590:	2b04      	cmp	r3, #4
 8008592:	d102      	bne.n	800859a <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008594:	2340      	movs	r3, #64	@ 0x40
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e00a      	b.n	80085b0 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859e:	2b08      	cmp	r3, #8
 80085a0:	d103      	bne.n	80085aa <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80085a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	e002      	b.n	80085b0 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ae:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4619      	mov	r1, r3
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	fb02 f303 	mul.w	r3, r2, r3
 80085c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80085ca:	613b      	str	r3, [r7, #16]
 80085cc:	e030      	b.n	8008630 <HAL_SAI_Init+0x2e0>
 80085ce:	bf00      	nop
 80085d0:	40015804 	.word	0x40015804
 80085d4:	58005404 	.word	0x58005404
 80085d8:	40015824 	.word	0x40015824
 80085dc:	40015800 	.word	0x40015800
 80085e0:	40015c04 	.word	0x40015c04
 80085e4:	40015c24 	.word	0x40015c24
 80085e8:	40015c00 	.word	0x40015c00
 80085ec:	40016004 	.word	0x40016004
 80085f0:	40016024 	.word	0x40016024
 80085f4:	40016000 	.word	0x40016000
 80085f8:	58005424 	.word	0x58005424
 80085fc:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008608:	d101      	bne.n	800860e <HAL_SAI_Init+0x2be>
 800860a:	2302      	movs	r3, #2
 800860c:	e000      	b.n	8008610 <HAL_SAI_Init+0x2c0>
 800860e:	2301      	movs	r3, #1
 8008610:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	4613      	mov	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	4619      	mov	r1, r3
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	68ba      	ldr	r2, [r7, #8]
 8008624:	fb02 f303 	mul.w	r3, r2, r3
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	fbb1 f3f3 	udiv	r3, r1, r3
 800862e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	4a95      	ldr	r2, [pc, #596]	@ (8008888 <HAL_SAI_Init+0x538>)
 8008634:	fba2 2303 	umull	r2, r3, r2, r3
 8008638:	08da      	lsrs	r2, r3, #3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800863e:	6939      	ldr	r1, [r7, #16]
 8008640:	4b91      	ldr	r3, [pc, #580]	@ (8008888 <HAL_SAI_Init+0x538>)
 8008642:	fba3 2301 	umull	r2, r3, r3, r1
 8008646:	08da      	lsrs	r2, r3, #3
 8008648:	4613      	mov	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	1aca      	subs	r2, r1, r3
 8008652:	2a08      	cmp	r2, #8
 8008654:	d904      	bls.n	8008660 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008664:	2b04      	cmp	r3, #4
 8008666:	d104      	bne.n	8008672 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866c:	085a      	lsrs	r2, r3, #1
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <HAL_SAI_Init+0x332>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	2b02      	cmp	r3, #2
 8008680:	d109      	bne.n	8008696 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008686:	2b01      	cmp	r3, #1
 8008688:	d101      	bne.n	800868e <HAL_SAI_Init+0x33e>
 800868a:	2300      	movs	r3, #0
 800868c:	e001      	b.n	8008692 <HAL_SAI_Init+0x342>
 800868e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008692:	623b      	str	r3, [r7, #32]
 8008694:	e008      	b.n	80086a8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800869a:	2b01      	cmp	r3, #1
 800869c:	d102      	bne.n	80086a4 <HAL_SAI_Init+0x354>
 800869e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086a2:	e000      	b.n	80086a6 <HAL_SAI_Init+0x356>
 80086a4:	2300      	movs	r3, #0
 80086a6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80086a8:	f7f8 fe54 	bl	8001354 <HAL_GetREVID>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086b2:	d331      	bcc.n	8008718 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6819      	ldr	r1, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b73      	ldr	r3, [pc, #460]	@ (800888c <HAL_SAI_Init+0x53c>)
 80086c0:	400b      	ands	r3, r1
 80086c2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6819      	ldr	r1, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80086d8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086de:	431a      	orrs	r2, r3
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 80086ec:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80086f8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086fe:	051b      	lsls	r3, r3, #20
 8008700:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008706:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	e02d      	b.n	8008774 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6819      	ldr	r1, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	4b5b      	ldr	r3, [pc, #364]	@ (8008890 <HAL_SAI_Init+0x540>)
 8008724:	400b      	ands	r3, r1
 8008726:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6819      	ldr	r1, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008736:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800873c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008742:	431a      	orrs	r2, r3
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008750:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800875c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008762:	051b      	lsls	r3, r3, #20
 8008764:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800876a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6859      	ldr	r1, [r3, #4]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	4b45      	ldr	r3, [pc, #276]	@ (8008894 <HAL_SAI_Init+0x544>)
 8008780:	400b      	ands	r3, r1
 8008782:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6859      	ldr	r1, [r3, #4]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	69da      	ldr	r2, [r3, #28]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008798:	431a      	orrs	r2, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	430a      	orrs	r2, r1
 80087a0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6899      	ldr	r1, [r3, #8]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b3a      	ldr	r3, [pc, #232]	@ (8008898 <HAL_SAI_Init+0x548>)
 80087ae:	400b      	ands	r3, r1
 80087b0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6899      	ldr	r1, [r3, #8]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087bc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80087c2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 80087c8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 80087ce:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087d4:	3b01      	subs	r3, #1
 80087d6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80087d8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68d9      	ldr	r1, [r3, #12]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80087f0:	400b      	ands	r3, r1
 80087f2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68d9      	ldr	r1, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008802:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008808:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800880a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008810:	3b01      	subs	r3, #1
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a1e      	ldr	r2, [pc, #120]	@ (800889c <HAL_SAI_Init+0x54c>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d004      	beq.n	8008832 <HAL_SAI_Init+0x4e2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1c      	ldr	r2, [pc, #112]	@ (80088a0 <HAL_SAI_Init+0x550>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d119      	bne.n	8008866 <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008836:	f023 0201 	bic.w	r2, r3, #1
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008844:	2b01      	cmp	r3, #1
 8008846:	d10e      	bne.n	8008866 <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008850:	3b01      	subs	r3, #1
 8008852:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008854:	431a      	orrs	r2, r3
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885e:	f043 0201 	orr.w	r2, r3, #1
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2201      	movs	r2, #1
 8008872:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3728      	adds	r7, #40	@ 0x28
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	cccccccd 	.word	0xcccccccd
 800888c:	f005c010 	.word	0xf005c010
 8008890:	f805c010 	.word	0xf805c010
 8008894:	ffff1ff0 	.word	0xffff1ff0
 8008898:	fff88000 	.word	0xfff88000
 800889c:	40015804 	.word	0x40015804
 80088a0:	58005404 	.word	0x58005404

080088a4 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_SAI_Abort+0x1a>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e07d      	b.n	80089ba <HAL_SAI_Abort+0x116>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 fb1e 	bl	8008f08 <SAI_Disable>
 80088cc:	4603      	mov	r3, r0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d001      	beq.n	80088d6 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088e4:	d14f      	bne.n	8008986 <HAL_SAI_Abort+0xe2>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80088f4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX)&& (hsai->hdmatx != NULL))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b12      	cmp	r3, #18
 8008900:	d11d      	bne.n	800893e <HAL_SAI_Abort+0x9a>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008908:	2b00      	cmp	r3, #0
 800890a:	d018      	beq.n	800893e <HAL_SAI_Abort+0x9a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008912:	4618      	mov	r0, r3
 8008914:	f7f9 fc78 	bl	8002208 <HAL_DMA_Abort>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00f      	beq.n	800893e <HAL_SAI_Abort+0x9a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008926:	2b80      	cmp	r3, #128	@ 0x80
 8008928:	d009      	beq.n	800893e <HAL_SAI_Abort+0x9a>
        {
          status = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008934:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b22      	cmp	r3, #34	@ 0x22
 8008948:	d11d      	bne.n	8008986 <HAL_SAI_Abort+0xe2>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008950:	2b00      	cmp	r3, #0
 8008952:	d018      	beq.n	8008986 <HAL_SAI_Abort+0xe2>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800895a:	4618      	mov	r0, r3
 800895c:	f7f9 fc54 	bl	8002208 <HAL_DMA_Abort>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00f      	beq.n	8008986 <HAL_SAI_Abort+0xe2>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800896c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896e:	2b80      	cmp	r3, #128	@ 0x80
 8008970:	d009      	beq.n	8008986 <HAL_SAI_Abort+0xe2>
        {
          status = HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800897c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2200      	movs	r2, #0
 800898c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008996:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0208 	orr.w	r2, r2, #8
 80089a6:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
	...

080089c4 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	4613      	mov	r3, r2
 80089d0:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d002      	beq.n	80089de <HAL_SAI_Receive_DMA+0x1a>
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e079      	b.n	8008ad6 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d172      	bne.n	8008ad4 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d101      	bne.n	80089fc <HAL_SAI_Receive_DMA+0x38>
 80089f8:	2302      	movs	r3, #2
 80089fa:	e06c      	b.n	8008ad6 <HAL_SAI_Receive_DMA+0x112>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	88fa      	ldrh	r2, [r7, #6]
 8008a16:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2222      	movs	r2, #34	@ 0x22
 8008a26:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a30:	4a2b      	ldr	r2, [pc, #172]	@ (8008ae0 <HAL_SAI_Receive_DMA+0x11c>)
 8008a32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ae4 <HAL_SAI_Receive_DMA+0x120>)
 8008a3c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a44:	4a28      	ldr	r2, [pc, #160]	@ (8008ae8 <HAL_SAI_Receive_DMA+0x124>)
 8008a46:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a4e:	2200      	movs	r2, #0
 8008a50:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	331c      	adds	r3, #28
 8008a5e:	4619      	mov	r1, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008a64:	461a      	mov	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8008a6c:	f7f9 f962 	bl	8001d34 <HAL_DMA_Start_IT>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d005      	beq.n	8008a82 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e029      	b.n	8008ad6 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008a82:	2100      	movs	r1, #0
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fa07 	bl	8008e98 <SAI_InterruptFlag>
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	691a      	ldr	r2, [r3, #16]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8008aa8:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d107      	bne.n	8008ac8 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008ac6:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e000      	b.n	8008ad6 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8008ad4:	2302      	movs	r3, #2
  }
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	08008fdd 	.word	0x08008fdd
 8008ae4:	08008f7d 	.word	0x08008f7d
 8008ae8:	08008ff9 	.word	0x08008ff9

08008aec <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f000 81a7 	beq.w	8008e50 <HAL_SAI_IRQHandler+0x364>
  {
    uint32_t itflags = hsai->Instance->SR;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f003 0308 	and.w	r3, r3, #8
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <HAL_SAI_IRQHandler+0x4e>
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f003 0308 	and.w	r3, r3, #8
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d005      	beq.n	8008b3a <HAL_SAI_IRQHandler+0x4e>
    {
      hsai->InterruptServiceRoutine(hsai);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	4798      	blx	r3
 8008b38:	e18a      	b.n	8008e50 <HAL_SAI_IRQHandler+0x364>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01e      	beq.n	8008b82 <HAL_SAI_IRQHandler+0x96>
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d019      	beq.n	8008b82 <HAL_SAI_IRQHandler+0x96>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2201      	movs	r2, #1
 8008b54:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b22      	cmp	r3, #34	@ 0x22
 8008b60:	d101      	bne.n	8008b66 <HAL_SAI_IRQHandler+0x7a>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <HAL_SAI_IRQHandler+0x7c>
 8008b66:	2302      	movs	r3, #2
 8008b68:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f982 	bl	8008e84 <HAL_SAI_ErrorCallback>
 8008b80:	e166      	b.n	8008e50 <HAL_SAI_IRQHandler+0x364>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d013      	beq.n	8008bb4 <HAL_SAI_IRQHandler+0xc8>
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00e      	beq.n	8008bb4 <HAL_SAI_IRQHandler+0xc8>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f000 8153 	beq.w	8008e50 <HAL_SAI_IRQHandler+0x364>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bb0:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8008bb2:	e14d      	b.n	8008e50 <HAL_SAI_IRQHandler+0x364>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d05b      	beq.n	8008c76 <HAL_SAI_IRQHandler+0x18a>
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f003 0320 	and.w	r3, r3, #32
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d056      	beq.n	8008c76 <HAL_SAI_IRQHandler+0x18a>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bd6:	f043 0204 	orr.w	r2, r3, #4
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d03e      	beq.n	8008c68 <HAL_SAI_IRQHandler+0x17c>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d018      	beq.n	8008c26 <HAL_SAI_IRQHandler+0x13a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bfa:	4a97      	ldr	r2, [pc, #604]	@ (8008e58 <HAL_SAI_IRQHandler+0x36c>)
 8008bfc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7f9 fe1d 	bl	8002844 <HAL_DMA_Abort_IT>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <HAL_SAI_IRQHandler+0x13a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c16:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f92f 	bl	8008e84 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 810a 	beq.w	8008e46 <HAL_SAI_IRQHandler+0x35a>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c38:	4a87      	ldr	r2, [pc, #540]	@ (8008e58 <HAL_SAI_IRQHandler+0x36c>)
 8008c3a:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7f9 fdfe 	bl	8002844 <HAL_DMA_Abort_IT>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 80fb 	beq.w	8008e46 <HAL_SAI_IRQHandler+0x35a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f90f 	bl	8008e84 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008c66:	e0ee      	b.n	8008e46 <HAL_SAI_IRQHandler+0x35a>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fe1b 	bl	80088a4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f908 	bl	8008e84 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008c74:	e0e7      	b.n	8008e46 <HAL_SAI_IRQHandler+0x35a>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d05b      	beq.n	8008d38 <HAL_SAI_IRQHandler+0x24c>
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d056      	beq.n	8008d38 <HAL_SAI_IRQHandler+0x24c>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2240      	movs	r2, #64	@ 0x40
 8008c90:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c98:	f043 0208 	orr.w	r2, r3, #8
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d03e      	beq.n	8008d2a <HAL_SAI_IRQHandler+0x23e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d018      	beq.n	8008ce8 <HAL_SAI_IRQHandler+0x1fc>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cbc:	4a66      	ldr	r2, [pc, #408]	@ (8008e58 <HAL_SAI_IRQHandler+0x36c>)
 8008cbe:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7f9 fdbc 	bl	8002844 <HAL_DMA_Abort_IT>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <HAL_SAI_IRQHandler+0x1fc>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cd8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f8ce 	bl	8008e84 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 80ab 	beq.w	8008e4a <HAL_SAI_IRQHandler+0x35e>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cfa:	4a57      	ldr	r2, [pc, #348]	@ (8008e58 <HAL_SAI_IRQHandler+0x36c>)
 8008cfc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7f9 fd9d 	bl	8002844 <HAL_DMA_Abort_IT>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 809c 	beq.w	8008e4a <HAL_SAI_IRQHandler+0x35e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f8ae 	bl	8008e84 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d28:	e08f      	b.n	8008e4a <HAL_SAI_IRQHandler+0x35e>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff fdba 	bl	80088a4 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f8a7 	bl	8008e84 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d36:	e088      	b.n	8008e4a <HAL_SAI_IRQHandler+0x35e>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f003 0304 	and.w	r3, r3, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d067      	beq.n	8008e12 <HAL_SAI_IRQHandler+0x326>
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f003 0304 	and.w	r3, r3, #4
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d062      	beq.n	8008e12 <HAL_SAI_IRQHandler+0x326>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2204      	movs	r2, #4
 8008d52:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d5a:	f043 0220 	orr.w	r2, r3, #32
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d03c      	beq.n	8008de8 <HAL_SAI_IRQHandler+0x2fc>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d018      	beq.n	8008daa <HAL_SAI_IRQHandler+0x2be>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d7e:	4a36      	ldr	r2, [pc, #216]	@ (8008e58 <HAL_SAI_IRQHandler+0x36c>)
 8008d80:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7f9 fd5b 	bl	8002844 <HAL_DMA_Abort_IT>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <HAL_SAI_IRQHandler+0x2be>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d9a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 f86d 	bl	8008e84 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d04c      	beq.n	8008e4e <HAL_SAI_IRQHandler+0x362>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dba:	4a27      	ldr	r2, [pc, #156]	@ (8008e58 <HAL_SAI_IRQHandler+0x36c>)
 8008dbc:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7f9 fd3d 	bl	8002844 <HAL_DMA_Abort_IT>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d03e      	beq.n	8008e4e <HAL_SAI_IRQHandler+0x362>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dd6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f84f 	bl	8008e84 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008de6:	e032      	b.n	8008e4e <HAL_SAI_IRQHandler+0x362>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2200      	movs	r2, #0
 8008dee:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008df8:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 f83a 	bl	8008e84 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e10:	e01d      	b.n	8008e4e <HAL_SAI_IRQHandler+0x362>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	f003 0310 	and.w	r3, r3, #16
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d019      	beq.n	8008e50 <HAL_SAI_IRQHandler+0x364>
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f003 0310 	and.w	r3, r3, #16
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d014      	beq.n	8008e50 <HAL_SAI_IRQHandler+0x364>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	2210      	movs	r2, #16
 8008e2c:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e34:	f043 0210 	orr.w	r2, r3, #16
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f820 	bl	8008e84 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8008e44:	e004      	b.n	8008e50 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e46:	bf00      	nop
 8008e48:	e002      	b.n	8008e50 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e4a:	bf00      	nop
 8008e4c:	e000      	b.n	8008e50 <HAL_SAI_IRQHandler+0x364>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8008e4e:	bf00      	nop
}
 8008e50:	bf00      	nop
 8008e52:	3718      	adds	r7, #24
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	08009057 	.word	0x08009057

08008e5c <HAL_SAI_RxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxCpltCallback could be implemented in the user file
   */
}
 8008e64:	bf00      	nop
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <HAL_SAI_RxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008ea8:	78fb      	ldrb	r3, [r7, #3]
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d103      	bne.n	8008eb6 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f043 0308 	orr.w	r3, r3, #8
 8008eb4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eba:	2b08      	cmp	r3, #8
 8008ebc:	d10b      	bne.n	8008ed6 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008ec2:	2b03      	cmp	r3, #3
 8008ec4:	d003      	beq.n	8008ece <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d103      	bne.n	8008ed6 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f043 0310 	orr.w	r3, r3, #16
 8008ed4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d003      	beq.n	8008ee6 <SAI_InterruptFlag+0x4e>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d104      	bne.n	8008ef0 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e003      	b.n	8008ef8 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f043 0304 	orr.w	r3, r3, #4
 8008ef6:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008f10:	4b18      	ldr	r3, [pc, #96]	@ (8008f74 <SAI_Disable+0x6c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a18      	ldr	r2, [pc, #96]	@ (8008f78 <SAI_Disable+0x70>)
 8008f16:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1a:	0b1b      	lsrs	r3, r3, #12
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008f32:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10a      	bne.n	8008f50 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008f40:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008f4e:	e009      	b.n	8008f64 <SAI_Disable+0x5c>
    }
    count--;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e7      	bne.n	8008f34 <SAI_Disable+0x2c>

  return status;
 8008f64:	7afb      	ldrb	r3, [r7, #11]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	24000000 	.word	0x24000000
 8008f78:	95cbec1b 	.word	0x95cbec1b

08008f7c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f88:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f92:	d01c      	beq.n	8008fce <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008fa2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008fac:	2100      	movs	r1, #0
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f7ff ff72 	bl	8008e98 <SAI_InterruptFlag>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	43d9      	mvns	r1, r3
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691a      	ldr	r2, [r3, #16]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	400a      	ands	r2, r1
 8008fc4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7ff ff44 	bl	8008e5c <HAL_SAI_RxCpltCallback>
#endif
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8008fea:	68f8      	ldr	r0, [r7, #12]
 8008fec:	f7ff ff40 	bl	8008e70 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8008ff0:	bf00      	nop
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009004:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fa fd8c 	bl	8003b24 <HAL_DMA_GetError>
 800900c:	4603      	mov	r3, r0
 800900e:	2b02      	cmp	r3, #2
 8009010:	d01d      	beq.n	800904e <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009018:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009030:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff ff68 	bl	8008f08 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8009048:	68f8      	ldr	r0, [r7, #12]
 800904a:	f7ff ff1b 	bl	8008e84 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800904e:	bf00      	nop
 8009050:	3710      	adds	r7, #16
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b084      	sub	sp, #16
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009062:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009072:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2200      	movs	r2, #0
 800907a:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009084:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800908c:	2b20      	cmp	r3, #32
 800908e:	d00a      	beq.n	80090a6 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8009090:	68f8      	ldr	r0, [r7, #12]
 8009092:	f7ff ff39 	bl	8008f08 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f042 0208 	orr.w	r2, r2, #8
 80090a4:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f7ff fee4 	bl	8008e84 <HAL_SAI_ErrorCallback>
#endif
}
 80090bc:	bf00      	nop
 80090be:	3710      	adds	r7, #16
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}

080090c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e042      	b.n	800915c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d106      	bne.n	80090ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7f7 fe73 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2224      	movs	r2, #36	@ 0x24
 80090f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0201 	bic.w	r2, r2, #1
 8009104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800910a:	2b00      	cmp	r3, #0
 800910c:	d002      	beq.n	8009114 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fe1e 	bl	8009d50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f8b3 	bl	8009280 <UART_SetConfig>
 800911a:	4603      	mov	r3, r0
 800911c:	2b01      	cmp	r3, #1
 800911e:	d101      	bne.n	8009124 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e01b      	b.n	800915c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	685a      	ldr	r2, [r3, #4]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689a      	ldr	r2, [r3, #8]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 fe9d 	bl	8009e94 <UART_CheckIdleState>
 800915a:	4603      	mov	r3, r0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3708      	adds	r7, #8
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08a      	sub	sp, #40	@ 0x28
 8009168:	af02      	add	r7, sp, #8
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	4613      	mov	r3, r2
 8009172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800917a:	2b20      	cmp	r3, #32
 800917c:	d17b      	bne.n	8009276 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d002      	beq.n	800918a <HAL_UART_Transmit+0x26>
 8009184:	88fb      	ldrh	r3, [r7, #6]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e074      	b.n	8009278 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	2200      	movs	r2, #0
 8009192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2221      	movs	r2, #33	@ 0x21
 800919a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800919e:	f7f8 f8a9 	bl	80012f4 <HAL_GetTick>
 80091a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	88fa      	ldrh	r2, [r7, #6]
 80091a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	88fa      	ldrh	r2, [r7, #6]
 80091b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091bc:	d108      	bne.n	80091d0 <HAL_UART_Transmit+0x6c>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d104      	bne.n	80091d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	61bb      	str	r3, [r7, #24]
 80091ce:	e003      	b.n	80091d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091d8:	e030      	b.n	800923c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2200      	movs	r2, #0
 80091e2:	2180      	movs	r1, #128	@ 0x80
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 feff 	bl	8009fe8 <UART_WaitOnFlagUntilTimeout>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d005      	beq.n	80091fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2220      	movs	r2, #32
 80091f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e03d      	b.n	8009278 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10b      	bne.n	800921a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009210:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	3302      	adds	r3, #2
 8009216:	61bb      	str	r3, [r7, #24]
 8009218:	e007      	b.n	800922a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	781a      	ldrb	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	3301      	adds	r3, #1
 8009228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009230:	b29b      	uxth	r3, r3
 8009232:	3b01      	subs	r3, #1
 8009234:	b29a      	uxth	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009242:	b29b      	uxth	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d1c8      	bne.n	80091da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	2200      	movs	r2, #0
 8009250:	2140      	movs	r1, #64	@ 0x40
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 fec8 	bl	8009fe8 <UART_WaitOnFlagUntilTimeout>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d005      	beq.n	800926a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2220      	movs	r2, #32
 8009262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e006      	b.n	8009278 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2220      	movs	r2, #32
 800926e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	e000      	b.n	8009278 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009276:	2302      	movs	r3, #2
  }
}
 8009278:	4618      	mov	r0, r3
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009284:	b092      	sub	sp, #72	@ 0x48
 8009286:	af00      	add	r7, sp, #0
 8009288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800928a:	2300      	movs	r3, #0
 800928c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	689a      	ldr	r2, [r3, #8]
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	431a      	orrs	r2, r3
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	431a      	orrs	r2, r3
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	4bbe      	ldr	r3, [pc, #760]	@ (80095a8 <UART_SetConfig+0x328>)
 80092b0:	4013      	ands	r3, r2
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092b8:	430b      	orrs	r3, r1
 80092ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	699b      	ldr	r3, [r3, #24]
 80092d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4ab3      	ldr	r2, [pc, #716]	@ (80095ac <UART_SetConfig+0x32c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d004      	beq.n	80092ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092e8:	4313      	orrs	r3, r2
 80092ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	689a      	ldr	r2, [r3, #8]
 80092f2:	4baf      	ldr	r3, [pc, #700]	@ (80095b0 <UART_SetConfig+0x330>)
 80092f4:	4013      	ands	r3, r2
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80092fc:	430b      	orrs	r3, r1
 80092fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009306:	f023 010f 	bic.w	r1, r3, #15
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	430a      	orrs	r2, r1
 8009314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4aa6      	ldr	r2, [pc, #664]	@ (80095b4 <UART_SetConfig+0x334>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d177      	bne.n	8009410 <UART_SetConfig+0x190>
 8009320:	4ba5      	ldr	r3, [pc, #660]	@ (80095b8 <UART_SetConfig+0x338>)
 8009322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009328:	2b28      	cmp	r3, #40	@ 0x28
 800932a:	d86d      	bhi.n	8009408 <UART_SetConfig+0x188>
 800932c:	a201      	add	r2, pc, #4	@ (adr r2, 8009334 <UART_SetConfig+0xb4>)
 800932e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009332:	bf00      	nop
 8009334:	080093d9 	.word	0x080093d9
 8009338:	08009409 	.word	0x08009409
 800933c:	08009409 	.word	0x08009409
 8009340:	08009409 	.word	0x08009409
 8009344:	08009409 	.word	0x08009409
 8009348:	08009409 	.word	0x08009409
 800934c:	08009409 	.word	0x08009409
 8009350:	08009409 	.word	0x08009409
 8009354:	080093e1 	.word	0x080093e1
 8009358:	08009409 	.word	0x08009409
 800935c:	08009409 	.word	0x08009409
 8009360:	08009409 	.word	0x08009409
 8009364:	08009409 	.word	0x08009409
 8009368:	08009409 	.word	0x08009409
 800936c:	08009409 	.word	0x08009409
 8009370:	08009409 	.word	0x08009409
 8009374:	080093e9 	.word	0x080093e9
 8009378:	08009409 	.word	0x08009409
 800937c:	08009409 	.word	0x08009409
 8009380:	08009409 	.word	0x08009409
 8009384:	08009409 	.word	0x08009409
 8009388:	08009409 	.word	0x08009409
 800938c:	08009409 	.word	0x08009409
 8009390:	08009409 	.word	0x08009409
 8009394:	080093f1 	.word	0x080093f1
 8009398:	08009409 	.word	0x08009409
 800939c:	08009409 	.word	0x08009409
 80093a0:	08009409 	.word	0x08009409
 80093a4:	08009409 	.word	0x08009409
 80093a8:	08009409 	.word	0x08009409
 80093ac:	08009409 	.word	0x08009409
 80093b0:	08009409 	.word	0x08009409
 80093b4:	080093f9 	.word	0x080093f9
 80093b8:	08009409 	.word	0x08009409
 80093bc:	08009409 	.word	0x08009409
 80093c0:	08009409 	.word	0x08009409
 80093c4:	08009409 	.word	0x08009409
 80093c8:	08009409 	.word	0x08009409
 80093cc:	08009409 	.word	0x08009409
 80093d0:	08009409 	.word	0x08009409
 80093d4:	08009401 	.word	0x08009401
 80093d8:	2301      	movs	r3, #1
 80093da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093de:	e222      	b.n	8009826 <UART_SetConfig+0x5a6>
 80093e0:	2304      	movs	r3, #4
 80093e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093e6:	e21e      	b.n	8009826 <UART_SetConfig+0x5a6>
 80093e8:	2308      	movs	r3, #8
 80093ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ee:	e21a      	b.n	8009826 <UART_SetConfig+0x5a6>
 80093f0:	2310      	movs	r3, #16
 80093f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093f6:	e216      	b.n	8009826 <UART_SetConfig+0x5a6>
 80093f8:	2320      	movs	r3, #32
 80093fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093fe:	e212      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009400:	2340      	movs	r3, #64	@ 0x40
 8009402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009406:	e20e      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009408:	2380      	movs	r3, #128	@ 0x80
 800940a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800940e:	e20a      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a69      	ldr	r2, [pc, #420]	@ (80095bc <UART_SetConfig+0x33c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d130      	bne.n	800947c <UART_SetConfig+0x1fc>
 800941a:	4b67      	ldr	r3, [pc, #412]	@ (80095b8 <UART_SetConfig+0x338>)
 800941c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800941e:	f003 0307 	and.w	r3, r3, #7
 8009422:	2b05      	cmp	r3, #5
 8009424:	d826      	bhi.n	8009474 <UART_SetConfig+0x1f4>
 8009426:	a201      	add	r2, pc, #4	@ (adr r2, 800942c <UART_SetConfig+0x1ac>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	08009445 	.word	0x08009445
 8009430:	0800944d 	.word	0x0800944d
 8009434:	08009455 	.word	0x08009455
 8009438:	0800945d 	.word	0x0800945d
 800943c:	08009465 	.word	0x08009465
 8009440:	0800946d 	.word	0x0800946d
 8009444:	2300      	movs	r3, #0
 8009446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800944a:	e1ec      	b.n	8009826 <UART_SetConfig+0x5a6>
 800944c:	2304      	movs	r3, #4
 800944e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009452:	e1e8      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009454:	2308      	movs	r3, #8
 8009456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800945a:	e1e4      	b.n	8009826 <UART_SetConfig+0x5a6>
 800945c:	2310      	movs	r3, #16
 800945e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009462:	e1e0      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009464:	2320      	movs	r3, #32
 8009466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800946a:	e1dc      	b.n	8009826 <UART_SetConfig+0x5a6>
 800946c:	2340      	movs	r3, #64	@ 0x40
 800946e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009472:	e1d8      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009474:	2380      	movs	r3, #128	@ 0x80
 8009476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800947a:	e1d4      	b.n	8009826 <UART_SetConfig+0x5a6>
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a4f      	ldr	r2, [pc, #316]	@ (80095c0 <UART_SetConfig+0x340>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d130      	bne.n	80094e8 <UART_SetConfig+0x268>
 8009486:	4b4c      	ldr	r3, [pc, #304]	@ (80095b8 <UART_SetConfig+0x338>)
 8009488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800948a:	f003 0307 	and.w	r3, r3, #7
 800948e:	2b05      	cmp	r3, #5
 8009490:	d826      	bhi.n	80094e0 <UART_SetConfig+0x260>
 8009492:	a201      	add	r2, pc, #4	@ (adr r2, 8009498 <UART_SetConfig+0x218>)
 8009494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009498:	080094b1 	.word	0x080094b1
 800949c:	080094b9 	.word	0x080094b9
 80094a0:	080094c1 	.word	0x080094c1
 80094a4:	080094c9 	.word	0x080094c9
 80094a8:	080094d1 	.word	0x080094d1
 80094ac:	080094d9 	.word	0x080094d9
 80094b0:	2300      	movs	r3, #0
 80094b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094b6:	e1b6      	b.n	8009826 <UART_SetConfig+0x5a6>
 80094b8:	2304      	movs	r3, #4
 80094ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094be:	e1b2      	b.n	8009826 <UART_SetConfig+0x5a6>
 80094c0:	2308      	movs	r3, #8
 80094c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c6:	e1ae      	b.n	8009826 <UART_SetConfig+0x5a6>
 80094c8:	2310      	movs	r3, #16
 80094ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ce:	e1aa      	b.n	8009826 <UART_SetConfig+0x5a6>
 80094d0:	2320      	movs	r3, #32
 80094d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d6:	e1a6      	b.n	8009826 <UART_SetConfig+0x5a6>
 80094d8:	2340      	movs	r3, #64	@ 0x40
 80094da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094de:	e1a2      	b.n	8009826 <UART_SetConfig+0x5a6>
 80094e0:	2380      	movs	r3, #128	@ 0x80
 80094e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e6:	e19e      	b.n	8009826 <UART_SetConfig+0x5a6>
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a35      	ldr	r2, [pc, #212]	@ (80095c4 <UART_SetConfig+0x344>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d130      	bne.n	8009554 <UART_SetConfig+0x2d4>
 80094f2:	4b31      	ldr	r3, [pc, #196]	@ (80095b8 <UART_SetConfig+0x338>)
 80094f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b05      	cmp	r3, #5
 80094fc:	d826      	bhi.n	800954c <UART_SetConfig+0x2cc>
 80094fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009504 <UART_SetConfig+0x284>)
 8009500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009504:	0800951d 	.word	0x0800951d
 8009508:	08009525 	.word	0x08009525
 800950c:	0800952d 	.word	0x0800952d
 8009510:	08009535 	.word	0x08009535
 8009514:	0800953d 	.word	0x0800953d
 8009518:	08009545 	.word	0x08009545
 800951c:	2300      	movs	r3, #0
 800951e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009522:	e180      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009524:	2304      	movs	r3, #4
 8009526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952a:	e17c      	b.n	8009826 <UART_SetConfig+0x5a6>
 800952c:	2308      	movs	r3, #8
 800952e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009532:	e178      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009534:	2310      	movs	r3, #16
 8009536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953a:	e174      	b.n	8009826 <UART_SetConfig+0x5a6>
 800953c:	2320      	movs	r3, #32
 800953e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009542:	e170      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009544:	2340      	movs	r3, #64	@ 0x40
 8009546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954a:	e16c      	b.n	8009826 <UART_SetConfig+0x5a6>
 800954c:	2380      	movs	r3, #128	@ 0x80
 800954e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009552:	e168      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a1b      	ldr	r2, [pc, #108]	@ (80095c8 <UART_SetConfig+0x348>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d142      	bne.n	80095e4 <UART_SetConfig+0x364>
 800955e:	4b16      	ldr	r3, [pc, #88]	@ (80095b8 <UART_SetConfig+0x338>)
 8009560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009562:	f003 0307 	and.w	r3, r3, #7
 8009566:	2b05      	cmp	r3, #5
 8009568:	d838      	bhi.n	80095dc <UART_SetConfig+0x35c>
 800956a:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <UART_SetConfig+0x2f0>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	08009589 	.word	0x08009589
 8009574:	08009591 	.word	0x08009591
 8009578:	08009599 	.word	0x08009599
 800957c:	080095a1 	.word	0x080095a1
 8009580:	080095cd 	.word	0x080095cd
 8009584:	080095d5 	.word	0x080095d5
 8009588:	2300      	movs	r3, #0
 800958a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800958e:	e14a      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009590:	2304      	movs	r3, #4
 8009592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009596:	e146      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009598:	2308      	movs	r3, #8
 800959a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959e:	e142      	b.n	8009826 <UART_SetConfig+0x5a6>
 80095a0:	2310      	movs	r3, #16
 80095a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a6:	e13e      	b.n	8009826 <UART_SetConfig+0x5a6>
 80095a8:	cfff69f3 	.word	0xcfff69f3
 80095ac:	58000c00 	.word	0x58000c00
 80095b0:	11fff4ff 	.word	0x11fff4ff
 80095b4:	40011000 	.word	0x40011000
 80095b8:	58024400 	.word	0x58024400
 80095bc:	40004400 	.word	0x40004400
 80095c0:	40004800 	.word	0x40004800
 80095c4:	40004c00 	.word	0x40004c00
 80095c8:	40005000 	.word	0x40005000
 80095cc:	2320      	movs	r3, #32
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095d2:	e128      	b.n	8009826 <UART_SetConfig+0x5a6>
 80095d4:	2340      	movs	r3, #64	@ 0x40
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095da:	e124      	b.n	8009826 <UART_SetConfig+0x5a6>
 80095dc:	2380      	movs	r3, #128	@ 0x80
 80095de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095e2:	e120      	b.n	8009826 <UART_SetConfig+0x5a6>
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4acb      	ldr	r2, [pc, #812]	@ (8009918 <UART_SetConfig+0x698>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d176      	bne.n	80096dc <UART_SetConfig+0x45c>
 80095ee:	4bcb      	ldr	r3, [pc, #812]	@ (800991c <UART_SetConfig+0x69c>)
 80095f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80095f6:	2b28      	cmp	r3, #40	@ 0x28
 80095f8:	d86c      	bhi.n	80096d4 <UART_SetConfig+0x454>
 80095fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009600 <UART_SetConfig+0x380>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	080096a5 	.word	0x080096a5
 8009604:	080096d5 	.word	0x080096d5
 8009608:	080096d5 	.word	0x080096d5
 800960c:	080096d5 	.word	0x080096d5
 8009610:	080096d5 	.word	0x080096d5
 8009614:	080096d5 	.word	0x080096d5
 8009618:	080096d5 	.word	0x080096d5
 800961c:	080096d5 	.word	0x080096d5
 8009620:	080096ad 	.word	0x080096ad
 8009624:	080096d5 	.word	0x080096d5
 8009628:	080096d5 	.word	0x080096d5
 800962c:	080096d5 	.word	0x080096d5
 8009630:	080096d5 	.word	0x080096d5
 8009634:	080096d5 	.word	0x080096d5
 8009638:	080096d5 	.word	0x080096d5
 800963c:	080096d5 	.word	0x080096d5
 8009640:	080096b5 	.word	0x080096b5
 8009644:	080096d5 	.word	0x080096d5
 8009648:	080096d5 	.word	0x080096d5
 800964c:	080096d5 	.word	0x080096d5
 8009650:	080096d5 	.word	0x080096d5
 8009654:	080096d5 	.word	0x080096d5
 8009658:	080096d5 	.word	0x080096d5
 800965c:	080096d5 	.word	0x080096d5
 8009660:	080096bd 	.word	0x080096bd
 8009664:	080096d5 	.word	0x080096d5
 8009668:	080096d5 	.word	0x080096d5
 800966c:	080096d5 	.word	0x080096d5
 8009670:	080096d5 	.word	0x080096d5
 8009674:	080096d5 	.word	0x080096d5
 8009678:	080096d5 	.word	0x080096d5
 800967c:	080096d5 	.word	0x080096d5
 8009680:	080096c5 	.word	0x080096c5
 8009684:	080096d5 	.word	0x080096d5
 8009688:	080096d5 	.word	0x080096d5
 800968c:	080096d5 	.word	0x080096d5
 8009690:	080096d5 	.word	0x080096d5
 8009694:	080096d5 	.word	0x080096d5
 8009698:	080096d5 	.word	0x080096d5
 800969c:	080096d5 	.word	0x080096d5
 80096a0:	080096cd 	.word	0x080096cd
 80096a4:	2301      	movs	r3, #1
 80096a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096aa:	e0bc      	b.n	8009826 <UART_SetConfig+0x5a6>
 80096ac:	2304      	movs	r3, #4
 80096ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b2:	e0b8      	b.n	8009826 <UART_SetConfig+0x5a6>
 80096b4:	2308      	movs	r3, #8
 80096b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ba:	e0b4      	b.n	8009826 <UART_SetConfig+0x5a6>
 80096bc:	2310      	movs	r3, #16
 80096be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c2:	e0b0      	b.n	8009826 <UART_SetConfig+0x5a6>
 80096c4:	2320      	movs	r3, #32
 80096c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096ca:	e0ac      	b.n	8009826 <UART_SetConfig+0x5a6>
 80096cc:	2340      	movs	r3, #64	@ 0x40
 80096ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096d2:	e0a8      	b.n	8009826 <UART_SetConfig+0x5a6>
 80096d4:	2380      	movs	r3, #128	@ 0x80
 80096d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096da:	e0a4      	b.n	8009826 <UART_SetConfig+0x5a6>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a8f      	ldr	r2, [pc, #572]	@ (8009920 <UART_SetConfig+0x6a0>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d130      	bne.n	8009748 <UART_SetConfig+0x4c8>
 80096e6:	4b8d      	ldr	r3, [pc, #564]	@ (800991c <UART_SetConfig+0x69c>)
 80096e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ea:	f003 0307 	and.w	r3, r3, #7
 80096ee:	2b05      	cmp	r3, #5
 80096f0:	d826      	bhi.n	8009740 <UART_SetConfig+0x4c0>
 80096f2:	a201      	add	r2, pc, #4	@ (adr r2, 80096f8 <UART_SetConfig+0x478>)
 80096f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f8:	08009711 	.word	0x08009711
 80096fc:	08009719 	.word	0x08009719
 8009700:	08009721 	.word	0x08009721
 8009704:	08009729 	.word	0x08009729
 8009708:	08009731 	.word	0x08009731
 800970c:	08009739 	.word	0x08009739
 8009710:	2300      	movs	r3, #0
 8009712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009716:	e086      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009718:	2304      	movs	r3, #4
 800971a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800971e:	e082      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009720:	2308      	movs	r3, #8
 8009722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009726:	e07e      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009728:	2310      	movs	r3, #16
 800972a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800972e:	e07a      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009730:	2320      	movs	r3, #32
 8009732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009736:	e076      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009738:	2340      	movs	r3, #64	@ 0x40
 800973a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800973e:	e072      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009740:	2380      	movs	r3, #128	@ 0x80
 8009742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009746:	e06e      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a75      	ldr	r2, [pc, #468]	@ (8009924 <UART_SetConfig+0x6a4>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d130      	bne.n	80097b4 <UART_SetConfig+0x534>
 8009752:	4b72      	ldr	r3, [pc, #456]	@ (800991c <UART_SetConfig+0x69c>)
 8009754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	2b05      	cmp	r3, #5
 800975c:	d826      	bhi.n	80097ac <UART_SetConfig+0x52c>
 800975e:	a201      	add	r2, pc, #4	@ (adr r2, 8009764 <UART_SetConfig+0x4e4>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	0800977d 	.word	0x0800977d
 8009768:	08009785 	.word	0x08009785
 800976c:	0800978d 	.word	0x0800978d
 8009770:	08009795 	.word	0x08009795
 8009774:	0800979d 	.word	0x0800979d
 8009778:	080097a5 	.word	0x080097a5
 800977c:	2300      	movs	r3, #0
 800977e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009782:	e050      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009784:	2304      	movs	r3, #4
 8009786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978a:	e04c      	b.n	8009826 <UART_SetConfig+0x5a6>
 800978c:	2308      	movs	r3, #8
 800978e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009792:	e048      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009794:	2310      	movs	r3, #16
 8009796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979a:	e044      	b.n	8009826 <UART_SetConfig+0x5a6>
 800979c:	2320      	movs	r3, #32
 800979e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a2:	e040      	b.n	8009826 <UART_SetConfig+0x5a6>
 80097a4:	2340      	movs	r3, #64	@ 0x40
 80097a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097aa:	e03c      	b.n	8009826 <UART_SetConfig+0x5a6>
 80097ac:	2380      	movs	r3, #128	@ 0x80
 80097ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b2:	e038      	b.n	8009826 <UART_SetConfig+0x5a6>
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a5b      	ldr	r2, [pc, #364]	@ (8009928 <UART_SetConfig+0x6a8>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d130      	bne.n	8009820 <UART_SetConfig+0x5a0>
 80097be:	4b57      	ldr	r3, [pc, #348]	@ (800991c <UART_SetConfig+0x69c>)
 80097c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c2:	f003 0307 	and.w	r3, r3, #7
 80097c6:	2b05      	cmp	r3, #5
 80097c8:	d826      	bhi.n	8009818 <UART_SetConfig+0x598>
 80097ca:	a201      	add	r2, pc, #4	@ (adr r2, 80097d0 <UART_SetConfig+0x550>)
 80097cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d0:	080097e9 	.word	0x080097e9
 80097d4:	080097f1 	.word	0x080097f1
 80097d8:	080097f9 	.word	0x080097f9
 80097dc:	08009801 	.word	0x08009801
 80097e0:	08009809 	.word	0x08009809
 80097e4:	08009811 	.word	0x08009811
 80097e8:	2302      	movs	r3, #2
 80097ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ee:	e01a      	b.n	8009826 <UART_SetConfig+0x5a6>
 80097f0:	2304      	movs	r3, #4
 80097f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097f6:	e016      	b.n	8009826 <UART_SetConfig+0x5a6>
 80097f8:	2308      	movs	r3, #8
 80097fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fe:	e012      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009800:	2310      	movs	r3, #16
 8009802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009806:	e00e      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009808:	2320      	movs	r3, #32
 800980a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980e:	e00a      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009810:	2340      	movs	r3, #64	@ 0x40
 8009812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009816:	e006      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009818:	2380      	movs	r3, #128	@ 0x80
 800981a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981e:	e002      	b.n	8009826 <UART_SetConfig+0x5a6>
 8009820:	2380      	movs	r3, #128	@ 0x80
 8009822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a3f      	ldr	r2, [pc, #252]	@ (8009928 <UART_SetConfig+0x6a8>)
 800982c:	4293      	cmp	r3, r2
 800982e:	f040 80f8 	bne.w	8009a22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009832:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009836:	2b20      	cmp	r3, #32
 8009838:	dc46      	bgt.n	80098c8 <UART_SetConfig+0x648>
 800983a:	2b02      	cmp	r3, #2
 800983c:	f2c0 8082 	blt.w	8009944 <UART_SetConfig+0x6c4>
 8009840:	3b02      	subs	r3, #2
 8009842:	2b1e      	cmp	r3, #30
 8009844:	d87e      	bhi.n	8009944 <UART_SetConfig+0x6c4>
 8009846:	a201      	add	r2, pc, #4	@ (adr r2, 800984c <UART_SetConfig+0x5cc>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	080098cf 	.word	0x080098cf
 8009850:	08009945 	.word	0x08009945
 8009854:	080098d7 	.word	0x080098d7
 8009858:	08009945 	.word	0x08009945
 800985c:	08009945 	.word	0x08009945
 8009860:	08009945 	.word	0x08009945
 8009864:	080098e7 	.word	0x080098e7
 8009868:	08009945 	.word	0x08009945
 800986c:	08009945 	.word	0x08009945
 8009870:	08009945 	.word	0x08009945
 8009874:	08009945 	.word	0x08009945
 8009878:	08009945 	.word	0x08009945
 800987c:	08009945 	.word	0x08009945
 8009880:	08009945 	.word	0x08009945
 8009884:	080098f7 	.word	0x080098f7
 8009888:	08009945 	.word	0x08009945
 800988c:	08009945 	.word	0x08009945
 8009890:	08009945 	.word	0x08009945
 8009894:	08009945 	.word	0x08009945
 8009898:	08009945 	.word	0x08009945
 800989c:	08009945 	.word	0x08009945
 80098a0:	08009945 	.word	0x08009945
 80098a4:	08009945 	.word	0x08009945
 80098a8:	08009945 	.word	0x08009945
 80098ac:	08009945 	.word	0x08009945
 80098b0:	08009945 	.word	0x08009945
 80098b4:	08009945 	.word	0x08009945
 80098b8:	08009945 	.word	0x08009945
 80098bc:	08009945 	.word	0x08009945
 80098c0:	08009945 	.word	0x08009945
 80098c4:	08009937 	.word	0x08009937
 80098c8:	2b40      	cmp	r3, #64	@ 0x40
 80098ca:	d037      	beq.n	800993c <UART_SetConfig+0x6bc>
 80098cc:	e03a      	b.n	8009944 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80098ce:	f7fd ffcb 	bl	8007868 <HAL_RCCEx_GetD3PCLK1Freq>
 80098d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80098d4:	e03c      	b.n	8009950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fd ffda 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80098e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e4:	e034      	b.n	8009950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098e6:	f107 0318 	add.w	r3, r7, #24
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe f926 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098f4:	e02c      	b.n	8009950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098f6:	4b09      	ldr	r3, [pc, #36]	@ (800991c <UART_SetConfig+0x69c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0320 	and.w	r3, r3, #32
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d016      	beq.n	8009930 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009902:	4b06      	ldr	r3, [pc, #24]	@ (800991c <UART_SetConfig+0x69c>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	08db      	lsrs	r3, r3, #3
 8009908:	f003 0303 	and.w	r3, r3, #3
 800990c:	4a07      	ldr	r2, [pc, #28]	@ (800992c <UART_SetConfig+0x6ac>)
 800990e:	fa22 f303 	lsr.w	r3, r2, r3
 8009912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009914:	e01c      	b.n	8009950 <UART_SetConfig+0x6d0>
 8009916:	bf00      	nop
 8009918:	40011400 	.word	0x40011400
 800991c:	58024400 	.word	0x58024400
 8009920:	40007800 	.word	0x40007800
 8009924:	40007c00 	.word	0x40007c00
 8009928:	58000c00 	.word	0x58000c00
 800992c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009930:	4b9d      	ldr	r3, [pc, #628]	@ (8009ba8 <UART_SetConfig+0x928>)
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009934:	e00c      	b.n	8009950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009936:	4b9d      	ldr	r3, [pc, #628]	@ (8009bac <UART_SetConfig+0x92c>)
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800993a:	e009      	b.n	8009950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800993c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009942:	e005      	b.n	8009950 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800994e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 81de 	beq.w	8009d14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800995c:	4a94      	ldr	r2, [pc, #592]	@ (8009bb0 <UART_SetConfig+0x930>)
 800995e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009962:	461a      	mov	r2, r3
 8009964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009966:	fbb3 f3f2 	udiv	r3, r3, r2
 800996a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	685a      	ldr	r2, [r3, #4]
 8009970:	4613      	mov	r3, r2
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	4413      	add	r3, r2
 8009976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009978:	429a      	cmp	r2, r3
 800997a:	d305      	bcc.n	8009988 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009984:	429a      	cmp	r2, r3
 8009986:	d903      	bls.n	8009990 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800998e:	e1c1      	b.n	8009d14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009992:	2200      	movs	r2, #0
 8009994:	60bb      	str	r3, [r7, #8]
 8009996:	60fa      	str	r2, [r7, #12]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800999c:	4a84      	ldr	r2, [pc, #528]	@ (8009bb0 <UART_SetConfig+0x930>)
 800999e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2200      	movs	r2, #0
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	607a      	str	r2, [r7, #4]
 80099aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80099b2:	f7f6 fced 	bl	8000390 <__aeabi_uldivmod>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4610      	mov	r0, r2
 80099bc:	4619      	mov	r1, r3
 80099be:	f04f 0200 	mov.w	r2, #0
 80099c2:	f04f 0300 	mov.w	r3, #0
 80099c6:	020b      	lsls	r3, r1, #8
 80099c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099cc:	0202      	lsls	r2, r0, #8
 80099ce:	6979      	ldr	r1, [r7, #20]
 80099d0:	6849      	ldr	r1, [r1, #4]
 80099d2:	0849      	lsrs	r1, r1, #1
 80099d4:	2000      	movs	r0, #0
 80099d6:	460c      	mov	r4, r1
 80099d8:	4605      	mov	r5, r0
 80099da:	eb12 0804 	adds.w	r8, r2, r4
 80099de:	eb43 0905 	adc.w	r9, r3, r5
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	469a      	mov	sl, r3
 80099ea:	4693      	mov	fp, r2
 80099ec:	4652      	mov	r2, sl
 80099ee:	465b      	mov	r3, fp
 80099f0:	4640      	mov	r0, r8
 80099f2:	4649      	mov	r1, r9
 80099f4:	f7f6 fccc 	bl	8000390 <__aeabi_uldivmod>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4613      	mov	r3, r2
 80099fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a06:	d308      	bcc.n	8009a1a <UART_SetConfig+0x79a>
 8009a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a0e:	d204      	bcs.n	8009a1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009a16:	60da      	str	r2, [r3, #12]
 8009a18:	e17c      	b.n	8009d14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a20:	e178      	b.n	8009d14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a2a:	f040 80c5 	bne.w	8009bb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009a2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	dc48      	bgt.n	8009ac8 <UART_SetConfig+0x848>
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	db7b      	blt.n	8009b32 <UART_SetConfig+0x8b2>
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d879      	bhi.n	8009b32 <UART_SetConfig+0x8b2>
 8009a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a44 <UART_SetConfig+0x7c4>)
 8009a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a44:	08009acf 	.word	0x08009acf
 8009a48:	08009ad7 	.word	0x08009ad7
 8009a4c:	08009b33 	.word	0x08009b33
 8009a50:	08009b33 	.word	0x08009b33
 8009a54:	08009adf 	.word	0x08009adf
 8009a58:	08009b33 	.word	0x08009b33
 8009a5c:	08009b33 	.word	0x08009b33
 8009a60:	08009b33 	.word	0x08009b33
 8009a64:	08009aef 	.word	0x08009aef
 8009a68:	08009b33 	.word	0x08009b33
 8009a6c:	08009b33 	.word	0x08009b33
 8009a70:	08009b33 	.word	0x08009b33
 8009a74:	08009b33 	.word	0x08009b33
 8009a78:	08009b33 	.word	0x08009b33
 8009a7c:	08009b33 	.word	0x08009b33
 8009a80:	08009b33 	.word	0x08009b33
 8009a84:	08009aff 	.word	0x08009aff
 8009a88:	08009b33 	.word	0x08009b33
 8009a8c:	08009b33 	.word	0x08009b33
 8009a90:	08009b33 	.word	0x08009b33
 8009a94:	08009b33 	.word	0x08009b33
 8009a98:	08009b33 	.word	0x08009b33
 8009a9c:	08009b33 	.word	0x08009b33
 8009aa0:	08009b33 	.word	0x08009b33
 8009aa4:	08009b33 	.word	0x08009b33
 8009aa8:	08009b33 	.word	0x08009b33
 8009aac:	08009b33 	.word	0x08009b33
 8009ab0:	08009b33 	.word	0x08009b33
 8009ab4:	08009b33 	.word	0x08009b33
 8009ab8:	08009b33 	.word	0x08009b33
 8009abc:	08009b33 	.word	0x08009b33
 8009ac0:	08009b33 	.word	0x08009b33
 8009ac4:	08009b25 	.word	0x08009b25
 8009ac8:	2b40      	cmp	r3, #64	@ 0x40
 8009aca:	d02e      	beq.n	8009b2a <UART_SetConfig+0x8aa>
 8009acc:	e031      	b.n	8009b32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ace:	f7fb fed5 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8009ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009ad4:	e033      	b.n	8009b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ad6:	f7fb fee7 	bl	80058a8 <HAL_RCC_GetPCLK2Freq>
 8009ada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009adc:	e02f      	b.n	8009b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fd fed6 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aec:	e027      	b.n	8009b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aee:	f107 0318 	add.w	r3, r7, #24
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fe f822 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009afc:	e01f      	b.n	8009b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009afe:	4b2d      	ldr	r3, [pc, #180]	@ (8009bb4 <UART_SetConfig+0x934>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f003 0320 	and.w	r3, r3, #32
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8009bb4 <UART_SetConfig+0x934>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	08db      	lsrs	r3, r3, #3
 8009b10:	f003 0303 	and.w	r3, r3, #3
 8009b14:	4a24      	ldr	r2, [pc, #144]	@ (8009ba8 <UART_SetConfig+0x928>)
 8009b16:	fa22 f303 	lsr.w	r3, r2, r3
 8009b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b1c:	e00f      	b.n	8009b3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009b1e:	4b22      	ldr	r3, [pc, #136]	@ (8009ba8 <UART_SetConfig+0x928>)
 8009b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b22:	e00c      	b.n	8009b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b24:	4b21      	ldr	r3, [pc, #132]	@ (8009bac <UART_SetConfig+0x92c>)
 8009b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b28:	e009      	b.n	8009b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b30:	e005      	b.n	8009b3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 80e7 	beq.w	8009d14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b4a:	4a19      	ldr	r2, [pc, #100]	@ (8009bb0 <UART_SetConfig+0x930>)
 8009b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b50:	461a      	mov	r2, r3
 8009b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b58:	005a      	lsls	r2, r3, #1
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	085b      	lsrs	r3, r3, #1
 8009b60:	441a      	add	r2, r3
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b6e:	2b0f      	cmp	r3, #15
 8009b70:	d916      	bls.n	8009ba0 <UART_SetConfig+0x920>
 8009b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b78:	d212      	bcs.n	8009ba0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	f023 030f 	bic.w	r3, r3, #15
 8009b82:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b86:	085b      	lsrs	r3, r3, #1
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	f003 0307 	and.w	r3, r3, #7
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009b92:	4313      	orrs	r3, r2
 8009b94:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009b9c:	60da      	str	r2, [r3, #12]
 8009b9e:	e0b9      	b.n	8009d14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009ba6:	e0b5      	b.n	8009d14 <UART_SetConfig+0xa94>
 8009ba8:	03d09000 	.word	0x03d09000
 8009bac:	003d0900 	.word	0x003d0900
 8009bb0:	0800cfa4 	.word	0x0800cfa4
 8009bb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009bb8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009bbc:	2b20      	cmp	r3, #32
 8009bbe:	dc49      	bgt.n	8009c54 <UART_SetConfig+0x9d4>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	db7c      	blt.n	8009cbe <UART_SetConfig+0xa3e>
 8009bc4:	2b20      	cmp	r3, #32
 8009bc6:	d87a      	bhi.n	8009cbe <UART_SetConfig+0xa3e>
 8009bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8009bd0 <UART_SetConfig+0x950>)
 8009bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bce:	bf00      	nop
 8009bd0:	08009c5b 	.word	0x08009c5b
 8009bd4:	08009c63 	.word	0x08009c63
 8009bd8:	08009cbf 	.word	0x08009cbf
 8009bdc:	08009cbf 	.word	0x08009cbf
 8009be0:	08009c6b 	.word	0x08009c6b
 8009be4:	08009cbf 	.word	0x08009cbf
 8009be8:	08009cbf 	.word	0x08009cbf
 8009bec:	08009cbf 	.word	0x08009cbf
 8009bf0:	08009c7b 	.word	0x08009c7b
 8009bf4:	08009cbf 	.word	0x08009cbf
 8009bf8:	08009cbf 	.word	0x08009cbf
 8009bfc:	08009cbf 	.word	0x08009cbf
 8009c00:	08009cbf 	.word	0x08009cbf
 8009c04:	08009cbf 	.word	0x08009cbf
 8009c08:	08009cbf 	.word	0x08009cbf
 8009c0c:	08009cbf 	.word	0x08009cbf
 8009c10:	08009c8b 	.word	0x08009c8b
 8009c14:	08009cbf 	.word	0x08009cbf
 8009c18:	08009cbf 	.word	0x08009cbf
 8009c1c:	08009cbf 	.word	0x08009cbf
 8009c20:	08009cbf 	.word	0x08009cbf
 8009c24:	08009cbf 	.word	0x08009cbf
 8009c28:	08009cbf 	.word	0x08009cbf
 8009c2c:	08009cbf 	.word	0x08009cbf
 8009c30:	08009cbf 	.word	0x08009cbf
 8009c34:	08009cbf 	.word	0x08009cbf
 8009c38:	08009cbf 	.word	0x08009cbf
 8009c3c:	08009cbf 	.word	0x08009cbf
 8009c40:	08009cbf 	.word	0x08009cbf
 8009c44:	08009cbf 	.word	0x08009cbf
 8009c48:	08009cbf 	.word	0x08009cbf
 8009c4c:	08009cbf 	.word	0x08009cbf
 8009c50:	08009cb1 	.word	0x08009cb1
 8009c54:	2b40      	cmp	r3, #64	@ 0x40
 8009c56:	d02e      	beq.n	8009cb6 <UART_SetConfig+0xa36>
 8009c58:	e031      	b.n	8009cbe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c5a:	f7fb fe0f 	bl	800587c <HAL_RCC_GetPCLK1Freq>
 8009c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c60:	e033      	b.n	8009cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c62:	f7fb fe21 	bl	80058a8 <HAL_RCC_GetPCLK2Freq>
 8009c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009c68:	e02f      	b.n	8009cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fd fe10 	bl	8007894 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c78:	e027      	b.n	8009cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c7a:	f107 0318 	add.w	r3, r7, #24
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fd ff5c 	bl	8007b3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c88:	e01f      	b.n	8009cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8009d40 <UART_SetConfig+0xac0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d009      	beq.n	8009caa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c96:	4b2a      	ldr	r3, [pc, #168]	@ (8009d40 <UART_SetConfig+0xac0>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	08db      	lsrs	r3, r3, #3
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	4a28      	ldr	r2, [pc, #160]	@ (8009d44 <UART_SetConfig+0xac4>)
 8009ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ca8:	e00f      	b.n	8009cca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009caa:	4b26      	ldr	r3, [pc, #152]	@ (8009d44 <UART_SetConfig+0xac4>)
 8009cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cae:	e00c      	b.n	8009cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cb0:	4b25      	ldr	r3, [pc, #148]	@ (8009d48 <UART_SetConfig+0xac8>)
 8009cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cb4:	e009      	b.n	8009cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cbc:	e005      	b.n	8009cca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009cc8:	bf00      	nop
    }

    if (pclk != 0U)
 8009cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d021      	beq.n	8009d14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8009d4c <UART_SetConfig+0xacc>)
 8009cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cde:	fbb3 f2f2 	udiv	r2, r3, r2
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	085b      	lsrs	r3, r3, #1
 8009ce8:	441a      	add	r2, r3
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cf6:	2b0f      	cmp	r3, #15
 8009cf8:	d909      	bls.n	8009d0e <UART_SetConfig+0xa8e>
 8009cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d00:	d205      	bcs.n	8009d0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d04:	b29a      	uxth	r2, r3
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	60da      	str	r2, [r3, #12]
 8009d0c:	e002      	b.n	8009d14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	2200      	movs	r2, #0
 8009d28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009d30:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3748      	adds	r7, #72	@ 0x48
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d3e:	bf00      	nop
 8009d40:	58024400 	.word	0x58024400
 8009d44:	03d09000 	.word	0x03d09000
 8009d48:	003d0900 	.word	0x003d0900
 8009d4c:	0800cfa4 	.word	0x0800cfa4

08009d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00a      	beq.n	8009d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	430a      	orrs	r2, r1
 8009d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00a      	beq.n	8009dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc2:	f003 0304 	and.w	r3, r3, #4
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00a      	beq.n	8009de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	430a      	orrs	r2, r1
 8009dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de4:	f003 0310 	and.w	r3, r3, #16
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00a      	beq.n	8009e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01a      	beq.n	8009e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e4e:	d10a      	bne.n	8009e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00a      	beq.n	8009e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	430a      	orrs	r2, r1
 8009e86:	605a      	str	r2, [r3, #4]
  }
}
 8009e88:	bf00      	nop
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b098      	sub	sp, #96	@ 0x60
 8009e98:	af02      	add	r7, sp, #8
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ea4:	f7f7 fa26 	bl	80012f4 <HAL_GetTick>
 8009ea8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b08      	cmp	r3, #8
 8009eb6:	d12f      	bne.n	8009f18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009eb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f88e 	bl	8009fe8 <UART_WaitOnFlagUntilTimeout>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d022      	beq.n	8009f18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eda:	e853 3f00 	ldrex	r3, [r3]
 8009ede:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	461a      	mov	r2, r3
 8009eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ef2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ef6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ef8:	e841 2300 	strex	r3, r2, [r1]
 8009efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d1e6      	bne.n	8009ed2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2220      	movs	r2, #32
 8009f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	e063      	b.n	8009fe0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 0304 	and.w	r3, r3, #4
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d149      	bne.n	8009fba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 f857 	bl	8009fe8 <UART_WaitOnFlagUntilTimeout>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d03c      	beq.n	8009fba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f48:	e853 3f00 	ldrex	r3, [r3]
 8009f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8009f4e:	6a3b      	ldr	r3, [r7, #32]
 8009f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e6      	bne.n	8009f40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3308      	adds	r3, #8
 8009f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	e853 3f00 	ldrex	r3, [r3]
 8009f80:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f023 0301 	bic.w	r3, r3, #1
 8009f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3308      	adds	r3, #8
 8009f90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f92:	61fa      	str	r2, [r7, #28]
 8009f94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f96:	69b9      	ldr	r1, [r7, #24]
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	e841 2300 	strex	r3, r2, [r1]
 8009f9e:	617b      	str	r3, [r7, #20]
   return(result);
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d1e5      	bne.n	8009f72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2220      	movs	r2, #32
 8009faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e012      	b.n	8009fe0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2220      	movs	r2, #32
 8009fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3758      	adds	r7, #88	@ 0x58
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	60f8      	str	r0, [r7, #12]
 8009ff0:	60b9      	str	r1, [r7, #8]
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ff8:	e04f      	b.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a000:	d04b      	beq.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a002:	f7f7 f977 	bl	80012f4 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	69ba      	ldr	r2, [r7, #24]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d302      	bcc.n	800a018 <UART_WaitOnFlagUntilTimeout+0x30>
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e04e      	b.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 0304 	and.w	r3, r3, #4
 800a026:	2b00      	cmp	r3, #0
 800a028:	d037      	beq.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	2b80      	cmp	r3, #128	@ 0x80
 800a02e:	d034      	beq.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b40      	cmp	r3, #64	@ 0x40
 800a034:	d031      	beq.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	f003 0308 	and.w	r3, r3, #8
 800a040:	2b08      	cmp	r3, #8
 800a042:	d110      	bne.n	800a066 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2208      	movs	r2, #8
 800a04a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f839 	bl	800a0c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2208      	movs	r2, #8
 800a056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	e029      	b.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	69db      	ldr	r3, [r3, #28]
 800a06c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a074:	d111      	bne.n	800a09a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a07e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	f000 f81f 	bl	800a0c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2220      	movs	r2, #32
 800a08a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e00f      	b.n	800a0ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	69da      	ldr	r2, [r3, #28]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	bf0c      	ite	eq
 800a0aa:	2301      	moveq	r3, #1
 800a0ac:	2300      	movne	r3, #0
 800a0ae:	b2db      	uxtb	r3, r3
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	79fb      	ldrb	r3, [r7, #7]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d0a0      	beq.n	8009ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
	...

0800a0c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b095      	sub	sp, #84	@ 0x54
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d4:	e853 3f00 	ldrex	r3, [r3]
 800a0d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a0f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a0f2:	e841 2300 	strex	r3, r2, [r1]
 800a0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1e6      	bne.n	800a0cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3308      	adds	r3, #8
 800a104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a106:	6a3b      	ldr	r3, [r7, #32]
 800a108:	e853 3f00 	ldrex	r3, [r3]
 800a10c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a10e:	69fa      	ldr	r2, [r7, #28]
 800a110:	4b1e      	ldr	r3, [pc, #120]	@ (800a18c <UART_EndRxTransfer+0xc8>)
 800a112:	4013      	ands	r3, r2
 800a114:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3308      	adds	r3, #8
 800a11c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a11e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a126:	e841 2300 	strex	r3, r2, [r1]
 800a12a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d1e5      	bne.n	800a0fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a136:	2b01      	cmp	r3, #1
 800a138:	d118      	bne.n	800a16c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	e853 3f00 	ldrex	r3, [r3]
 800a146:	60bb      	str	r3, [r7, #8]
   return(result);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	f023 0310 	bic.w	r3, r3, #16
 800a14e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	461a      	mov	r2, r3
 800a156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a158:	61bb      	str	r3, [r7, #24]
 800a15a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a15c:	6979      	ldr	r1, [r7, #20]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	e841 2300 	strex	r3, r2, [r1]
 800a164:	613b      	str	r3, [r7, #16]
   return(result);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1e6      	bne.n	800a13a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2220      	movs	r2, #32
 800a170:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a180:	bf00      	nop
 800a182:	3754      	adds	r7, #84	@ 0x54
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	effffffe 	.word	0xeffffffe

0800a190 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d101      	bne.n	800a1a6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	e027      	b.n	800a1f6 <HAL_UARTEx_DisableFifoMode+0x66>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2224      	movs	r2, #36	@ 0x24
 800a1b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f022 0201 	bic.w	r2, r2, #1
 800a1cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a1d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a212:	2b01      	cmp	r3, #1
 800a214:	d101      	bne.n	800a21a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a216:	2302      	movs	r3, #2
 800a218:	e02d      	b.n	800a276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2224      	movs	r2, #36	@ 0x24
 800a226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0201 	bic.w	r2, r2, #1
 800a240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	683a      	ldr	r2, [r7, #0]
 800a252:	430a      	orrs	r2, r1
 800a254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f850 	bl	800a2fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2220      	movs	r2, #32
 800a268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a274:	2300      	movs	r3, #0
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d101      	bne.n	800a296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a292:	2302      	movs	r3, #2
 800a294:	e02d      	b.n	800a2f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2224      	movs	r2, #36	@ 0x24
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f022 0201 	bic.w	r2, r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	430a      	orrs	r2, r1
 800a2d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f812 	bl	800a2fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3710      	adds	r7, #16
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
	...

0800a2fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d108      	bne.n	800a31e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a31c:	e031      	b.n	800a382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a31e:	2310      	movs	r3, #16
 800a320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a322:	2310      	movs	r3, #16
 800a324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	0e5b      	lsrs	r3, r3, #25
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	f003 0307 	and.w	r3, r3, #7
 800a334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	0f5b      	lsrs	r3, r3, #29
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	f003 0307 	and.w	r3, r3, #7
 800a344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a346:	7bbb      	ldrb	r3, [r7, #14]
 800a348:	7b3a      	ldrb	r2, [r7, #12]
 800a34a:	4911      	ldr	r1, [pc, #68]	@ (800a390 <UARTEx_SetNbDataToProcess+0x94>)
 800a34c:	5c8a      	ldrb	r2, [r1, r2]
 800a34e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a352:	7b3a      	ldrb	r2, [r7, #12]
 800a354:	490f      	ldr	r1, [pc, #60]	@ (800a394 <UARTEx_SetNbDataToProcess+0x98>)
 800a356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a358:	fb93 f3f2 	sdiv	r3, r3, r2
 800a35c:	b29a      	uxth	r2, r3
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	7b7a      	ldrb	r2, [r7, #13]
 800a368:	4909      	ldr	r1, [pc, #36]	@ (800a390 <UARTEx_SetNbDataToProcess+0x94>)
 800a36a:	5c8a      	ldrb	r2, [r1, r2]
 800a36c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a370:	7b7a      	ldrb	r2, [r7, #13]
 800a372:	4908      	ldr	r1, [pc, #32]	@ (800a394 <UARTEx_SetNbDataToProcess+0x98>)
 800a374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a376:	fb93 f3f2 	sdiv	r3, r3, r2
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a382:	bf00      	nop
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	0800cfbc 	.word	0x0800cfbc
 800a394:	0800cfc4 	.word	0x0800cfc4

0800a398 <log10f>:
 800a398:	b508      	push	{r3, lr}
 800a39a:	ed2d 8b02 	vpush	{d8}
 800a39e:	eeb0 8a40 	vmov.f32	s16, s0
 800a3a2:	f000 f84f 	bl	800a444 <__ieee754_log10f>
 800a3a6:	eeb4 8a48 	vcmp.f32	s16, s16
 800a3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ae:	d60f      	bvs.n	800a3d0 <log10f+0x38>
 800a3b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b8:	d80a      	bhi.n	800a3d0 <log10f+0x38>
 800a3ba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c2:	d108      	bne.n	800a3d6 <log10f+0x3e>
 800a3c4:	f000 fea2 	bl	800b10c <__errno>
 800a3c8:	2322      	movs	r3, #34	@ 0x22
 800a3ca:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a3ec <log10f+0x54>
 800a3ce:	6003      	str	r3, [r0, #0]
 800a3d0:	ecbd 8b02 	vpop	{d8}
 800a3d4:	bd08      	pop	{r3, pc}
 800a3d6:	f000 fe99 	bl	800b10c <__errno>
 800a3da:	ecbd 8b02 	vpop	{d8}
 800a3de:	2321      	movs	r3, #33	@ 0x21
 800a3e0:	6003      	str	r3, [r0, #0]
 800a3e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a3e6:	4802      	ldr	r0, [pc, #8]	@ (800a3f0 <log10f+0x58>)
 800a3e8:	f000 b822 	b.w	800a430 <nanf>
 800a3ec:	ff800000 	.word	0xff800000
 800a3f0:	0800d45e 	.word	0x0800d45e

0800a3f4 <sqrtf>:
 800a3f4:	b508      	push	{r3, lr}
 800a3f6:	ed2d 8b02 	vpush	{d8}
 800a3fa:	eeb0 8a40 	vmov.f32	s16, s0
 800a3fe:	f000 f81d 	bl	800a43c <__ieee754_sqrtf>
 800a402:	eeb4 8a48 	vcmp.f32	s16, s16
 800a406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40a:	d60c      	bvs.n	800a426 <sqrtf+0x32>
 800a40c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a42c <sqrtf+0x38>
 800a410:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a418:	d505      	bpl.n	800a426 <sqrtf+0x32>
 800a41a:	f000 fe77 	bl	800b10c <__errno>
 800a41e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a422:	2321      	movs	r3, #33	@ 0x21
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	ecbd 8b02 	vpop	{d8}
 800a42a:	bd08      	pop	{r3, pc}
 800a42c:	00000000 	.word	0x00000000

0800a430 <nanf>:
 800a430:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a438 <nanf+0x8>
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	7fc00000 	.word	0x7fc00000

0800a43c <__ieee754_sqrtf>:
 800a43c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a440:	4770      	bx	lr
	...

0800a444 <__ieee754_log10f>:
 800a444:	b508      	push	{r3, lr}
 800a446:	ee10 3a10 	vmov	r3, s0
 800a44a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a44e:	ed2d 8b02 	vpush	{d8}
 800a452:	d108      	bne.n	800a466 <__ieee754_log10f+0x22>
 800a454:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800a4dc <__ieee754_log10f+0x98>
 800a458:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800a4e0 <__ieee754_log10f+0x9c>
 800a45c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800a460:	ecbd 8b02 	vpop	{d8}
 800a464:	bd08      	pop	{r3, pc}
 800a466:	2b00      	cmp	r3, #0
 800a468:	461a      	mov	r2, r3
 800a46a:	da02      	bge.n	800a472 <__ieee754_log10f+0x2e>
 800a46c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a470:	e7f2      	b.n	800a458 <__ieee754_log10f+0x14>
 800a472:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a476:	db02      	blt.n	800a47e <__ieee754_log10f+0x3a>
 800a478:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a47c:	e7f0      	b.n	800a460 <__ieee754_log10f+0x1c>
 800a47e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a482:	bfbf      	itttt	lt
 800a484:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800a4e4 <__ieee754_log10f+0xa0>
 800a488:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a48c:	f06f 0118 	mvnlt.w	r1, #24
 800a490:	ee17 2a90 	vmovlt	r2, s15
 800a494:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a498:	bfa8      	it	ge
 800a49a:	2100      	movge	r1, #0
 800a49c:	3b7f      	subs	r3, #127	@ 0x7f
 800a49e:	440b      	add	r3, r1
 800a4a0:	0fd9      	lsrs	r1, r3, #31
 800a4a2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800a4a6:	ee07 3a90 	vmov	s15, r3
 800a4aa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a4ae:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800a4b2:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800a4b6:	ee00 3a10 	vmov	s0, r3
 800a4ba:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a4be:	f000 f819 	bl	800a4f4 <logf>
 800a4c2:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800a4e8 <__ieee754_log10f+0xa4>
 800a4c6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a4ca:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a4ec <__ieee754_log10f+0xa8>
 800a4ce:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a4d2:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800a4f0 <__ieee754_log10f+0xac>
 800a4d6:	eea8 0a27 	vfma.f32	s0, s16, s15
 800a4da:	e7c1      	b.n	800a460 <__ieee754_log10f+0x1c>
 800a4dc:	cc000000 	.word	0xcc000000
 800a4e0:	00000000 	.word	0x00000000
 800a4e4:	4c000000 	.word	0x4c000000
 800a4e8:	3ede5bd9 	.word	0x3ede5bd9
 800a4ec:	355427db 	.word	0x355427db
 800a4f0:	3e9a2080 	.word	0x3e9a2080

0800a4f4 <logf>:
 800a4f4:	ee10 3a10 	vmov	r3, s0
 800a4f8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a4fc:	b410      	push	{r4}
 800a4fe:	d055      	beq.n	800a5ac <logf+0xb8>
 800a500:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 800a504:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800a508:	d31a      	bcc.n	800a540 <logf+0x4c>
 800a50a:	005a      	lsls	r2, r3, #1
 800a50c:	d104      	bne.n	800a518 <logf+0x24>
 800a50e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a512:	2001      	movs	r0, #1
 800a514:	f000 b862 	b.w	800a5dc <__math_divzerof>
 800a518:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a51c:	d043      	beq.n	800a5a6 <logf+0xb2>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	db02      	blt.n	800a528 <logf+0x34>
 800a522:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 800a526:	d303      	bcc.n	800a530 <logf+0x3c>
 800a528:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a52c:	f000 b868 	b.w	800a600 <__math_invalidf>
 800a530:	eddf 7a20 	vldr	s15, [pc, #128]	@ 800a5b4 <logf+0xc0>
 800a534:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a538:	ee10 3a10 	vmov	r3, s0
 800a53c:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 800a540:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 800a544:	491c      	ldr	r1, [pc, #112]	@ (800a5b8 <logf+0xc4>)
 800a546:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 800a54a:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 800a54e:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800a552:	0dd4      	lsrs	r4, r2, #23
 800a554:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800a558:	05e4      	lsls	r4, r4, #23
 800a55a:	ed90 5b00 	vldr	d5, [r0]
 800a55e:	1b1b      	subs	r3, r3, r4
 800a560:	ee07 3a90 	vmov	s15, r3
 800a564:	ed90 6b02 	vldr	d6, [r0, #8]
 800a568:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800a56c:	15d2      	asrs	r2, r2, #23
 800a56e:	eea5 0b07 	vfma.f64	d0, d5, d7
 800a572:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 800a576:	ee20 4b00 	vmul.f64	d4, d0, d0
 800a57a:	ee07 2a90 	vmov	s15, r2
 800a57e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a582:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a586:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 800a58a:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 800a58e:	eea5 7b00 	vfma.f64	d7, d5, d0
 800a592:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 800a596:	ee30 0b06 	vadd.f64	d0, d0, d6
 800a59a:	eea5 7b04 	vfma.f64	d7, d5, d4
 800a59e:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a5a2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a5a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800a5bc <logf+0xc8>
 800a5b0:	e7f9      	b.n	800a5a6 <logf+0xb2>
 800a5b2:	bf00      	nop
 800a5b4:	4b000000 	.word	0x4b000000
 800a5b8:	0800cfd0 	.word	0x0800cfd0
 800a5bc:	00000000 	.word	0x00000000

0800a5c0 <with_errnof>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	ed2d 8b02 	vpush	{d8}
 800a5c6:	eeb0 8a40 	vmov.f32	s16, s0
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	f000 fd9e 	bl	800b10c <__errno>
 800a5d0:	eeb0 0a48 	vmov.f32	s0, s16
 800a5d4:	ecbd 8b02 	vpop	{d8}
 800a5d8:	6004      	str	r4, [r0, #0]
 800a5da:	bd10      	pop	{r4, pc}

0800a5dc <__math_divzerof>:
 800a5dc:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800a5fc <__math_divzerof+0x20>
 800a5e0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a5e4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a5e8:	2800      	cmp	r0, #0
 800a5ea:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800a5ee:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800a5f2:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800a5f6:	f7ff bfe3 	b.w	800a5c0 <with_errnof>
 800a5fa:	bf00      	nop
 800a5fc:	00000000 	.word	0x00000000

0800a600 <__math_invalidf>:
 800a600:	eef0 7a40 	vmov.f32	s15, s0
 800a604:	ee30 7a40 	vsub.f32	s14, s0, s0
 800a608:	eef4 7a67 	vcmp.f32	s15, s15
 800a60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a610:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800a614:	d602      	bvs.n	800a61c <__math_invalidf+0x1c>
 800a616:	2021      	movs	r0, #33	@ 0x21
 800a618:	f7ff bfd2 	b.w	800a5c0 <with_errnof>
 800a61c:	4770      	bx	lr

0800a61e <__cvt>:
 800a61e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a620:	ed2d 8b02 	vpush	{d8}
 800a624:	eeb0 8b40 	vmov.f64	d8, d0
 800a628:	b085      	sub	sp, #20
 800a62a:	4617      	mov	r7, r2
 800a62c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a62e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a630:	ee18 2a90 	vmov	r2, s17
 800a634:	f025 0520 	bic.w	r5, r5, #32
 800a638:	2a00      	cmp	r2, #0
 800a63a:	bfb6      	itet	lt
 800a63c:	222d      	movlt	r2, #45	@ 0x2d
 800a63e:	2200      	movge	r2, #0
 800a640:	eeb1 8b40 	vneglt.f64	d8, d0
 800a644:	2d46      	cmp	r5, #70	@ 0x46
 800a646:	460c      	mov	r4, r1
 800a648:	701a      	strb	r2, [r3, #0]
 800a64a:	d004      	beq.n	800a656 <__cvt+0x38>
 800a64c:	2d45      	cmp	r5, #69	@ 0x45
 800a64e:	d100      	bne.n	800a652 <__cvt+0x34>
 800a650:	3401      	adds	r4, #1
 800a652:	2102      	movs	r1, #2
 800a654:	e000      	b.n	800a658 <__cvt+0x3a>
 800a656:	2103      	movs	r1, #3
 800a658:	ab03      	add	r3, sp, #12
 800a65a:	9301      	str	r3, [sp, #4]
 800a65c:	ab02      	add	r3, sp, #8
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	4622      	mov	r2, r4
 800a662:	4633      	mov	r3, r6
 800a664:	eeb0 0b48 	vmov.f64	d0, d8
 800a668:	f000 fe06 	bl	800b278 <_dtoa_r>
 800a66c:	2d47      	cmp	r5, #71	@ 0x47
 800a66e:	d114      	bne.n	800a69a <__cvt+0x7c>
 800a670:	07fb      	lsls	r3, r7, #31
 800a672:	d50a      	bpl.n	800a68a <__cvt+0x6c>
 800a674:	1902      	adds	r2, r0, r4
 800a676:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67e:	bf08      	it	eq
 800a680:	9203      	streq	r2, [sp, #12]
 800a682:	2130      	movs	r1, #48	@ 0x30
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	4293      	cmp	r3, r2
 800a688:	d319      	bcc.n	800a6be <__cvt+0xa0>
 800a68a:	9b03      	ldr	r3, [sp, #12]
 800a68c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a68e:	1a1b      	subs	r3, r3, r0
 800a690:	6013      	str	r3, [r2, #0]
 800a692:	b005      	add	sp, #20
 800a694:	ecbd 8b02 	vpop	{d8}
 800a698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a69a:	2d46      	cmp	r5, #70	@ 0x46
 800a69c:	eb00 0204 	add.w	r2, r0, r4
 800a6a0:	d1e9      	bne.n	800a676 <__cvt+0x58>
 800a6a2:	7803      	ldrb	r3, [r0, #0]
 800a6a4:	2b30      	cmp	r3, #48	@ 0x30
 800a6a6:	d107      	bne.n	800a6b8 <__cvt+0x9a>
 800a6a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b0:	bf1c      	itt	ne
 800a6b2:	f1c4 0401 	rsbne	r4, r4, #1
 800a6b6:	6034      	strne	r4, [r6, #0]
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	441a      	add	r2, r3
 800a6bc:	e7db      	b.n	800a676 <__cvt+0x58>
 800a6be:	1c5c      	adds	r4, r3, #1
 800a6c0:	9403      	str	r4, [sp, #12]
 800a6c2:	7019      	strb	r1, [r3, #0]
 800a6c4:	e7de      	b.n	800a684 <__cvt+0x66>

0800a6c6 <__exponent>:
 800a6c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6c8:	2900      	cmp	r1, #0
 800a6ca:	bfba      	itte	lt
 800a6cc:	4249      	neglt	r1, r1
 800a6ce:	232d      	movlt	r3, #45	@ 0x2d
 800a6d0:	232b      	movge	r3, #43	@ 0x2b
 800a6d2:	2909      	cmp	r1, #9
 800a6d4:	7002      	strb	r2, [r0, #0]
 800a6d6:	7043      	strb	r3, [r0, #1]
 800a6d8:	dd29      	ble.n	800a72e <__exponent+0x68>
 800a6da:	f10d 0307 	add.w	r3, sp, #7
 800a6de:	461d      	mov	r5, r3
 800a6e0:	270a      	movs	r7, #10
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a6e8:	fb07 1416 	mls	r4, r7, r6, r1
 800a6ec:	3430      	adds	r4, #48	@ 0x30
 800a6ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	2c63      	cmp	r4, #99	@ 0x63
 800a6f6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	dcf1      	bgt.n	800a6e2 <__exponent+0x1c>
 800a6fe:	3130      	adds	r1, #48	@ 0x30
 800a700:	1e94      	subs	r4, r2, #2
 800a702:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a706:	1c41      	adds	r1, r0, #1
 800a708:	4623      	mov	r3, r4
 800a70a:	42ab      	cmp	r3, r5
 800a70c:	d30a      	bcc.n	800a724 <__exponent+0x5e>
 800a70e:	f10d 0309 	add.w	r3, sp, #9
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	42ac      	cmp	r4, r5
 800a716:	bf88      	it	hi
 800a718:	2300      	movhi	r3, #0
 800a71a:	3302      	adds	r3, #2
 800a71c:	4403      	add	r3, r0
 800a71e:	1a18      	subs	r0, r3, r0
 800a720:	b003      	add	sp, #12
 800a722:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a724:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a728:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a72c:	e7ed      	b.n	800a70a <__exponent+0x44>
 800a72e:	2330      	movs	r3, #48	@ 0x30
 800a730:	3130      	adds	r1, #48	@ 0x30
 800a732:	7083      	strb	r3, [r0, #2]
 800a734:	70c1      	strb	r1, [r0, #3]
 800a736:	1d03      	adds	r3, r0, #4
 800a738:	e7f1      	b.n	800a71e <__exponent+0x58>
 800a73a:	0000      	movs	r0, r0
 800a73c:	0000      	movs	r0, r0
	...

0800a740 <_printf_float>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	b08d      	sub	sp, #52	@ 0x34
 800a746:	460c      	mov	r4, r1
 800a748:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a74c:	4616      	mov	r6, r2
 800a74e:	461f      	mov	r7, r3
 800a750:	4605      	mov	r5, r0
 800a752:	f000 fcd7 	bl	800b104 <_localeconv_r>
 800a756:	f8d0 b000 	ldr.w	fp, [r0]
 800a75a:	4658      	mov	r0, fp
 800a75c:	f7f5 fe10 	bl	8000380 <strlen>
 800a760:	2300      	movs	r3, #0
 800a762:	930a      	str	r3, [sp, #40]	@ 0x28
 800a764:	f8d8 3000 	ldr.w	r3, [r8]
 800a768:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a76c:	6822      	ldr	r2, [r4, #0]
 800a76e:	9005      	str	r0, [sp, #20]
 800a770:	3307      	adds	r3, #7
 800a772:	f023 0307 	bic.w	r3, r3, #7
 800a776:	f103 0108 	add.w	r1, r3, #8
 800a77a:	f8c8 1000 	str.w	r1, [r8]
 800a77e:	ed93 0b00 	vldr	d0, [r3]
 800a782:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800a9e0 <_printf_float+0x2a0>
 800a786:	eeb0 7bc0 	vabs.f64	d7, d0
 800a78a:	eeb4 7b46 	vcmp.f64	d7, d6
 800a78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a792:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800a796:	dd24      	ble.n	800a7e2 <_printf_float+0xa2>
 800a798:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a0:	d502      	bpl.n	800a7a8 <_printf_float+0x68>
 800a7a2:	232d      	movs	r3, #45	@ 0x2d
 800a7a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7a8:	498f      	ldr	r1, [pc, #572]	@ (800a9e8 <_printf_float+0x2a8>)
 800a7aa:	4b90      	ldr	r3, [pc, #576]	@ (800a9ec <_printf_float+0x2ac>)
 800a7ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800a7b0:	bf94      	ite	ls
 800a7b2:	4688      	movls	r8, r1
 800a7b4:	4698      	movhi	r8, r3
 800a7b6:	f022 0204 	bic.w	r2, r2, #4
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	6123      	str	r3, [r4, #16]
 800a7be:	6022      	str	r2, [r4, #0]
 800a7c0:	f04f 0a00 	mov.w	sl, #0
 800a7c4:	9700      	str	r7, [sp, #0]
 800a7c6:	4633      	mov	r3, r6
 800a7c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f000 f9d1 	bl	800ab74 <_printf_common>
 800a7d2:	3001      	adds	r0, #1
 800a7d4:	f040 8089 	bne.w	800a8ea <_printf_float+0x1aa>
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7dc:	b00d      	add	sp, #52	@ 0x34
 800a7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e2:	eeb4 0b40 	vcmp.f64	d0, d0
 800a7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ea:	d709      	bvc.n	800a800 <_printf_float+0xc0>
 800a7ec:	ee10 3a90 	vmov	r3, s1
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bfbc      	itt	lt
 800a7f4:	232d      	movlt	r3, #45	@ 0x2d
 800a7f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a7fa:	497d      	ldr	r1, [pc, #500]	@ (800a9f0 <_printf_float+0x2b0>)
 800a7fc:	4b7d      	ldr	r3, [pc, #500]	@ (800a9f4 <_printf_float+0x2b4>)
 800a7fe:	e7d5      	b.n	800a7ac <_printf_float+0x6c>
 800a800:	6863      	ldr	r3, [r4, #4]
 800a802:	1c59      	adds	r1, r3, #1
 800a804:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800a808:	d139      	bne.n	800a87e <_printf_float+0x13e>
 800a80a:	2306      	movs	r3, #6
 800a80c:	6063      	str	r3, [r4, #4]
 800a80e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a812:	2300      	movs	r3, #0
 800a814:	6022      	str	r2, [r4, #0]
 800a816:	9303      	str	r3, [sp, #12]
 800a818:	ab0a      	add	r3, sp, #40	@ 0x28
 800a81a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a81e:	ab09      	add	r3, sp, #36	@ 0x24
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	6861      	ldr	r1, [r4, #4]
 800a824:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a828:	4628      	mov	r0, r5
 800a82a:	f7ff fef8 	bl	800a61e <__cvt>
 800a82e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a832:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a834:	4680      	mov	r8, r0
 800a836:	d129      	bne.n	800a88c <_printf_float+0x14c>
 800a838:	1cc8      	adds	r0, r1, #3
 800a83a:	db02      	blt.n	800a842 <_printf_float+0x102>
 800a83c:	6863      	ldr	r3, [r4, #4]
 800a83e:	4299      	cmp	r1, r3
 800a840:	dd41      	ble.n	800a8c6 <_printf_float+0x186>
 800a842:	f1a9 0902 	sub.w	r9, r9, #2
 800a846:	fa5f f989 	uxtb.w	r9, r9
 800a84a:	3901      	subs	r1, #1
 800a84c:	464a      	mov	r2, r9
 800a84e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a852:	9109      	str	r1, [sp, #36]	@ 0x24
 800a854:	f7ff ff37 	bl	800a6c6 <__exponent>
 800a858:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a85a:	1813      	adds	r3, r2, r0
 800a85c:	2a01      	cmp	r2, #1
 800a85e:	4682      	mov	sl, r0
 800a860:	6123      	str	r3, [r4, #16]
 800a862:	dc02      	bgt.n	800a86a <_printf_float+0x12a>
 800a864:	6822      	ldr	r2, [r4, #0]
 800a866:	07d2      	lsls	r2, r2, #31
 800a868:	d501      	bpl.n	800a86e <_printf_float+0x12e>
 800a86a:	3301      	adds	r3, #1
 800a86c:	6123      	str	r3, [r4, #16]
 800a86e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0a6      	beq.n	800a7c4 <_printf_float+0x84>
 800a876:	232d      	movs	r3, #45	@ 0x2d
 800a878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a87c:	e7a2      	b.n	800a7c4 <_printf_float+0x84>
 800a87e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a882:	d1c4      	bne.n	800a80e <_printf_float+0xce>
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1c2      	bne.n	800a80e <_printf_float+0xce>
 800a888:	2301      	movs	r3, #1
 800a88a:	e7bf      	b.n	800a80c <_printf_float+0xcc>
 800a88c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a890:	d9db      	bls.n	800a84a <_printf_float+0x10a>
 800a892:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800a896:	d118      	bne.n	800a8ca <_printf_float+0x18a>
 800a898:	2900      	cmp	r1, #0
 800a89a:	6863      	ldr	r3, [r4, #4]
 800a89c:	dd0b      	ble.n	800a8b6 <_printf_float+0x176>
 800a89e:	6121      	str	r1, [r4, #16]
 800a8a0:	b913      	cbnz	r3, 800a8a8 <_printf_float+0x168>
 800a8a2:	6822      	ldr	r2, [r4, #0]
 800a8a4:	07d0      	lsls	r0, r2, #31
 800a8a6:	d502      	bpl.n	800a8ae <_printf_float+0x16e>
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	440b      	add	r3, r1
 800a8ac:	6123      	str	r3, [r4, #16]
 800a8ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a8b0:	f04f 0a00 	mov.w	sl, #0
 800a8b4:	e7db      	b.n	800a86e <_printf_float+0x12e>
 800a8b6:	b913      	cbnz	r3, 800a8be <_printf_float+0x17e>
 800a8b8:	6822      	ldr	r2, [r4, #0]
 800a8ba:	07d2      	lsls	r2, r2, #31
 800a8bc:	d501      	bpl.n	800a8c2 <_printf_float+0x182>
 800a8be:	3302      	adds	r3, #2
 800a8c0:	e7f4      	b.n	800a8ac <_printf_float+0x16c>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e7f2      	b.n	800a8ac <_printf_float+0x16c>
 800a8c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800a8ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	db05      	blt.n	800a8dc <_printf_float+0x19c>
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	6121      	str	r1, [r4, #16]
 800a8d4:	07d8      	lsls	r0, r3, #31
 800a8d6:	d5ea      	bpl.n	800a8ae <_printf_float+0x16e>
 800a8d8:	1c4b      	adds	r3, r1, #1
 800a8da:	e7e7      	b.n	800a8ac <_printf_float+0x16c>
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	bfd4      	ite	le
 800a8e0:	f1c1 0202 	rsble	r2, r1, #2
 800a8e4:	2201      	movgt	r2, #1
 800a8e6:	4413      	add	r3, r2
 800a8e8:	e7e0      	b.n	800a8ac <_printf_float+0x16c>
 800a8ea:	6823      	ldr	r3, [r4, #0]
 800a8ec:	055a      	lsls	r2, r3, #21
 800a8ee:	d407      	bmi.n	800a900 <_printf_float+0x1c0>
 800a8f0:	6923      	ldr	r3, [r4, #16]
 800a8f2:	4642      	mov	r2, r8
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	d12a      	bne.n	800a954 <_printf_float+0x214>
 800a8fe:	e76b      	b.n	800a7d8 <_printf_float+0x98>
 800a900:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800a904:	f240 80e0 	bls.w	800aac8 <_printf_float+0x388>
 800a908:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800a90c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a914:	d133      	bne.n	800a97e <_printf_float+0x23e>
 800a916:	4a38      	ldr	r2, [pc, #224]	@ (800a9f8 <_printf_float+0x2b8>)
 800a918:	2301      	movs	r3, #1
 800a91a:	4631      	mov	r1, r6
 800a91c:	4628      	mov	r0, r5
 800a91e:	47b8      	blx	r7
 800a920:	3001      	adds	r0, #1
 800a922:	f43f af59 	beq.w	800a7d8 <_printf_float+0x98>
 800a926:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a92a:	4543      	cmp	r3, r8
 800a92c:	db02      	blt.n	800a934 <_printf_float+0x1f4>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	07d8      	lsls	r0, r3, #31
 800a932:	d50f      	bpl.n	800a954 <_printf_float+0x214>
 800a934:	9b05      	ldr	r3, [sp, #20]
 800a936:	465a      	mov	r2, fp
 800a938:	4631      	mov	r1, r6
 800a93a:	4628      	mov	r0, r5
 800a93c:	47b8      	blx	r7
 800a93e:	3001      	adds	r0, #1
 800a940:	f43f af4a 	beq.w	800a7d8 <_printf_float+0x98>
 800a944:	f04f 0900 	mov.w	r9, #0
 800a948:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a94c:	f104 0a1a 	add.w	sl, r4, #26
 800a950:	45c8      	cmp	r8, r9
 800a952:	dc09      	bgt.n	800a968 <_printf_float+0x228>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	079b      	lsls	r3, r3, #30
 800a958:	f100 8107 	bmi.w	800ab6a <_printf_float+0x42a>
 800a95c:	68e0      	ldr	r0, [r4, #12]
 800a95e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a960:	4298      	cmp	r0, r3
 800a962:	bfb8      	it	lt
 800a964:	4618      	movlt	r0, r3
 800a966:	e739      	b.n	800a7dc <_printf_float+0x9c>
 800a968:	2301      	movs	r3, #1
 800a96a:	4652      	mov	r2, sl
 800a96c:	4631      	mov	r1, r6
 800a96e:	4628      	mov	r0, r5
 800a970:	47b8      	blx	r7
 800a972:	3001      	adds	r0, #1
 800a974:	f43f af30 	beq.w	800a7d8 <_printf_float+0x98>
 800a978:	f109 0901 	add.w	r9, r9, #1
 800a97c:	e7e8      	b.n	800a950 <_printf_float+0x210>
 800a97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a980:	2b00      	cmp	r3, #0
 800a982:	dc3b      	bgt.n	800a9fc <_printf_float+0x2bc>
 800a984:	4a1c      	ldr	r2, [pc, #112]	@ (800a9f8 <_printf_float+0x2b8>)
 800a986:	2301      	movs	r3, #1
 800a988:	4631      	mov	r1, r6
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b8      	blx	r7
 800a98e:	3001      	adds	r0, #1
 800a990:	f43f af22 	beq.w	800a7d8 <_printf_float+0x98>
 800a994:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a998:	ea59 0303 	orrs.w	r3, r9, r3
 800a99c:	d102      	bne.n	800a9a4 <_printf_float+0x264>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	07d9      	lsls	r1, r3, #31
 800a9a2:	d5d7      	bpl.n	800a954 <_printf_float+0x214>
 800a9a4:	9b05      	ldr	r3, [sp, #20]
 800a9a6:	465a      	mov	r2, fp
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	f43f af12 	beq.w	800a7d8 <_printf_float+0x98>
 800a9b4:	f04f 0a00 	mov.w	sl, #0
 800a9b8:	f104 0b1a 	add.w	fp, r4, #26
 800a9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9be:	425b      	negs	r3, r3
 800a9c0:	4553      	cmp	r3, sl
 800a9c2:	dc01      	bgt.n	800a9c8 <_printf_float+0x288>
 800a9c4:	464b      	mov	r3, r9
 800a9c6:	e794      	b.n	800a8f2 <_printf_float+0x1b2>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	465a      	mov	r2, fp
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4628      	mov	r0, r5
 800a9d0:	47b8      	blx	r7
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	f43f af00 	beq.w	800a7d8 <_printf_float+0x98>
 800a9d8:	f10a 0a01 	add.w	sl, sl, #1
 800a9dc:	e7ee      	b.n	800a9bc <_printf_float+0x27c>
 800a9de:	bf00      	nop
 800a9e0:	ffffffff 	.word	0xffffffff
 800a9e4:	7fefffff 	.word	0x7fefffff
 800a9e8:	0800d0f0 	.word	0x0800d0f0
 800a9ec:	0800d0f4 	.word	0x0800d0f4
 800a9f0:	0800d0f8 	.word	0x0800d0f8
 800a9f4:	0800d0fc 	.word	0x0800d0fc
 800a9f8:	0800d100 	.word	0x0800d100
 800a9fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a9fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aa02:	4553      	cmp	r3, sl
 800aa04:	bfa8      	it	ge
 800aa06:	4653      	movge	r3, sl
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	4699      	mov	r9, r3
 800aa0c:	dc37      	bgt.n	800aa7e <_printf_float+0x33e>
 800aa0e:	2300      	movs	r3, #0
 800aa10:	9307      	str	r3, [sp, #28]
 800aa12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa16:	f104 021a 	add.w	r2, r4, #26
 800aa1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aa1c:	9907      	ldr	r1, [sp, #28]
 800aa1e:	9306      	str	r3, [sp, #24]
 800aa20:	eba3 0309 	sub.w	r3, r3, r9
 800aa24:	428b      	cmp	r3, r1
 800aa26:	dc31      	bgt.n	800aa8c <_printf_float+0x34c>
 800aa28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa2a:	459a      	cmp	sl, r3
 800aa2c:	dc3b      	bgt.n	800aaa6 <_printf_float+0x366>
 800aa2e:	6823      	ldr	r3, [r4, #0]
 800aa30:	07da      	lsls	r2, r3, #31
 800aa32:	d438      	bmi.n	800aaa6 <_printf_float+0x366>
 800aa34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa36:	ebaa 0903 	sub.w	r9, sl, r3
 800aa3a:	9b06      	ldr	r3, [sp, #24]
 800aa3c:	ebaa 0303 	sub.w	r3, sl, r3
 800aa40:	4599      	cmp	r9, r3
 800aa42:	bfa8      	it	ge
 800aa44:	4699      	movge	r9, r3
 800aa46:	f1b9 0f00 	cmp.w	r9, #0
 800aa4a:	dc34      	bgt.n	800aab6 <_printf_float+0x376>
 800aa4c:	f04f 0800 	mov.w	r8, #0
 800aa50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa54:	f104 0b1a 	add.w	fp, r4, #26
 800aa58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa5a:	ebaa 0303 	sub.w	r3, sl, r3
 800aa5e:	eba3 0309 	sub.w	r3, r3, r9
 800aa62:	4543      	cmp	r3, r8
 800aa64:	f77f af76 	ble.w	800a954 <_printf_float+0x214>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	465a      	mov	r2, fp
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4628      	mov	r0, r5
 800aa70:	47b8      	blx	r7
 800aa72:	3001      	adds	r0, #1
 800aa74:	f43f aeb0 	beq.w	800a7d8 <_printf_float+0x98>
 800aa78:	f108 0801 	add.w	r8, r8, #1
 800aa7c:	e7ec      	b.n	800aa58 <_printf_float+0x318>
 800aa7e:	4642      	mov	r2, r8
 800aa80:	4631      	mov	r1, r6
 800aa82:	4628      	mov	r0, r5
 800aa84:	47b8      	blx	r7
 800aa86:	3001      	adds	r0, #1
 800aa88:	d1c1      	bne.n	800aa0e <_printf_float+0x2ce>
 800aa8a:	e6a5      	b.n	800a7d8 <_printf_float+0x98>
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	9206      	str	r2, [sp, #24]
 800aa94:	47b8      	blx	r7
 800aa96:	3001      	adds	r0, #1
 800aa98:	f43f ae9e 	beq.w	800a7d8 <_printf_float+0x98>
 800aa9c:	9b07      	ldr	r3, [sp, #28]
 800aa9e:	9a06      	ldr	r2, [sp, #24]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	9307      	str	r3, [sp, #28]
 800aaa4:	e7b9      	b.n	800aa1a <_printf_float+0x2da>
 800aaa6:	9b05      	ldr	r3, [sp, #20]
 800aaa8:	465a      	mov	r2, fp
 800aaaa:	4631      	mov	r1, r6
 800aaac:	4628      	mov	r0, r5
 800aaae:	47b8      	blx	r7
 800aab0:	3001      	adds	r0, #1
 800aab2:	d1bf      	bne.n	800aa34 <_printf_float+0x2f4>
 800aab4:	e690      	b.n	800a7d8 <_printf_float+0x98>
 800aab6:	9a06      	ldr	r2, [sp, #24]
 800aab8:	464b      	mov	r3, r9
 800aaba:	4442      	add	r2, r8
 800aabc:	4631      	mov	r1, r6
 800aabe:	4628      	mov	r0, r5
 800aac0:	47b8      	blx	r7
 800aac2:	3001      	adds	r0, #1
 800aac4:	d1c2      	bne.n	800aa4c <_printf_float+0x30c>
 800aac6:	e687      	b.n	800a7d8 <_printf_float+0x98>
 800aac8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800aacc:	f1b9 0f01 	cmp.w	r9, #1
 800aad0:	dc01      	bgt.n	800aad6 <_printf_float+0x396>
 800aad2:	07db      	lsls	r3, r3, #31
 800aad4:	d536      	bpl.n	800ab44 <_printf_float+0x404>
 800aad6:	2301      	movs	r3, #1
 800aad8:	4642      	mov	r2, r8
 800aada:	4631      	mov	r1, r6
 800aadc:	4628      	mov	r0, r5
 800aade:	47b8      	blx	r7
 800aae0:	3001      	adds	r0, #1
 800aae2:	f43f ae79 	beq.w	800a7d8 <_printf_float+0x98>
 800aae6:	9b05      	ldr	r3, [sp, #20]
 800aae8:	465a      	mov	r2, fp
 800aaea:	4631      	mov	r1, r6
 800aaec:	4628      	mov	r0, r5
 800aaee:	47b8      	blx	r7
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	f43f ae71 	beq.w	800a7d8 <_printf_float+0x98>
 800aaf6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aafa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab02:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ab06:	d018      	beq.n	800ab3a <_printf_float+0x3fa>
 800ab08:	464b      	mov	r3, r9
 800ab0a:	f108 0201 	add.w	r2, r8, #1
 800ab0e:	4631      	mov	r1, r6
 800ab10:	4628      	mov	r0, r5
 800ab12:	47b8      	blx	r7
 800ab14:	3001      	adds	r0, #1
 800ab16:	d10c      	bne.n	800ab32 <_printf_float+0x3f2>
 800ab18:	e65e      	b.n	800a7d8 <_printf_float+0x98>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	465a      	mov	r2, fp
 800ab1e:	4631      	mov	r1, r6
 800ab20:	4628      	mov	r0, r5
 800ab22:	47b8      	blx	r7
 800ab24:	3001      	adds	r0, #1
 800ab26:	f43f ae57 	beq.w	800a7d8 <_printf_float+0x98>
 800ab2a:	f108 0801 	add.w	r8, r8, #1
 800ab2e:	45c8      	cmp	r8, r9
 800ab30:	dbf3      	blt.n	800ab1a <_printf_float+0x3da>
 800ab32:	4653      	mov	r3, sl
 800ab34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ab38:	e6dc      	b.n	800a8f4 <_printf_float+0x1b4>
 800ab3a:	f04f 0800 	mov.w	r8, #0
 800ab3e:	f104 0b1a 	add.w	fp, r4, #26
 800ab42:	e7f4      	b.n	800ab2e <_printf_float+0x3ee>
 800ab44:	2301      	movs	r3, #1
 800ab46:	4642      	mov	r2, r8
 800ab48:	e7e1      	b.n	800ab0e <_printf_float+0x3ce>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	464a      	mov	r2, r9
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4628      	mov	r0, r5
 800ab52:	47b8      	blx	r7
 800ab54:	3001      	adds	r0, #1
 800ab56:	f43f ae3f 	beq.w	800a7d8 <_printf_float+0x98>
 800ab5a:	f108 0801 	add.w	r8, r8, #1
 800ab5e:	68e3      	ldr	r3, [r4, #12]
 800ab60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab62:	1a5b      	subs	r3, r3, r1
 800ab64:	4543      	cmp	r3, r8
 800ab66:	dcf0      	bgt.n	800ab4a <_printf_float+0x40a>
 800ab68:	e6f8      	b.n	800a95c <_printf_float+0x21c>
 800ab6a:	f04f 0800 	mov.w	r8, #0
 800ab6e:	f104 0919 	add.w	r9, r4, #25
 800ab72:	e7f4      	b.n	800ab5e <_printf_float+0x41e>

0800ab74 <_printf_common>:
 800ab74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab78:	4616      	mov	r6, r2
 800ab7a:	4698      	mov	r8, r3
 800ab7c:	688a      	ldr	r2, [r1, #8]
 800ab7e:	690b      	ldr	r3, [r1, #16]
 800ab80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab84:	4293      	cmp	r3, r2
 800ab86:	bfb8      	it	lt
 800ab88:	4613      	movlt	r3, r2
 800ab8a:	6033      	str	r3, [r6, #0]
 800ab8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab90:	4607      	mov	r7, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	b10a      	cbz	r2, 800ab9a <_printf_common+0x26>
 800ab96:	3301      	adds	r3, #1
 800ab98:	6033      	str	r3, [r6, #0]
 800ab9a:	6823      	ldr	r3, [r4, #0]
 800ab9c:	0699      	lsls	r1, r3, #26
 800ab9e:	bf42      	ittt	mi
 800aba0:	6833      	ldrmi	r3, [r6, #0]
 800aba2:	3302      	addmi	r3, #2
 800aba4:	6033      	strmi	r3, [r6, #0]
 800aba6:	6825      	ldr	r5, [r4, #0]
 800aba8:	f015 0506 	ands.w	r5, r5, #6
 800abac:	d106      	bne.n	800abbc <_printf_common+0x48>
 800abae:	f104 0a19 	add.w	sl, r4, #25
 800abb2:	68e3      	ldr	r3, [r4, #12]
 800abb4:	6832      	ldr	r2, [r6, #0]
 800abb6:	1a9b      	subs	r3, r3, r2
 800abb8:	42ab      	cmp	r3, r5
 800abba:	dc26      	bgt.n	800ac0a <_printf_common+0x96>
 800abbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800abc0:	6822      	ldr	r2, [r4, #0]
 800abc2:	3b00      	subs	r3, #0
 800abc4:	bf18      	it	ne
 800abc6:	2301      	movne	r3, #1
 800abc8:	0692      	lsls	r2, r2, #26
 800abca:	d42b      	bmi.n	800ac24 <_printf_common+0xb0>
 800abcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800abd0:	4641      	mov	r1, r8
 800abd2:	4638      	mov	r0, r7
 800abd4:	47c8      	blx	r9
 800abd6:	3001      	adds	r0, #1
 800abd8:	d01e      	beq.n	800ac18 <_printf_common+0xa4>
 800abda:	6823      	ldr	r3, [r4, #0]
 800abdc:	6922      	ldr	r2, [r4, #16]
 800abde:	f003 0306 	and.w	r3, r3, #6
 800abe2:	2b04      	cmp	r3, #4
 800abe4:	bf02      	ittt	eq
 800abe6:	68e5      	ldreq	r5, [r4, #12]
 800abe8:	6833      	ldreq	r3, [r6, #0]
 800abea:	1aed      	subeq	r5, r5, r3
 800abec:	68a3      	ldr	r3, [r4, #8]
 800abee:	bf0c      	ite	eq
 800abf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abf4:	2500      	movne	r5, #0
 800abf6:	4293      	cmp	r3, r2
 800abf8:	bfc4      	itt	gt
 800abfa:	1a9b      	subgt	r3, r3, r2
 800abfc:	18ed      	addgt	r5, r5, r3
 800abfe:	2600      	movs	r6, #0
 800ac00:	341a      	adds	r4, #26
 800ac02:	42b5      	cmp	r5, r6
 800ac04:	d11a      	bne.n	800ac3c <_printf_common+0xc8>
 800ac06:	2000      	movs	r0, #0
 800ac08:	e008      	b.n	800ac1c <_printf_common+0xa8>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	4652      	mov	r2, sl
 800ac0e:	4641      	mov	r1, r8
 800ac10:	4638      	mov	r0, r7
 800ac12:	47c8      	blx	r9
 800ac14:	3001      	adds	r0, #1
 800ac16:	d103      	bne.n	800ac20 <_printf_common+0xac>
 800ac18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac20:	3501      	adds	r5, #1
 800ac22:	e7c6      	b.n	800abb2 <_printf_common+0x3e>
 800ac24:	18e1      	adds	r1, r4, r3
 800ac26:	1c5a      	adds	r2, r3, #1
 800ac28:	2030      	movs	r0, #48	@ 0x30
 800ac2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ac2e:	4422      	add	r2, r4
 800ac30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ac34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ac38:	3302      	adds	r3, #2
 800ac3a:	e7c7      	b.n	800abcc <_printf_common+0x58>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	4622      	mov	r2, r4
 800ac40:	4641      	mov	r1, r8
 800ac42:	4638      	mov	r0, r7
 800ac44:	47c8      	blx	r9
 800ac46:	3001      	adds	r0, #1
 800ac48:	d0e6      	beq.n	800ac18 <_printf_common+0xa4>
 800ac4a:	3601      	adds	r6, #1
 800ac4c:	e7d9      	b.n	800ac02 <_printf_common+0x8e>
	...

0800ac50 <_printf_i>:
 800ac50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac54:	7e0f      	ldrb	r7, [r1, #24]
 800ac56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ac58:	2f78      	cmp	r7, #120	@ 0x78
 800ac5a:	4691      	mov	r9, r2
 800ac5c:	4680      	mov	r8, r0
 800ac5e:	460c      	mov	r4, r1
 800ac60:	469a      	mov	sl, r3
 800ac62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ac66:	d807      	bhi.n	800ac78 <_printf_i+0x28>
 800ac68:	2f62      	cmp	r7, #98	@ 0x62
 800ac6a:	d80a      	bhi.n	800ac82 <_printf_i+0x32>
 800ac6c:	2f00      	cmp	r7, #0
 800ac6e:	f000 80d2 	beq.w	800ae16 <_printf_i+0x1c6>
 800ac72:	2f58      	cmp	r7, #88	@ 0x58
 800ac74:	f000 80b9 	beq.w	800adea <_printf_i+0x19a>
 800ac78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac80:	e03a      	b.n	800acf8 <_printf_i+0xa8>
 800ac82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac86:	2b15      	cmp	r3, #21
 800ac88:	d8f6      	bhi.n	800ac78 <_printf_i+0x28>
 800ac8a:	a101      	add	r1, pc, #4	@ (adr r1, 800ac90 <_printf_i+0x40>)
 800ac8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac90:	0800ace9 	.word	0x0800ace9
 800ac94:	0800acfd 	.word	0x0800acfd
 800ac98:	0800ac79 	.word	0x0800ac79
 800ac9c:	0800ac79 	.word	0x0800ac79
 800aca0:	0800ac79 	.word	0x0800ac79
 800aca4:	0800ac79 	.word	0x0800ac79
 800aca8:	0800acfd 	.word	0x0800acfd
 800acac:	0800ac79 	.word	0x0800ac79
 800acb0:	0800ac79 	.word	0x0800ac79
 800acb4:	0800ac79 	.word	0x0800ac79
 800acb8:	0800ac79 	.word	0x0800ac79
 800acbc:	0800adfd 	.word	0x0800adfd
 800acc0:	0800ad27 	.word	0x0800ad27
 800acc4:	0800adb7 	.word	0x0800adb7
 800acc8:	0800ac79 	.word	0x0800ac79
 800accc:	0800ac79 	.word	0x0800ac79
 800acd0:	0800ae1f 	.word	0x0800ae1f
 800acd4:	0800ac79 	.word	0x0800ac79
 800acd8:	0800ad27 	.word	0x0800ad27
 800acdc:	0800ac79 	.word	0x0800ac79
 800ace0:	0800ac79 	.word	0x0800ac79
 800ace4:	0800adbf 	.word	0x0800adbf
 800ace8:	6833      	ldr	r3, [r6, #0]
 800acea:	1d1a      	adds	r2, r3, #4
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	6032      	str	r2, [r6, #0]
 800acf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800acf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800acf8:	2301      	movs	r3, #1
 800acfa:	e09d      	b.n	800ae38 <_printf_i+0x1e8>
 800acfc:	6833      	ldr	r3, [r6, #0]
 800acfe:	6820      	ldr	r0, [r4, #0]
 800ad00:	1d19      	adds	r1, r3, #4
 800ad02:	6031      	str	r1, [r6, #0]
 800ad04:	0606      	lsls	r6, r0, #24
 800ad06:	d501      	bpl.n	800ad0c <_printf_i+0xbc>
 800ad08:	681d      	ldr	r5, [r3, #0]
 800ad0a:	e003      	b.n	800ad14 <_printf_i+0xc4>
 800ad0c:	0645      	lsls	r5, r0, #25
 800ad0e:	d5fb      	bpl.n	800ad08 <_printf_i+0xb8>
 800ad10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ad14:	2d00      	cmp	r5, #0
 800ad16:	da03      	bge.n	800ad20 <_printf_i+0xd0>
 800ad18:	232d      	movs	r3, #45	@ 0x2d
 800ad1a:	426d      	negs	r5, r5
 800ad1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad20:	4859      	ldr	r0, [pc, #356]	@ (800ae88 <_printf_i+0x238>)
 800ad22:	230a      	movs	r3, #10
 800ad24:	e011      	b.n	800ad4a <_printf_i+0xfa>
 800ad26:	6821      	ldr	r1, [r4, #0]
 800ad28:	6833      	ldr	r3, [r6, #0]
 800ad2a:	0608      	lsls	r0, r1, #24
 800ad2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ad30:	d402      	bmi.n	800ad38 <_printf_i+0xe8>
 800ad32:	0649      	lsls	r1, r1, #25
 800ad34:	bf48      	it	mi
 800ad36:	b2ad      	uxthmi	r5, r5
 800ad38:	2f6f      	cmp	r7, #111	@ 0x6f
 800ad3a:	4853      	ldr	r0, [pc, #332]	@ (800ae88 <_printf_i+0x238>)
 800ad3c:	6033      	str	r3, [r6, #0]
 800ad3e:	bf14      	ite	ne
 800ad40:	230a      	movne	r3, #10
 800ad42:	2308      	moveq	r3, #8
 800ad44:	2100      	movs	r1, #0
 800ad46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ad4a:	6866      	ldr	r6, [r4, #4]
 800ad4c:	60a6      	str	r6, [r4, #8]
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	bfa2      	ittt	ge
 800ad52:	6821      	ldrge	r1, [r4, #0]
 800ad54:	f021 0104 	bicge.w	r1, r1, #4
 800ad58:	6021      	strge	r1, [r4, #0]
 800ad5a:	b90d      	cbnz	r5, 800ad60 <_printf_i+0x110>
 800ad5c:	2e00      	cmp	r6, #0
 800ad5e:	d04b      	beq.n	800adf8 <_printf_i+0x1a8>
 800ad60:	4616      	mov	r6, r2
 800ad62:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad66:	fb03 5711 	mls	r7, r3, r1, r5
 800ad6a:	5dc7      	ldrb	r7, [r0, r7]
 800ad6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad70:	462f      	mov	r7, r5
 800ad72:	42bb      	cmp	r3, r7
 800ad74:	460d      	mov	r5, r1
 800ad76:	d9f4      	bls.n	800ad62 <_printf_i+0x112>
 800ad78:	2b08      	cmp	r3, #8
 800ad7a:	d10b      	bne.n	800ad94 <_printf_i+0x144>
 800ad7c:	6823      	ldr	r3, [r4, #0]
 800ad7e:	07df      	lsls	r7, r3, #31
 800ad80:	d508      	bpl.n	800ad94 <_printf_i+0x144>
 800ad82:	6923      	ldr	r3, [r4, #16]
 800ad84:	6861      	ldr	r1, [r4, #4]
 800ad86:	4299      	cmp	r1, r3
 800ad88:	bfde      	ittt	le
 800ad8a:	2330      	movle	r3, #48	@ 0x30
 800ad8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad90:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ad94:	1b92      	subs	r2, r2, r6
 800ad96:	6122      	str	r2, [r4, #16]
 800ad98:	f8cd a000 	str.w	sl, [sp]
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	aa03      	add	r2, sp, #12
 800ada0:	4621      	mov	r1, r4
 800ada2:	4640      	mov	r0, r8
 800ada4:	f7ff fee6 	bl	800ab74 <_printf_common>
 800ada8:	3001      	adds	r0, #1
 800adaa:	d14a      	bne.n	800ae42 <_printf_i+0x1f2>
 800adac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adb0:	b004      	add	sp, #16
 800adb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	f043 0320 	orr.w	r3, r3, #32
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	4833      	ldr	r0, [pc, #204]	@ (800ae8c <_printf_i+0x23c>)
 800adc0:	2778      	movs	r7, #120	@ 0x78
 800adc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	6831      	ldr	r1, [r6, #0]
 800adca:	061f      	lsls	r7, r3, #24
 800adcc:	f851 5b04 	ldr.w	r5, [r1], #4
 800add0:	d402      	bmi.n	800add8 <_printf_i+0x188>
 800add2:	065f      	lsls	r7, r3, #25
 800add4:	bf48      	it	mi
 800add6:	b2ad      	uxthmi	r5, r5
 800add8:	6031      	str	r1, [r6, #0]
 800adda:	07d9      	lsls	r1, r3, #31
 800addc:	bf44      	itt	mi
 800adde:	f043 0320 	orrmi.w	r3, r3, #32
 800ade2:	6023      	strmi	r3, [r4, #0]
 800ade4:	b11d      	cbz	r5, 800adee <_printf_i+0x19e>
 800ade6:	2310      	movs	r3, #16
 800ade8:	e7ac      	b.n	800ad44 <_printf_i+0xf4>
 800adea:	4827      	ldr	r0, [pc, #156]	@ (800ae88 <_printf_i+0x238>)
 800adec:	e7e9      	b.n	800adc2 <_printf_i+0x172>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	f023 0320 	bic.w	r3, r3, #32
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	e7f6      	b.n	800ade6 <_printf_i+0x196>
 800adf8:	4616      	mov	r6, r2
 800adfa:	e7bd      	b.n	800ad78 <_printf_i+0x128>
 800adfc:	6833      	ldr	r3, [r6, #0]
 800adfe:	6825      	ldr	r5, [r4, #0]
 800ae00:	6961      	ldr	r1, [r4, #20]
 800ae02:	1d18      	adds	r0, r3, #4
 800ae04:	6030      	str	r0, [r6, #0]
 800ae06:	062e      	lsls	r6, r5, #24
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	d501      	bpl.n	800ae10 <_printf_i+0x1c0>
 800ae0c:	6019      	str	r1, [r3, #0]
 800ae0e:	e002      	b.n	800ae16 <_printf_i+0x1c6>
 800ae10:	0668      	lsls	r0, r5, #25
 800ae12:	d5fb      	bpl.n	800ae0c <_printf_i+0x1bc>
 800ae14:	8019      	strh	r1, [r3, #0]
 800ae16:	2300      	movs	r3, #0
 800ae18:	6123      	str	r3, [r4, #16]
 800ae1a:	4616      	mov	r6, r2
 800ae1c:	e7bc      	b.n	800ad98 <_printf_i+0x148>
 800ae1e:	6833      	ldr	r3, [r6, #0]
 800ae20:	1d1a      	adds	r2, r3, #4
 800ae22:	6032      	str	r2, [r6, #0]
 800ae24:	681e      	ldr	r6, [r3, #0]
 800ae26:	6862      	ldr	r2, [r4, #4]
 800ae28:	2100      	movs	r1, #0
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f7f5 fa58 	bl	80002e0 <memchr>
 800ae30:	b108      	cbz	r0, 800ae36 <_printf_i+0x1e6>
 800ae32:	1b80      	subs	r0, r0, r6
 800ae34:	6060      	str	r0, [r4, #4]
 800ae36:	6863      	ldr	r3, [r4, #4]
 800ae38:	6123      	str	r3, [r4, #16]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae40:	e7aa      	b.n	800ad98 <_printf_i+0x148>
 800ae42:	6923      	ldr	r3, [r4, #16]
 800ae44:	4632      	mov	r2, r6
 800ae46:	4649      	mov	r1, r9
 800ae48:	4640      	mov	r0, r8
 800ae4a:	47d0      	blx	sl
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d0ad      	beq.n	800adac <_printf_i+0x15c>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	079b      	lsls	r3, r3, #30
 800ae54:	d413      	bmi.n	800ae7e <_printf_i+0x22e>
 800ae56:	68e0      	ldr	r0, [r4, #12]
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	4298      	cmp	r0, r3
 800ae5c:	bfb8      	it	lt
 800ae5e:	4618      	movlt	r0, r3
 800ae60:	e7a6      	b.n	800adb0 <_printf_i+0x160>
 800ae62:	2301      	movs	r3, #1
 800ae64:	4632      	mov	r2, r6
 800ae66:	4649      	mov	r1, r9
 800ae68:	4640      	mov	r0, r8
 800ae6a:	47d0      	blx	sl
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d09d      	beq.n	800adac <_printf_i+0x15c>
 800ae70:	3501      	adds	r5, #1
 800ae72:	68e3      	ldr	r3, [r4, #12]
 800ae74:	9903      	ldr	r1, [sp, #12]
 800ae76:	1a5b      	subs	r3, r3, r1
 800ae78:	42ab      	cmp	r3, r5
 800ae7a:	dcf2      	bgt.n	800ae62 <_printf_i+0x212>
 800ae7c:	e7eb      	b.n	800ae56 <_printf_i+0x206>
 800ae7e:	2500      	movs	r5, #0
 800ae80:	f104 0619 	add.w	r6, r4, #25
 800ae84:	e7f5      	b.n	800ae72 <_printf_i+0x222>
 800ae86:	bf00      	nop
 800ae88:	0800d102 	.word	0x0800d102
 800ae8c:	0800d113 	.word	0x0800d113

0800ae90 <std>:
 800ae90:	2300      	movs	r3, #0
 800ae92:	b510      	push	{r4, lr}
 800ae94:	4604      	mov	r4, r0
 800ae96:	e9c0 3300 	strd	r3, r3, [r0]
 800ae9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae9e:	6083      	str	r3, [r0, #8]
 800aea0:	8181      	strh	r1, [r0, #12]
 800aea2:	6643      	str	r3, [r0, #100]	@ 0x64
 800aea4:	81c2      	strh	r2, [r0, #14]
 800aea6:	6183      	str	r3, [r0, #24]
 800aea8:	4619      	mov	r1, r3
 800aeaa:	2208      	movs	r2, #8
 800aeac:	305c      	adds	r0, #92	@ 0x5c
 800aeae:	f000 f921 	bl	800b0f4 <memset>
 800aeb2:	4b0d      	ldr	r3, [pc, #52]	@ (800aee8 <std+0x58>)
 800aeb4:	6263      	str	r3, [r4, #36]	@ 0x24
 800aeb6:	4b0d      	ldr	r3, [pc, #52]	@ (800aeec <std+0x5c>)
 800aeb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aeba:	4b0d      	ldr	r3, [pc, #52]	@ (800aef0 <std+0x60>)
 800aebc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aebe:	4b0d      	ldr	r3, [pc, #52]	@ (800aef4 <std+0x64>)
 800aec0:	6323      	str	r3, [r4, #48]	@ 0x30
 800aec2:	4b0d      	ldr	r3, [pc, #52]	@ (800aef8 <std+0x68>)
 800aec4:	6224      	str	r4, [r4, #32]
 800aec6:	429c      	cmp	r4, r3
 800aec8:	d006      	beq.n	800aed8 <std+0x48>
 800aeca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aece:	4294      	cmp	r4, r2
 800aed0:	d002      	beq.n	800aed8 <std+0x48>
 800aed2:	33d0      	adds	r3, #208	@ 0xd0
 800aed4:	429c      	cmp	r4, r3
 800aed6:	d105      	bne.n	800aee4 <std+0x54>
 800aed8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aedc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aee0:	f000 b93e 	b.w	800b160 <__retarget_lock_init_recursive>
 800aee4:	bd10      	pop	{r4, pc}
 800aee6:	bf00      	nop
 800aee8:	0800c971 	.word	0x0800c971
 800aeec:	0800c993 	.word	0x0800c993
 800aef0:	0800c9cb 	.word	0x0800c9cb
 800aef4:	0800c9ef 	.word	0x0800c9ef
 800aef8:	24000ba4 	.word	0x24000ba4

0800aefc <stdio_exit_handler>:
 800aefc:	4a02      	ldr	r2, [pc, #8]	@ (800af08 <stdio_exit_handler+0xc>)
 800aefe:	4903      	ldr	r1, [pc, #12]	@ (800af0c <stdio_exit_handler+0x10>)
 800af00:	4803      	ldr	r0, [pc, #12]	@ (800af10 <stdio_exit_handler+0x14>)
 800af02:	f000 b869 	b.w	800afd8 <_fwalk_sglue>
 800af06:	bf00      	nop
 800af08:	24000010 	.word	0x24000010
 800af0c:	0800c205 	.word	0x0800c205
 800af10:	24000020 	.word	0x24000020

0800af14 <cleanup_stdio>:
 800af14:	6841      	ldr	r1, [r0, #4]
 800af16:	4b0c      	ldr	r3, [pc, #48]	@ (800af48 <cleanup_stdio+0x34>)
 800af18:	4299      	cmp	r1, r3
 800af1a:	b510      	push	{r4, lr}
 800af1c:	4604      	mov	r4, r0
 800af1e:	d001      	beq.n	800af24 <cleanup_stdio+0x10>
 800af20:	f001 f970 	bl	800c204 <_fflush_r>
 800af24:	68a1      	ldr	r1, [r4, #8]
 800af26:	4b09      	ldr	r3, [pc, #36]	@ (800af4c <cleanup_stdio+0x38>)
 800af28:	4299      	cmp	r1, r3
 800af2a:	d002      	beq.n	800af32 <cleanup_stdio+0x1e>
 800af2c:	4620      	mov	r0, r4
 800af2e:	f001 f969 	bl	800c204 <_fflush_r>
 800af32:	68e1      	ldr	r1, [r4, #12]
 800af34:	4b06      	ldr	r3, [pc, #24]	@ (800af50 <cleanup_stdio+0x3c>)
 800af36:	4299      	cmp	r1, r3
 800af38:	d004      	beq.n	800af44 <cleanup_stdio+0x30>
 800af3a:	4620      	mov	r0, r4
 800af3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af40:	f001 b960 	b.w	800c204 <_fflush_r>
 800af44:	bd10      	pop	{r4, pc}
 800af46:	bf00      	nop
 800af48:	24000ba4 	.word	0x24000ba4
 800af4c:	24000c0c 	.word	0x24000c0c
 800af50:	24000c74 	.word	0x24000c74

0800af54 <global_stdio_init.part.0>:
 800af54:	b510      	push	{r4, lr}
 800af56:	4b0b      	ldr	r3, [pc, #44]	@ (800af84 <global_stdio_init.part.0+0x30>)
 800af58:	4c0b      	ldr	r4, [pc, #44]	@ (800af88 <global_stdio_init.part.0+0x34>)
 800af5a:	4a0c      	ldr	r2, [pc, #48]	@ (800af8c <global_stdio_init.part.0+0x38>)
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	4620      	mov	r0, r4
 800af60:	2200      	movs	r2, #0
 800af62:	2104      	movs	r1, #4
 800af64:	f7ff ff94 	bl	800ae90 <std>
 800af68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af6c:	2201      	movs	r2, #1
 800af6e:	2109      	movs	r1, #9
 800af70:	f7ff ff8e 	bl	800ae90 <std>
 800af74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af78:	2202      	movs	r2, #2
 800af7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af7e:	2112      	movs	r1, #18
 800af80:	f7ff bf86 	b.w	800ae90 <std>
 800af84:	24000cdc 	.word	0x24000cdc
 800af88:	24000ba4 	.word	0x24000ba4
 800af8c:	0800aefd 	.word	0x0800aefd

0800af90 <__sfp_lock_acquire>:
 800af90:	4801      	ldr	r0, [pc, #4]	@ (800af98 <__sfp_lock_acquire+0x8>)
 800af92:	f000 b8e6 	b.w	800b162 <__retarget_lock_acquire_recursive>
 800af96:	bf00      	nop
 800af98:	24000ce1 	.word	0x24000ce1

0800af9c <__sfp_lock_release>:
 800af9c:	4801      	ldr	r0, [pc, #4]	@ (800afa4 <__sfp_lock_release+0x8>)
 800af9e:	f000 b8e1 	b.w	800b164 <__retarget_lock_release_recursive>
 800afa2:	bf00      	nop
 800afa4:	24000ce1 	.word	0x24000ce1

0800afa8 <__sinit>:
 800afa8:	b510      	push	{r4, lr}
 800afaa:	4604      	mov	r4, r0
 800afac:	f7ff fff0 	bl	800af90 <__sfp_lock_acquire>
 800afb0:	6a23      	ldr	r3, [r4, #32]
 800afb2:	b11b      	cbz	r3, 800afbc <__sinit+0x14>
 800afb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb8:	f7ff bff0 	b.w	800af9c <__sfp_lock_release>
 800afbc:	4b04      	ldr	r3, [pc, #16]	@ (800afd0 <__sinit+0x28>)
 800afbe:	6223      	str	r3, [r4, #32]
 800afc0:	4b04      	ldr	r3, [pc, #16]	@ (800afd4 <__sinit+0x2c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1f5      	bne.n	800afb4 <__sinit+0xc>
 800afc8:	f7ff ffc4 	bl	800af54 <global_stdio_init.part.0>
 800afcc:	e7f2      	b.n	800afb4 <__sinit+0xc>
 800afce:	bf00      	nop
 800afd0:	0800af15 	.word	0x0800af15
 800afd4:	24000cdc 	.word	0x24000cdc

0800afd8 <_fwalk_sglue>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	4607      	mov	r7, r0
 800afde:	4688      	mov	r8, r1
 800afe0:	4614      	mov	r4, r2
 800afe2:	2600      	movs	r6, #0
 800afe4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afe8:	f1b9 0901 	subs.w	r9, r9, #1
 800afec:	d505      	bpl.n	800affa <_fwalk_sglue+0x22>
 800afee:	6824      	ldr	r4, [r4, #0]
 800aff0:	2c00      	cmp	r4, #0
 800aff2:	d1f7      	bne.n	800afe4 <_fwalk_sglue+0xc>
 800aff4:	4630      	mov	r0, r6
 800aff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affa:	89ab      	ldrh	r3, [r5, #12]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d907      	bls.n	800b010 <_fwalk_sglue+0x38>
 800b000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b004:	3301      	adds	r3, #1
 800b006:	d003      	beq.n	800b010 <_fwalk_sglue+0x38>
 800b008:	4629      	mov	r1, r5
 800b00a:	4638      	mov	r0, r7
 800b00c:	47c0      	blx	r8
 800b00e:	4306      	orrs	r6, r0
 800b010:	3568      	adds	r5, #104	@ 0x68
 800b012:	e7e9      	b.n	800afe8 <_fwalk_sglue+0x10>

0800b014 <iprintf>:
 800b014:	b40f      	push	{r0, r1, r2, r3}
 800b016:	b507      	push	{r0, r1, r2, lr}
 800b018:	4906      	ldr	r1, [pc, #24]	@ (800b034 <iprintf+0x20>)
 800b01a:	ab04      	add	r3, sp, #16
 800b01c:	6808      	ldr	r0, [r1, #0]
 800b01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b022:	6881      	ldr	r1, [r0, #8]
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	f000 fea7 	bl	800bd78 <_vfiprintf_r>
 800b02a:	b003      	add	sp, #12
 800b02c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b030:	b004      	add	sp, #16
 800b032:	4770      	bx	lr
 800b034:	2400001c 	.word	0x2400001c

0800b038 <_puts_r>:
 800b038:	6a03      	ldr	r3, [r0, #32]
 800b03a:	b570      	push	{r4, r5, r6, lr}
 800b03c:	6884      	ldr	r4, [r0, #8]
 800b03e:	4605      	mov	r5, r0
 800b040:	460e      	mov	r6, r1
 800b042:	b90b      	cbnz	r3, 800b048 <_puts_r+0x10>
 800b044:	f7ff ffb0 	bl	800afa8 <__sinit>
 800b048:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b04a:	07db      	lsls	r3, r3, #31
 800b04c:	d405      	bmi.n	800b05a <_puts_r+0x22>
 800b04e:	89a3      	ldrh	r3, [r4, #12]
 800b050:	0598      	lsls	r0, r3, #22
 800b052:	d402      	bmi.n	800b05a <_puts_r+0x22>
 800b054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b056:	f000 f884 	bl	800b162 <__retarget_lock_acquire_recursive>
 800b05a:	89a3      	ldrh	r3, [r4, #12]
 800b05c:	0719      	lsls	r1, r3, #28
 800b05e:	d502      	bpl.n	800b066 <_puts_r+0x2e>
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d135      	bne.n	800b0d2 <_puts_r+0x9a>
 800b066:	4621      	mov	r1, r4
 800b068:	4628      	mov	r0, r5
 800b06a:	f001 fd03 	bl	800ca74 <__swsetup_r>
 800b06e:	b380      	cbz	r0, 800b0d2 <_puts_r+0x9a>
 800b070:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b074:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b076:	07da      	lsls	r2, r3, #31
 800b078:	d405      	bmi.n	800b086 <_puts_r+0x4e>
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	059b      	lsls	r3, r3, #22
 800b07e:	d402      	bmi.n	800b086 <_puts_r+0x4e>
 800b080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b082:	f000 f86f 	bl	800b164 <__retarget_lock_release_recursive>
 800b086:	4628      	mov	r0, r5
 800b088:	bd70      	pop	{r4, r5, r6, pc}
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	da04      	bge.n	800b098 <_puts_r+0x60>
 800b08e:	69a2      	ldr	r2, [r4, #24]
 800b090:	429a      	cmp	r2, r3
 800b092:	dc17      	bgt.n	800b0c4 <_puts_r+0x8c>
 800b094:	290a      	cmp	r1, #10
 800b096:	d015      	beq.n	800b0c4 <_puts_r+0x8c>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	1c5a      	adds	r2, r3, #1
 800b09c:	6022      	str	r2, [r4, #0]
 800b09e:	7019      	strb	r1, [r3, #0]
 800b0a0:	68a3      	ldr	r3, [r4, #8]
 800b0a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	60a3      	str	r3, [r4, #8]
 800b0aa:	2900      	cmp	r1, #0
 800b0ac:	d1ed      	bne.n	800b08a <_puts_r+0x52>
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	da11      	bge.n	800b0d6 <_puts_r+0x9e>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	210a      	movs	r1, #10
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f001 fc9d 	bl	800c9f6 <__swbuf_r>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	d0d7      	beq.n	800b070 <_puts_r+0x38>
 800b0c0:	250a      	movs	r5, #10
 800b0c2:	e7d7      	b.n	800b074 <_puts_r+0x3c>
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f001 fc95 	bl	800c9f6 <__swbuf_r>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d1e7      	bne.n	800b0a0 <_puts_r+0x68>
 800b0d0:	e7ce      	b.n	800b070 <_puts_r+0x38>
 800b0d2:	3e01      	subs	r6, #1
 800b0d4:	e7e4      	b.n	800b0a0 <_puts_r+0x68>
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	1c5a      	adds	r2, r3, #1
 800b0da:	6022      	str	r2, [r4, #0]
 800b0dc:	220a      	movs	r2, #10
 800b0de:	701a      	strb	r2, [r3, #0]
 800b0e0:	e7ee      	b.n	800b0c0 <_puts_r+0x88>
	...

0800b0e4 <puts>:
 800b0e4:	4b02      	ldr	r3, [pc, #8]	@ (800b0f0 <puts+0xc>)
 800b0e6:	4601      	mov	r1, r0
 800b0e8:	6818      	ldr	r0, [r3, #0]
 800b0ea:	f7ff bfa5 	b.w	800b038 <_puts_r>
 800b0ee:	bf00      	nop
 800b0f0:	2400001c 	.word	0x2400001c

0800b0f4 <memset>:
 800b0f4:	4402      	add	r2, r0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d100      	bne.n	800b0fe <memset+0xa>
 800b0fc:	4770      	bx	lr
 800b0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800b102:	e7f9      	b.n	800b0f8 <memset+0x4>

0800b104 <_localeconv_r>:
 800b104:	4800      	ldr	r0, [pc, #0]	@ (800b108 <_localeconv_r+0x4>)
 800b106:	4770      	bx	lr
 800b108:	2400015c 	.word	0x2400015c

0800b10c <__errno>:
 800b10c:	4b01      	ldr	r3, [pc, #4]	@ (800b114 <__errno+0x8>)
 800b10e:	6818      	ldr	r0, [r3, #0]
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	2400001c 	.word	0x2400001c

0800b118 <__libc_init_array>:
 800b118:	b570      	push	{r4, r5, r6, lr}
 800b11a:	4d0d      	ldr	r5, [pc, #52]	@ (800b150 <__libc_init_array+0x38>)
 800b11c:	4c0d      	ldr	r4, [pc, #52]	@ (800b154 <__libc_init_array+0x3c>)
 800b11e:	1b64      	subs	r4, r4, r5
 800b120:	10a4      	asrs	r4, r4, #2
 800b122:	2600      	movs	r6, #0
 800b124:	42a6      	cmp	r6, r4
 800b126:	d109      	bne.n	800b13c <__libc_init_array+0x24>
 800b128:	4d0b      	ldr	r5, [pc, #44]	@ (800b158 <__libc_init_array+0x40>)
 800b12a:	4c0c      	ldr	r4, [pc, #48]	@ (800b15c <__libc_init_array+0x44>)
 800b12c:	f001 fed8 	bl	800cee0 <_init>
 800b130:	1b64      	subs	r4, r4, r5
 800b132:	10a4      	asrs	r4, r4, #2
 800b134:	2600      	movs	r6, #0
 800b136:	42a6      	cmp	r6, r4
 800b138:	d105      	bne.n	800b146 <__libc_init_array+0x2e>
 800b13a:	bd70      	pop	{r4, r5, r6, pc}
 800b13c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b140:	4798      	blx	r3
 800b142:	3601      	adds	r6, #1
 800b144:	e7ee      	b.n	800b124 <__libc_init_array+0xc>
 800b146:	f855 3b04 	ldr.w	r3, [r5], #4
 800b14a:	4798      	blx	r3
 800b14c:	3601      	adds	r6, #1
 800b14e:	e7f2      	b.n	800b136 <__libc_init_array+0x1e>
 800b150:	0800d468 	.word	0x0800d468
 800b154:	0800d468 	.word	0x0800d468
 800b158:	0800d468 	.word	0x0800d468
 800b15c:	0800d46c 	.word	0x0800d46c

0800b160 <__retarget_lock_init_recursive>:
 800b160:	4770      	bx	lr

0800b162 <__retarget_lock_acquire_recursive>:
 800b162:	4770      	bx	lr

0800b164 <__retarget_lock_release_recursive>:
 800b164:	4770      	bx	lr

0800b166 <quorem>:
 800b166:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16a:	6903      	ldr	r3, [r0, #16]
 800b16c:	690c      	ldr	r4, [r1, #16]
 800b16e:	42a3      	cmp	r3, r4
 800b170:	4607      	mov	r7, r0
 800b172:	db7e      	blt.n	800b272 <quorem+0x10c>
 800b174:	3c01      	subs	r4, #1
 800b176:	f101 0814 	add.w	r8, r1, #20
 800b17a:	00a3      	lsls	r3, r4, #2
 800b17c:	f100 0514 	add.w	r5, r0, #20
 800b180:	9300      	str	r3, [sp, #0]
 800b182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b186:	9301      	str	r3, [sp, #4]
 800b188:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b18c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b190:	3301      	adds	r3, #1
 800b192:	429a      	cmp	r2, r3
 800b194:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b198:	fbb2 f6f3 	udiv	r6, r2, r3
 800b19c:	d32e      	bcc.n	800b1fc <quorem+0x96>
 800b19e:	f04f 0a00 	mov.w	sl, #0
 800b1a2:	46c4      	mov	ip, r8
 800b1a4:	46ae      	mov	lr, r5
 800b1a6:	46d3      	mov	fp, sl
 800b1a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1ac:	b298      	uxth	r0, r3
 800b1ae:	fb06 a000 	mla	r0, r6, r0, sl
 800b1b2:	0c02      	lsrs	r2, r0, #16
 800b1b4:	0c1b      	lsrs	r3, r3, #16
 800b1b6:	fb06 2303 	mla	r3, r6, r3, r2
 800b1ba:	f8de 2000 	ldr.w	r2, [lr]
 800b1be:	b280      	uxth	r0, r0
 800b1c0:	b292      	uxth	r2, r2
 800b1c2:	1a12      	subs	r2, r2, r0
 800b1c4:	445a      	add	r2, fp
 800b1c6:	f8de 0000 	ldr.w	r0, [lr]
 800b1ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b1d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b1d8:	b292      	uxth	r2, r2
 800b1da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b1de:	45e1      	cmp	r9, ip
 800b1e0:	f84e 2b04 	str.w	r2, [lr], #4
 800b1e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b1e8:	d2de      	bcs.n	800b1a8 <quorem+0x42>
 800b1ea:	9b00      	ldr	r3, [sp, #0]
 800b1ec:	58eb      	ldr	r3, [r5, r3]
 800b1ee:	b92b      	cbnz	r3, 800b1fc <quorem+0x96>
 800b1f0:	9b01      	ldr	r3, [sp, #4]
 800b1f2:	3b04      	subs	r3, #4
 800b1f4:	429d      	cmp	r5, r3
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	d32f      	bcc.n	800b25a <quorem+0xf4>
 800b1fa:	613c      	str	r4, [r7, #16]
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f001 faaf 	bl	800c760 <__mcmp>
 800b202:	2800      	cmp	r0, #0
 800b204:	db25      	blt.n	800b252 <quorem+0xec>
 800b206:	4629      	mov	r1, r5
 800b208:	2000      	movs	r0, #0
 800b20a:	f858 2b04 	ldr.w	r2, [r8], #4
 800b20e:	f8d1 c000 	ldr.w	ip, [r1]
 800b212:	fa1f fe82 	uxth.w	lr, r2
 800b216:	fa1f f38c 	uxth.w	r3, ip
 800b21a:	eba3 030e 	sub.w	r3, r3, lr
 800b21e:	4403      	add	r3, r0
 800b220:	0c12      	lsrs	r2, r2, #16
 800b222:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b226:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b230:	45c1      	cmp	r9, r8
 800b232:	f841 3b04 	str.w	r3, [r1], #4
 800b236:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b23a:	d2e6      	bcs.n	800b20a <quorem+0xa4>
 800b23c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b240:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b244:	b922      	cbnz	r2, 800b250 <quorem+0xea>
 800b246:	3b04      	subs	r3, #4
 800b248:	429d      	cmp	r5, r3
 800b24a:	461a      	mov	r2, r3
 800b24c:	d30b      	bcc.n	800b266 <quorem+0x100>
 800b24e:	613c      	str	r4, [r7, #16]
 800b250:	3601      	adds	r6, #1
 800b252:	4630      	mov	r0, r6
 800b254:	b003      	add	sp, #12
 800b256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25a:	6812      	ldr	r2, [r2, #0]
 800b25c:	3b04      	subs	r3, #4
 800b25e:	2a00      	cmp	r2, #0
 800b260:	d1cb      	bne.n	800b1fa <quorem+0x94>
 800b262:	3c01      	subs	r4, #1
 800b264:	e7c6      	b.n	800b1f4 <quorem+0x8e>
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	3b04      	subs	r3, #4
 800b26a:	2a00      	cmp	r2, #0
 800b26c:	d1ef      	bne.n	800b24e <quorem+0xe8>
 800b26e:	3c01      	subs	r4, #1
 800b270:	e7ea      	b.n	800b248 <quorem+0xe2>
 800b272:	2000      	movs	r0, #0
 800b274:	e7ee      	b.n	800b254 <quorem+0xee>
	...

0800b278 <_dtoa_r>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	ed2d 8b02 	vpush	{d8}
 800b280:	69c7      	ldr	r7, [r0, #28]
 800b282:	b091      	sub	sp, #68	@ 0x44
 800b284:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b288:	ec55 4b10 	vmov	r4, r5, d0
 800b28c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800b28e:	9107      	str	r1, [sp, #28]
 800b290:	4681      	mov	r9, r0
 800b292:	9209      	str	r2, [sp, #36]	@ 0x24
 800b294:	930d      	str	r3, [sp, #52]	@ 0x34
 800b296:	b97f      	cbnz	r7, 800b2b8 <_dtoa_r+0x40>
 800b298:	2010      	movs	r0, #16
 800b29a:	f000 fe85 	bl	800bfa8 <malloc>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	f8c9 001c 	str.w	r0, [r9, #28]
 800b2a4:	b920      	cbnz	r0, 800b2b0 <_dtoa_r+0x38>
 800b2a6:	4ba0      	ldr	r3, [pc, #640]	@ (800b528 <_dtoa_r+0x2b0>)
 800b2a8:	21ef      	movs	r1, #239	@ 0xef
 800b2aa:	48a0      	ldr	r0, [pc, #640]	@ (800b52c <_dtoa_r+0x2b4>)
 800b2ac:	f001 fd20 	bl	800ccf0 <__assert_func>
 800b2b0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b2b4:	6007      	str	r7, [r0, #0]
 800b2b6:	60c7      	str	r7, [r0, #12]
 800b2b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2bc:	6819      	ldr	r1, [r3, #0]
 800b2be:	b159      	cbz	r1, 800b2d8 <_dtoa_r+0x60>
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	604a      	str	r2, [r1, #4]
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	4093      	lsls	r3, r2
 800b2c8:	608b      	str	r3, [r1, #8]
 800b2ca:	4648      	mov	r0, r9
 800b2cc:	f001 f80e 	bl	800c2ec <_Bfree>
 800b2d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	1e2b      	subs	r3, r5, #0
 800b2da:	bfbb      	ittet	lt
 800b2dc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b2e0:	9303      	strlt	r3, [sp, #12]
 800b2e2:	2300      	movge	r3, #0
 800b2e4:	2201      	movlt	r2, #1
 800b2e6:	bfac      	ite	ge
 800b2e8:	6033      	strge	r3, [r6, #0]
 800b2ea:	6032      	strlt	r2, [r6, #0]
 800b2ec:	4b90      	ldr	r3, [pc, #576]	@ (800b530 <_dtoa_r+0x2b8>)
 800b2ee:	9e03      	ldr	r6, [sp, #12]
 800b2f0:	43b3      	bics	r3, r6
 800b2f2:	d110      	bne.n	800b316 <_dtoa_r+0x9e>
 800b2f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2f6:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800b300:	4323      	orrs	r3, r4
 800b302:	f000 84de 	beq.w	800bcc2 <_dtoa_r+0xa4a>
 800b306:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b308:	4f8a      	ldr	r7, [pc, #552]	@ (800b534 <_dtoa_r+0x2bc>)
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f000 84e0 	beq.w	800bcd0 <_dtoa_r+0xa58>
 800b310:	1cfb      	adds	r3, r7, #3
 800b312:	f000 bcdb 	b.w	800bccc <_dtoa_r+0xa54>
 800b316:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b31a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b322:	d10a      	bne.n	800b33a <_dtoa_r+0xc2>
 800b324:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b326:	2301      	movs	r3, #1
 800b328:	6013      	str	r3, [r2, #0]
 800b32a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b32c:	b113      	cbz	r3, 800b334 <_dtoa_r+0xbc>
 800b32e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b330:	4b81      	ldr	r3, [pc, #516]	@ (800b538 <_dtoa_r+0x2c0>)
 800b332:	6013      	str	r3, [r2, #0]
 800b334:	4f81      	ldr	r7, [pc, #516]	@ (800b53c <_dtoa_r+0x2c4>)
 800b336:	f000 bccb 	b.w	800bcd0 <_dtoa_r+0xa58>
 800b33a:	aa0e      	add	r2, sp, #56	@ 0x38
 800b33c:	a90f      	add	r1, sp, #60	@ 0x3c
 800b33e:	4648      	mov	r0, r9
 800b340:	eeb0 0b48 	vmov.f64	d0, d8
 800b344:	f001 fabc 	bl	800c8c0 <__d2b>
 800b348:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800b34c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b34e:	9001      	str	r0, [sp, #4]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d045      	beq.n	800b3e0 <_dtoa_r+0x168>
 800b354:	eeb0 7b48 	vmov.f64	d7, d8
 800b358:	ee18 1a90 	vmov	r1, s17
 800b35c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b360:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800b364:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b368:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b36c:	2500      	movs	r5, #0
 800b36e:	ee07 1a90 	vmov	s15, r1
 800b372:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800b376:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b510 <_dtoa_r+0x298>
 800b37a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b37e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800b518 <_dtoa_r+0x2a0>
 800b382:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b386:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800b520 <_dtoa_r+0x2a8>
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b392:	eeb0 7b46 	vmov.f64	d7, d6
 800b396:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b39a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b39e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a6:	ee16 8a90 	vmov	r8, s13
 800b3aa:	d508      	bpl.n	800b3be <_dtoa_r+0x146>
 800b3ac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b3b0:	eeb4 6b47 	vcmp.f64	d6, d7
 800b3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b8:	bf18      	it	ne
 800b3ba:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800b3be:	f1b8 0f16 	cmp.w	r8, #22
 800b3c2:	d82b      	bhi.n	800b41c <_dtoa_r+0x1a4>
 800b3c4:	495e      	ldr	r1, [pc, #376]	@ (800b540 <_dtoa_r+0x2c8>)
 800b3c6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800b3ca:	ed91 7b00 	vldr	d7, [r1]
 800b3ce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d6:	d501      	bpl.n	800b3dc <_dtoa_r+0x164>
 800b3d8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b3dc:	2100      	movs	r1, #0
 800b3de:	e01e      	b.n	800b41e <_dtoa_r+0x1a6>
 800b3e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800b3e8:	2920      	cmp	r1, #32
 800b3ea:	bfc1      	itttt	gt
 800b3ec:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800b3f0:	408e      	lslgt	r6, r1
 800b3f2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800b3f6:	fa24 f101 	lsrgt.w	r1, r4, r1
 800b3fa:	bfd6      	itet	le
 800b3fc:	f1c1 0120 	rsble	r1, r1, #32
 800b400:	4331      	orrgt	r1, r6
 800b402:	fa04 f101 	lslle.w	r1, r4, r1
 800b406:	ee07 1a90 	vmov	s15, r1
 800b40a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b40e:	3b01      	subs	r3, #1
 800b410:	ee17 1a90 	vmov	r1, s15
 800b414:	2501      	movs	r5, #1
 800b416:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800b41a:	e7a8      	b.n	800b36e <_dtoa_r+0xf6>
 800b41c:	2101      	movs	r1, #1
 800b41e:	1ad2      	subs	r2, r2, r3
 800b420:	1e53      	subs	r3, r2, #1
 800b422:	9306      	str	r3, [sp, #24]
 800b424:	bf45      	ittet	mi
 800b426:	f1c2 0301 	rsbmi	r3, r2, #1
 800b42a:	9305      	strmi	r3, [sp, #20]
 800b42c:	2300      	movpl	r3, #0
 800b42e:	2300      	movmi	r3, #0
 800b430:	bf4c      	ite	mi
 800b432:	9306      	strmi	r3, [sp, #24]
 800b434:	9305      	strpl	r3, [sp, #20]
 800b436:	f1b8 0f00 	cmp.w	r8, #0
 800b43a:	910c      	str	r1, [sp, #48]	@ 0x30
 800b43c:	db18      	blt.n	800b470 <_dtoa_r+0x1f8>
 800b43e:	9b06      	ldr	r3, [sp, #24]
 800b440:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b444:	4443      	add	r3, r8
 800b446:	9306      	str	r3, [sp, #24]
 800b448:	2300      	movs	r3, #0
 800b44a:	9a07      	ldr	r2, [sp, #28]
 800b44c:	2a09      	cmp	r2, #9
 800b44e:	d849      	bhi.n	800b4e4 <_dtoa_r+0x26c>
 800b450:	2a05      	cmp	r2, #5
 800b452:	bfc4      	itt	gt
 800b454:	3a04      	subgt	r2, #4
 800b456:	9207      	strgt	r2, [sp, #28]
 800b458:	9a07      	ldr	r2, [sp, #28]
 800b45a:	f1a2 0202 	sub.w	r2, r2, #2
 800b45e:	bfcc      	ite	gt
 800b460:	2400      	movgt	r4, #0
 800b462:	2401      	movle	r4, #1
 800b464:	2a03      	cmp	r2, #3
 800b466:	d848      	bhi.n	800b4fa <_dtoa_r+0x282>
 800b468:	e8df f002 	tbb	[pc, r2]
 800b46c:	3a2c2e0b 	.word	0x3a2c2e0b
 800b470:	9b05      	ldr	r3, [sp, #20]
 800b472:	2200      	movs	r2, #0
 800b474:	eba3 0308 	sub.w	r3, r3, r8
 800b478:	9305      	str	r3, [sp, #20]
 800b47a:	920a      	str	r2, [sp, #40]	@ 0x28
 800b47c:	f1c8 0300 	rsb	r3, r8, #0
 800b480:	e7e3      	b.n	800b44a <_dtoa_r+0x1d2>
 800b482:	2200      	movs	r2, #0
 800b484:	9208      	str	r2, [sp, #32]
 800b486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b488:	2a00      	cmp	r2, #0
 800b48a:	dc39      	bgt.n	800b500 <_dtoa_r+0x288>
 800b48c:	f04f 0b01 	mov.w	fp, #1
 800b490:	46da      	mov	sl, fp
 800b492:	465a      	mov	r2, fp
 800b494:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800b498:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800b49c:	2100      	movs	r1, #0
 800b49e:	2004      	movs	r0, #4
 800b4a0:	f100 0614 	add.w	r6, r0, #20
 800b4a4:	4296      	cmp	r6, r2
 800b4a6:	d930      	bls.n	800b50a <_dtoa_r+0x292>
 800b4a8:	6079      	str	r1, [r7, #4]
 800b4aa:	4648      	mov	r0, r9
 800b4ac:	9304      	str	r3, [sp, #16]
 800b4ae:	f000 fedd 	bl	800c26c <_Balloc>
 800b4b2:	9b04      	ldr	r3, [sp, #16]
 800b4b4:	4607      	mov	r7, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d146      	bne.n	800b548 <_dtoa_r+0x2d0>
 800b4ba:	4b22      	ldr	r3, [pc, #136]	@ (800b544 <_dtoa_r+0x2cc>)
 800b4bc:	4602      	mov	r2, r0
 800b4be:	f240 11af 	movw	r1, #431	@ 0x1af
 800b4c2:	e6f2      	b.n	800b2aa <_dtoa_r+0x32>
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	e7dd      	b.n	800b484 <_dtoa_r+0x20c>
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	9208      	str	r2, [sp, #32]
 800b4cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4ce:	eb08 0b02 	add.w	fp, r8, r2
 800b4d2:	f10b 0a01 	add.w	sl, fp, #1
 800b4d6:	4652      	mov	r2, sl
 800b4d8:	2a01      	cmp	r2, #1
 800b4da:	bfb8      	it	lt
 800b4dc:	2201      	movlt	r2, #1
 800b4de:	e7db      	b.n	800b498 <_dtoa_r+0x220>
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	e7f2      	b.n	800b4ca <_dtoa_r+0x252>
 800b4e4:	2401      	movs	r4, #1
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b4ec:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	46da      	mov	sl, fp
 800b4f4:	2212      	movs	r2, #18
 800b4f6:	9109      	str	r1, [sp, #36]	@ 0x24
 800b4f8:	e7ce      	b.n	800b498 <_dtoa_r+0x220>
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	9208      	str	r2, [sp, #32]
 800b4fe:	e7f5      	b.n	800b4ec <_dtoa_r+0x274>
 800b500:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800b504:	46da      	mov	sl, fp
 800b506:	465a      	mov	r2, fp
 800b508:	e7c6      	b.n	800b498 <_dtoa_r+0x220>
 800b50a:	3101      	adds	r1, #1
 800b50c:	0040      	lsls	r0, r0, #1
 800b50e:	e7c7      	b.n	800b4a0 <_dtoa_r+0x228>
 800b510:	636f4361 	.word	0x636f4361
 800b514:	3fd287a7 	.word	0x3fd287a7
 800b518:	8b60c8b3 	.word	0x8b60c8b3
 800b51c:	3fc68a28 	.word	0x3fc68a28
 800b520:	509f79fb 	.word	0x509f79fb
 800b524:	3fd34413 	.word	0x3fd34413
 800b528:	0800d131 	.word	0x0800d131
 800b52c:	0800d148 	.word	0x0800d148
 800b530:	7ff00000 	.word	0x7ff00000
 800b534:	0800d12d 	.word	0x0800d12d
 800b538:	0800d101 	.word	0x0800d101
 800b53c:	0800d100 	.word	0x0800d100
 800b540:	0800d250 	.word	0x0800d250
 800b544:	0800d1a0 	.word	0x0800d1a0
 800b548:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800b54c:	f1ba 0f0e 	cmp.w	sl, #14
 800b550:	6010      	str	r0, [r2, #0]
 800b552:	d86f      	bhi.n	800b634 <_dtoa_r+0x3bc>
 800b554:	2c00      	cmp	r4, #0
 800b556:	d06d      	beq.n	800b634 <_dtoa_r+0x3bc>
 800b558:	f1b8 0f00 	cmp.w	r8, #0
 800b55c:	f340 80c2 	ble.w	800b6e4 <_dtoa_r+0x46c>
 800b560:	4aca      	ldr	r2, [pc, #808]	@ (800b88c <_dtoa_r+0x614>)
 800b562:	f008 010f 	and.w	r1, r8, #15
 800b566:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b56a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800b56e:	ed92 7b00 	vldr	d7, [r2]
 800b572:	ea4f 1128 	mov.w	r1, r8, asr #4
 800b576:	f000 80a9 	beq.w	800b6cc <_dtoa_r+0x454>
 800b57a:	4ac5      	ldr	r2, [pc, #788]	@ (800b890 <_dtoa_r+0x618>)
 800b57c:	ed92 6b08 	vldr	d6, [r2, #32]
 800b580:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b584:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b588:	f001 010f 	and.w	r1, r1, #15
 800b58c:	2203      	movs	r2, #3
 800b58e:	48c0      	ldr	r0, [pc, #768]	@ (800b890 <_dtoa_r+0x618>)
 800b590:	2900      	cmp	r1, #0
 800b592:	f040 809d 	bne.w	800b6d0 <_dtoa_r+0x458>
 800b596:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b59a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b59e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5a2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b5a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b5a8:	2900      	cmp	r1, #0
 800b5aa:	f000 80c1 	beq.w	800b730 <_dtoa_r+0x4b8>
 800b5ae:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800b5b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ba:	f140 80b9 	bpl.w	800b730 <_dtoa_r+0x4b8>
 800b5be:	f1ba 0f00 	cmp.w	sl, #0
 800b5c2:	f000 80b5 	beq.w	800b730 <_dtoa_r+0x4b8>
 800b5c6:	f1bb 0f00 	cmp.w	fp, #0
 800b5ca:	dd31      	ble.n	800b630 <_dtoa_r+0x3b8>
 800b5cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b5d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b5d8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800b5dc:	9104      	str	r1, [sp, #16]
 800b5de:	3201      	adds	r2, #1
 800b5e0:	465c      	mov	r4, fp
 800b5e2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b5e6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800b5ea:	ee07 2a90 	vmov	s15, r2
 800b5ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b5f2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b5f6:	ee15 2a90 	vmov	r2, s11
 800b5fa:	ec51 0b15 	vmov	r0, r1, d5
 800b5fe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800b602:	2c00      	cmp	r4, #0
 800b604:	f040 8098 	bne.w	800b738 <_dtoa_r+0x4c0>
 800b608:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b60c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b610:	ec41 0b17 	vmov	d7, r0, r1
 800b614:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b61c:	f300 8261 	bgt.w	800bae2 <_dtoa_r+0x86a>
 800b620:	eeb1 7b47 	vneg.f64	d7, d7
 800b624:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b62c:	f100 80f5 	bmi.w	800b81a <_dtoa_r+0x5a2>
 800b630:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b634:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b636:	2a00      	cmp	r2, #0
 800b638:	f2c0 812c 	blt.w	800b894 <_dtoa_r+0x61c>
 800b63c:	f1b8 0f0e 	cmp.w	r8, #14
 800b640:	f300 8128 	bgt.w	800b894 <_dtoa_r+0x61c>
 800b644:	4b91      	ldr	r3, [pc, #580]	@ (800b88c <_dtoa_r+0x614>)
 800b646:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b64a:	ed93 6b00 	vldr	d6, [r3]
 800b64e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b650:	2b00      	cmp	r3, #0
 800b652:	da03      	bge.n	800b65c <_dtoa_r+0x3e4>
 800b654:	f1ba 0f00 	cmp.w	sl, #0
 800b658:	f340 80d2 	ble.w	800b800 <_dtoa_r+0x588>
 800b65c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800b660:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b664:	463e      	mov	r6, r7
 800b666:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b66a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b66e:	ee15 3a10 	vmov	r3, s10
 800b672:	3330      	adds	r3, #48	@ 0x30
 800b674:	f806 3b01 	strb.w	r3, [r6], #1
 800b678:	1bf3      	subs	r3, r6, r7
 800b67a:	459a      	cmp	sl, r3
 800b67c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b680:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b684:	f040 80f8 	bne.w	800b878 <_dtoa_r+0x600>
 800b688:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b68c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b694:	f300 80dd 	bgt.w	800b852 <_dtoa_r+0x5da>
 800b698:	eeb4 7b46 	vcmp.f64	d7, d6
 800b69c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6a0:	d104      	bne.n	800b6ac <_dtoa_r+0x434>
 800b6a2:	ee15 3a10 	vmov	r3, s10
 800b6a6:	07db      	lsls	r3, r3, #31
 800b6a8:	f100 80d3 	bmi.w	800b852 <_dtoa_r+0x5da>
 800b6ac:	9901      	ldr	r1, [sp, #4]
 800b6ae:	4648      	mov	r0, r9
 800b6b0:	f000 fe1c 	bl	800c2ec <_Bfree>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6b8:	7033      	strb	r3, [r6, #0]
 800b6ba:	f108 0301 	add.w	r3, r8, #1
 800b6be:	6013      	str	r3, [r2, #0]
 800b6c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	f000 8304 	beq.w	800bcd0 <_dtoa_r+0xa58>
 800b6c8:	601e      	str	r6, [r3, #0]
 800b6ca:	e301      	b.n	800bcd0 <_dtoa_r+0xa58>
 800b6cc:	2202      	movs	r2, #2
 800b6ce:	e75e      	b.n	800b58e <_dtoa_r+0x316>
 800b6d0:	07cc      	lsls	r4, r1, #31
 800b6d2:	d504      	bpl.n	800b6de <_dtoa_r+0x466>
 800b6d4:	ed90 6b00 	vldr	d6, [r0]
 800b6d8:	3201      	adds	r2, #1
 800b6da:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6de:	1049      	asrs	r1, r1, #1
 800b6e0:	3008      	adds	r0, #8
 800b6e2:	e755      	b.n	800b590 <_dtoa_r+0x318>
 800b6e4:	d022      	beq.n	800b72c <_dtoa_r+0x4b4>
 800b6e6:	f1c8 0100 	rsb	r1, r8, #0
 800b6ea:	4a68      	ldr	r2, [pc, #416]	@ (800b88c <_dtoa_r+0x614>)
 800b6ec:	f001 000f 	and.w	r0, r1, #15
 800b6f0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b6f4:	ed92 7b00 	vldr	d7, [r2]
 800b6f8:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b6fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b700:	4863      	ldr	r0, [pc, #396]	@ (800b890 <_dtoa_r+0x618>)
 800b702:	1109      	asrs	r1, r1, #4
 800b704:	2400      	movs	r4, #0
 800b706:	2202      	movs	r2, #2
 800b708:	b929      	cbnz	r1, 800b716 <_dtoa_r+0x49e>
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	f43f af49 	beq.w	800b5a2 <_dtoa_r+0x32a>
 800b710:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b714:	e745      	b.n	800b5a2 <_dtoa_r+0x32a>
 800b716:	07ce      	lsls	r6, r1, #31
 800b718:	d505      	bpl.n	800b726 <_dtoa_r+0x4ae>
 800b71a:	ed90 6b00 	vldr	d6, [r0]
 800b71e:	3201      	adds	r2, #1
 800b720:	2401      	movs	r4, #1
 800b722:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b726:	1049      	asrs	r1, r1, #1
 800b728:	3008      	adds	r0, #8
 800b72a:	e7ed      	b.n	800b708 <_dtoa_r+0x490>
 800b72c:	2202      	movs	r2, #2
 800b72e:	e738      	b.n	800b5a2 <_dtoa_r+0x32a>
 800b730:	f8cd 8010 	str.w	r8, [sp, #16]
 800b734:	4654      	mov	r4, sl
 800b736:	e754      	b.n	800b5e2 <_dtoa_r+0x36a>
 800b738:	4a54      	ldr	r2, [pc, #336]	@ (800b88c <_dtoa_r+0x614>)
 800b73a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800b73e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b742:	9a08      	ldr	r2, [sp, #32]
 800b744:	ec41 0b17 	vmov	d7, r0, r1
 800b748:	443c      	add	r4, r7
 800b74a:	b34a      	cbz	r2, 800b7a0 <_dtoa_r+0x528>
 800b74c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800b750:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800b754:	463e      	mov	r6, r7
 800b756:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b75a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b75e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b762:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b766:	ee14 2a90 	vmov	r2, s9
 800b76a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b76e:	3230      	adds	r2, #48	@ 0x30
 800b770:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b774:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77c:	f806 2b01 	strb.w	r2, [r6], #1
 800b780:	d438      	bmi.n	800b7f4 <_dtoa_r+0x57c>
 800b782:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b786:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b78e:	d462      	bmi.n	800b856 <_dtoa_r+0x5de>
 800b790:	42a6      	cmp	r6, r4
 800b792:	f43f af4d 	beq.w	800b630 <_dtoa_r+0x3b8>
 800b796:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b79a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b79e:	e7e0      	b.n	800b762 <_dtoa_r+0x4ea>
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	463e      	mov	r6, r7
 800b7a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b7a8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800b7ac:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b7b0:	ee14 2a90 	vmov	r2, s9
 800b7b4:	3230      	adds	r2, #48	@ 0x30
 800b7b6:	f806 2b01 	strb.w	r2, [r6], #1
 800b7ba:	42a6      	cmp	r6, r4
 800b7bc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b7c0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b7c4:	d119      	bne.n	800b7fa <_dtoa_r+0x582>
 800b7c6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800b7ca:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b7ce:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7d6:	dc3e      	bgt.n	800b856 <_dtoa_r+0x5de>
 800b7d8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b7dc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e4:	f57f af24 	bpl.w	800b630 <_dtoa_r+0x3b8>
 800b7e8:	460e      	mov	r6, r1
 800b7ea:	3901      	subs	r1, #1
 800b7ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b7f0:	2b30      	cmp	r3, #48	@ 0x30
 800b7f2:	d0f9      	beq.n	800b7e8 <_dtoa_r+0x570>
 800b7f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b7f8:	e758      	b.n	800b6ac <_dtoa_r+0x434>
 800b7fa:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b7fe:	e7d5      	b.n	800b7ac <_dtoa_r+0x534>
 800b800:	d10b      	bne.n	800b81a <_dtoa_r+0x5a2>
 800b802:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800b806:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b80a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b80e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b816:	f2c0 8161 	blt.w	800badc <_dtoa_r+0x864>
 800b81a:	2400      	movs	r4, #0
 800b81c:	4625      	mov	r5, r4
 800b81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b820:	43db      	mvns	r3, r3
 800b822:	9304      	str	r3, [sp, #16]
 800b824:	463e      	mov	r6, r7
 800b826:	f04f 0800 	mov.w	r8, #0
 800b82a:	4621      	mov	r1, r4
 800b82c:	4648      	mov	r0, r9
 800b82e:	f000 fd5d 	bl	800c2ec <_Bfree>
 800b832:	2d00      	cmp	r5, #0
 800b834:	d0de      	beq.n	800b7f4 <_dtoa_r+0x57c>
 800b836:	f1b8 0f00 	cmp.w	r8, #0
 800b83a:	d005      	beq.n	800b848 <_dtoa_r+0x5d0>
 800b83c:	45a8      	cmp	r8, r5
 800b83e:	d003      	beq.n	800b848 <_dtoa_r+0x5d0>
 800b840:	4641      	mov	r1, r8
 800b842:	4648      	mov	r0, r9
 800b844:	f000 fd52 	bl	800c2ec <_Bfree>
 800b848:	4629      	mov	r1, r5
 800b84a:	4648      	mov	r0, r9
 800b84c:	f000 fd4e 	bl	800c2ec <_Bfree>
 800b850:	e7d0      	b.n	800b7f4 <_dtoa_r+0x57c>
 800b852:	f8cd 8010 	str.w	r8, [sp, #16]
 800b856:	4633      	mov	r3, r6
 800b858:	461e      	mov	r6, r3
 800b85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b85e:	2a39      	cmp	r2, #57	@ 0x39
 800b860:	d106      	bne.n	800b870 <_dtoa_r+0x5f8>
 800b862:	429f      	cmp	r7, r3
 800b864:	d1f8      	bne.n	800b858 <_dtoa_r+0x5e0>
 800b866:	9a04      	ldr	r2, [sp, #16]
 800b868:	3201      	adds	r2, #1
 800b86a:	9204      	str	r2, [sp, #16]
 800b86c:	2230      	movs	r2, #48	@ 0x30
 800b86e:	703a      	strb	r2, [r7, #0]
 800b870:	781a      	ldrb	r2, [r3, #0]
 800b872:	3201      	adds	r2, #1
 800b874:	701a      	strb	r2, [r3, #0]
 800b876:	e7bd      	b.n	800b7f4 <_dtoa_r+0x57c>
 800b878:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b87c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b884:	f47f aeef 	bne.w	800b666 <_dtoa_r+0x3ee>
 800b888:	e710      	b.n	800b6ac <_dtoa_r+0x434>
 800b88a:	bf00      	nop
 800b88c:	0800d250 	.word	0x0800d250
 800b890:	0800d228 	.word	0x0800d228
 800b894:	9908      	ldr	r1, [sp, #32]
 800b896:	2900      	cmp	r1, #0
 800b898:	f000 80e3 	beq.w	800ba62 <_dtoa_r+0x7ea>
 800b89c:	9907      	ldr	r1, [sp, #28]
 800b89e:	2901      	cmp	r1, #1
 800b8a0:	f300 80c8 	bgt.w	800ba34 <_dtoa_r+0x7bc>
 800b8a4:	2d00      	cmp	r5, #0
 800b8a6:	f000 80c1 	beq.w	800ba2c <_dtoa_r+0x7b4>
 800b8aa:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b8ae:	9e05      	ldr	r6, [sp, #20]
 800b8b0:	461c      	mov	r4, r3
 800b8b2:	9304      	str	r3, [sp, #16]
 800b8b4:	9b05      	ldr	r3, [sp, #20]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	9305      	str	r3, [sp, #20]
 800b8ba:	9b06      	ldr	r3, [sp, #24]
 800b8bc:	2101      	movs	r1, #1
 800b8be:	4413      	add	r3, r2
 800b8c0:	4648      	mov	r0, r9
 800b8c2:	9306      	str	r3, [sp, #24]
 800b8c4:	f000 fdc6 	bl	800c454 <__i2b>
 800b8c8:	9b04      	ldr	r3, [sp, #16]
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	b166      	cbz	r6, 800b8e8 <_dtoa_r+0x670>
 800b8ce:	9a06      	ldr	r2, [sp, #24]
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	dd09      	ble.n	800b8e8 <_dtoa_r+0x670>
 800b8d4:	42b2      	cmp	r2, r6
 800b8d6:	9905      	ldr	r1, [sp, #20]
 800b8d8:	bfa8      	it	ge
 800b8da:	4632      	movge	r2, r6
 800b8dc:	1a89      	subs	r1, r1, r2
 800b8de:	9105      	str	r1, [sp, #20]
 800b8e0:	9906      	ldr	r1, [sp, #24]
 800b8e2:	1ab6      	subs	r6, r6, r2
 800b8e4:	1a8a      	subs	r2, r1, r2
 800b8e6:	9206      	str	r2, [sp, #24]
 800b8e8:	b1fb      	cbz	r3, 800b92a <_dtoa_r+0x6b2>
 800b8ea:	9a08      	ldr	r2, [sp, #32]
 800b8ec:	2a00      	cmp	r2, #0
 800b8ee:	f000 80bc 	beq.w	800ba6a <_dtoa_r+0x7f2>
 800b8f2:	b19c      	cbz	r4, 800b91c <_dtoa_r+0x6a4>
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	4648      	mov	r0, r9
 800b8fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8fc:	f000 fe6a 	bl	800c5d4 <__pow5mult>
 800b900:	9a01      	ldr	r2, [sp, #4]
 800b902:	4601      	mov	r1, r0
 800b904:	4605      	mov	r5, r0
 800b906:	4648      	mov	r0, r9
 800b908:	f000 fdba 	bl	800c480 <__multiply>
 800b90c:	9901      	ldr	r1, [sp, #4]
 800b90e:	9004      	str	r0, [sp, #16]
 800b910:	4648      	mov	r0, r9
 800b912:	f000 fceb 	bl	800c2ec <_Bfree>
 800b916:	9a04      	ldr	r2, [sp, #16]
 800b918:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b91a:	9201      	str	r2, [sp, #4]
 800b91c:	1b1a      	subs	r2, r3, r4
 800b91e:	d004      	beq.n	800b92a <_dtoa_r+0x6b2>
 800b920:	9901      	ldr	r1, [sp, #4]
 800b922:	4648      	mov	r0, r9
 800b924:	f000 fe56 	bl	800c5d4 <__pow5mult>
 800b928:	9001      	str	r0, [sp, #4]
 800b92a:	2101      	movs	r1, #1
 800b92c:	4648      	mov	r0, r9
 800b92e:	f000 fd91 	bl	800c454 <__i2b>
 800b932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b934:	4604      	mov	r4, r0
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 81d0 	beq.w	800bcdc <_dtoa_r+0xa64>
 800b93c:	461a      	mov	r2, r3
 800b93e:	4601      	mov	r1, r0
 800b940:	4648      	mov	r0, r9
 800b942:	f000 fe47 	bl	800c5d4 <__pow5mult>
 800b946:	9b07      	ldr	r3, [sp, #28]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	4604      	mov	r4, r0
 800b94c:	f300 8095 	bgt.w	800ba7a <_dtoa_r+0x802>
 800b950:	9b02      	ldr	r3, [sp, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	f040 808b 	bne.w	800ba6e <_dtoa_r+0x7f6>
 800b958:	9b03      	ldr	r3, [sp, #12]
 800b95a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b95e:	2a00      	cmp	r2, #0
 800b960:	f040 8087 	bne.w	800ba72 <_dtoa_r+0x7fa>
 800b964:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b968:	0d12      	lsrs	r2, r2, #20
 800b96a:	0512      	lsls	r2, r2, #20
 800b96c:	2a00      	cmp	r2, #0
 800b96e:	f000 8082 	beq.w	800ba76 <_dtoa_r+0x7fe>
 800b972:	9b05      	ldr	r3, [sp, #20]
 800b974:	3301      	adds	r3, #1
 800b976:	9305      	str	r3, [sp, #20]
 800b978:	9b06      	ldr	r3, [sp, #24]
 800b97a:	3301      	adds	r3, #1
 800b97c:	9306      	str	r3, [sp, #24]
 800b97e:	2301      	movs	r3, #1
 800b980:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b982:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b984:	2b00      	cmp	r3, #0
 800b986:	f000 81af 	beq.w	800bce8 <_dtoa_r+0xa70>
 800b98a:	6922      	ldr	r2, [r4, #16]
 800b98c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b990:	6910      	ldr	r0, [r2, #16]
 800b992:	f000 fd13 	bl	800c3bc <__hi0bits>
 800b996:	f1c0 0020 	rsb	r0, r0, #32
 800b99a:	9b06      	ldr	r3, [sp, #24]
 800b99c:	4418      	add	r0, r3
 800b99e:	f010 001f 	ands.w	r0, r0, #31
 800b9a2:	d076      	beq.n	800ba92 <_dtoa_r+0x81a>
 800b9a4:	f1c0 0220 	rsb	r2, r0, #32
 800b9a8:	2a04      	cmp	r2, #4
 800b9aa:	dd69      	ble.n	800ba80 <_dtoa_r+0x808>
 800b9ac:	9b05      	ldr	r3, [sp, #20]
 800b9ae:	f1c0 001c 	rsb	r0, r0, #28
 800b9b2:	4403      	add	r3, r0
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	9b06      	ldr	r3, [sp, #24]
 800b9b8:	4406      	add	r6, r0
 800b9ba:	4403      	add	r3, r0
 800b9bc:	9306      	str	r3, [sp, #24]
 800b9be:	9b05      	ldr	r3, [sp, #20]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	dd05      	ble.n	800b9d0 <_dtoa_r+0x758>
 800b9c4:	9901      	ldr	r1, [sp, #4]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4648      	mov	r0, r9
 800b9ca:	f000 fe5d 	bl	800c688 <__lshift>
 800b9ce:	9001      	str	r0, [sp, #4]
 800b9d0:	9b06      	ldr	r3, [sp, #24]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	dd05      	ble.n	800b9e2 <_dtoa_r+0x76a>
 800b9d6:	4621      	mov	r1, r4
 800b9d8:	461a      	mov	r2, r3
 800b9da:	4648      	mov	r0, r9
 800b9dc:	f000 fe54 	bl	800c688 <__lshift>
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d056      	beq.n	800ba96 <_dtoa_r+0x81e>
 800b9e8:	9801      	ldr	r0, [sp, #4]
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	f000 feb8 	bl	800c760 <__mcmp>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	da50      	bge.n	800ba96 <_dtoa_r+0x81e>
 800b9f4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 800b9f8:	9304      	str	r3, [sp, #16]
 800b9fa:	9901      	ldr	r1, [sp, #4]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	220a      	movs	r2, #10
 800ba00:	4648      	mov	r0, r9
 800ba02:	f000 fc95 	bl	800c330 <__multadd>
 800ba06:	9b08      	ldr	r3, [sp, #32]
 800ba08:	9001      	str	r0, [sp, #4]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 816e 	beq.w	800bcec <_dtoa_r+0xa74>
 800ba10:	4629      	mov	r1, r5
 800ba12:	2300      	movs	r3, #0
 800ba14:	220a      	movs	r2, #10
 800ba16:	4648      	mov	r0, r9
 800ba18:	f000 fc8a 	bl	800c330 <__multadd>
 800ba1c:	f1bb 0f00 	cmp.w	fp, #0
 800ba20:	4605      	mov	r5, r0
 800ba22:	dc64      	bgt.n	800baee <_dtoa_r+0x876>
 800ba24:	9b07      	ldr	r3, [sp, #28]
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	dc3e      	bgt.n	800baa8 <_dtoa_r+0x830>
 800ba2a:	e060      	b.n	800baee <_dtoa_r+0x876>
 800ba2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ba32:	e73c      	b.n	800b8ae <_dtoa_r+0x636>
 800ba34:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	bfbf      	itttt	lt
 800ba3c:	1ae2      	sublt	r2, r4, r3
 800ba3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba40:	189b      	addlt	r3, r3, r2
 800ba42:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ba44:	bfae      	itee	ge
 800ba46:	1b1c      	subge	r4, r3, r4
 800ba48:	4623      	movlt	r3, r4
 800ba4a:	2400      	movlt	r4, #0
 800ba4c:	f1ba 0f00 	cmp.w	sl, #0
 800ba50:	bfb5      	itete	lt
 800ba52:	9a05      	ldrlt	r2, [sp, #20]
 800ba54:	9e05      	ldrge	r6, [sp, #20]
 800ba56:	eba2 060a 	sublt.w	r6, r2, sl
 800ba5a:	4652      	movge	r2, sl
 800ba5c:	bfb8      	it	lt
 800ba5e:	2200      	movlt	r2, #0
 800ba60:	e727      	b.n	800b8b2 <_dtoa_r+0x63a>
 800ba62:	9e05      	ldr	r6, [sp, #20]
 800ba64:	9d08      	ldr	r5, [sp, #32]
 800ba66:	461c      	mov	r4, r3
 800ba68:	e730      	b.n	800b8cc <_dtoa_r+0x654>
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	e758      	b.n	800b920 <_dtoa_r+0x6a8>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	e786      	b.n	800b980 <_dtoa_r+0x708>
 800ba72:	9b02      	ldr	r3, [sp, #8]
 800ba74:	e784      	b.n	800b980 <_dtoa_r+0x708>
 800ba76:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ba78:	e783      	b.n	800b982 <_dtoa_r+0x70a>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba7e:	e784      	b.n	800b98a <_dtoa_r+0x712>
 800ba80:	d09d      	beq.n	800b9be <_dtoa_r+0x746>
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	321c      	adds	r2, #28
 800ba86:	4413      	add	r3, r2
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	9b06      	ldr	r3, [sp, #24]
 800ba8c:	4416      	add	r6, r2
 800ba8e:	4413      	add	r3, r2
 800ba90:	e794      	b.n	800b9bc <_dtoa_r+0x744>
 800ba92:	4602      	mov	r2, r0
 800ba94:	e7f5      	b.n	800ba82 <_dtoa_r+0x80a>
 800ba96:	f1ba 0f00 	cmp.w	sl, #0
 800ba9a:	f8cd 8010 	str.w	r8, [sp, #16]
 800ba9e:	46d3      	mov	fp, sl
 800baa0:	dc21      	bgt.n	800bae6 <_dtoa_r+0x86e>
 800baa2:	9b07      	ldr	r3, [sp, #28]
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	dd1e      	ble.n	800bae6 <_dtoa_r+0x86e>
 800baa8:	f1bb 0f00 	cmp.w	fp, #0
 800baac:	f47f aeb7 	bne.w	800b81e <_dtoa_r+0x5a6>
 800bab0:	4621      	mov	r1, r4
 800bab2:	465b      	mov	r3, fp
 800bab4:	2205      	movs	r2, #5
 800bab6:	4648      	mov	r0, r9
 800bab8:	f000 fc3a 	bl	800c330 <__multadd>
 800babc:	4601      	mov	r1, r0
 800babe:	4604      	mov	r4, r0
 800bac0:	9801      	ldr	r0, [sp, #4]
 800bac2:	f000 fe4d 	bl	800c760 <__mcmp>
 800bac6:	2800      	cmp	r0, #0
 800bac8:	f77f aea9 	ble.w	800b81e <_dtoa_r+0x5a6>
 800bacc:	463e      	mov	r6, r7
 800bace:	2331      	movs	r3, #49	@ 0x31
 800bad0:	f806 3b01 	strb.w	r3, [r6], #1
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	3301      	adds	r3, #1
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	e6a4      	b.n	800b826 <_dtoa_r+0x5ae>
 800badc:	f8cd 8010 	str.w	r8, [sp, #16]
 800bae0:	4654      	mov	r4, sl
 800bae2:	4625      	mov	r5, r4
 800bae4:	e7f2      	b.n	800bacc <_dtoa_r+0x854>
 800bae6:	9b08      	ldr	r3, [sp, #32]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f000 8103 	beq.w	800bcf4 <_dtoa_r+0xa7c>
 800baee:	2e00      	cmp	r6, #0
 800baf0:	dd05      	ble.n	800bafe <_dtoa_r+0x886>
 800baf2:	4629      	mov	r1, r5
 800baf4:	4632      	mov	r2, r6
 800baf6:	4648      	mov	r0, r9
 800baf8:	f000 fdc6 	bl	800c688 <__lshift>
 800bafc:	4605      	mov	r5, r0
 800bafe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d058      	beq.n	800bbb6 <_dtoa_r+0x93e>
 800bb04:	6869      	ldr	r1, [r5, #4]
 800bb06:	4648      	mov	r0, r9
 800bb08:	f000 fbb0 	bl	800c26c <_Balloc>
 800bb0c:	4606      	mov	r6, r0
 800bb0e:	b928      	cbnz	r0, 800bb1c <_dtoa_r+0x8a4>
 800bb10:	4b82      	ldr	r3, [pc, #520]	@ (800bd1c <_dtoa_r+0xaa4>)
 800bb12:	4602      	mov	r2, r0
 800bb14:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb18:	f7ff bbc7 	b.w	800b2aa <_dtoa_r+0x32>
 800bb1c:	692a      	ldr	r2, [r5, #16]
 800bb1e:	3202      	adds	r2, #2
 800bb20:	0092      	lsls	r2, r2, #2
 800bb22:	f105 010c 	add.w	r1, r5, #12
 800bb26:	300c      	adds	r0, #12
 800bb28:	f001 f8d4 	bl	800ccd4 <memcpy>
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	4631      	mov	r1, r6
 800bb30:	4648      	mov	r0, r9
 800bb32:	f000 fda9 	bl	800c688 <__lshift>
 800bb36:	1c7b      	adds	r3, r7, #1
 800bb38:	9305      	str	r3, [sp, #20]
 800bb3a:	eb07 030b 	add.w	r3, r7, fp
 800bb3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb40:	9b02      	ldr	r3, [sp, #8]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	46a8      	mov	r8, r5
 800bb48:	9308      	str	r3, [sp, #32]
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	9b05      	ldr	r3, [sp, #20]
 800bb4e:	9801      	ldr	r0, [sp, #4]
 800bb50:	4621      	mov	r1, r4
 800bb52:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bb56:	f7ff fb06 	bl	800b166 <quorem>
 800bb5a:	4641      	mov	r1, r8
 800bb5c:	9002      	str	r0, [sp, #8]
 800bb5e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bb62:	9801      	ldr	r0, [sp, #4]
 800bb64:	f000 fdfc 	bl	800c760 <__mcmp>
 800bb68:	462a      	mov	r2, r5
 800bb6a:	9006      	str	r0, [sp, #24]
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	4648      	mov	r0, r9
 800bb70:	f000 fe12 	bl	800c798 <__mdiff>
 800bb74:	68c2      	ldr	r2, [r0, #12]
 800bb76:	4606      	mov	r6, r0
 800bb78:	b9fa      	cbnz	r2, 800bbba <_dtoa_r+0x942>
 800bb7a:	4601      	mov	r1, r0
 800bb7c:	9801      	ldr	r0, [sp, #4]
 800bb7e:	f000 fdef 	bl	800c760 <__mcmp>
 800bb82:	4602      	mov	r2, r0
 800bb84:	4631      	mov	r1, r6
 800bb86:	4648      	mov	r0, r9
 800bb88:	920a      	str	r2, [sp, #40]	@ 0x28
 800bb8a:	f000 fbaf 	bl	800c2ec <_Bfree>
 800bb8e:	9b07      	ldr	r3, [sp, #28]
 800bb90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb92:	9e05      	ldr	r6, [sp, #20]
 800bb94:	ea43 0102 	orr.w	r1, r3, r2
 800bb98:	9b08      	ldr	r3, [sp, #32]
 800bb9a:	4319      	orrs	r1, r3
 800bb9c:	d10f      	bne.n	800bbbe <_dtoa_r+0x946>
 800bb9e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bba2:	d028      	beq.n	800bbf6 <_dtoa_r+0x97e>
 800bba4:	9b06      	ldr	r3, [sp, #24]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	dd02      	ble.n	800bbb0 <_dtoa_r+0x938>
 800bbaa:	9b02      	ldr	r3, [sp, #8]
 800bbac:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800bbb0:	f88b a000 	strb.w	sl, [fp]
 800bbb4:	e639      	b.n	800b82a <_dtoa_r+0x5b2>
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	e7bd      	b.n	800bb36 <_dtoa_r+0x8be>
 800bbba:	2201      	movs	r2, #1
 800bbbc:	e7e2      	b.n	800bb84 <_dtoa_r+0x90c>
 800bbbe:	9b06      	ldr	r3, [sp, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	db04      	blt.n	800bbce <_dtoa_r+0x956>
 800bbc4:	9907      	ldr	r1, [sp, #28]
 800bbc6:	430b      	orrs	r3, r1
 800bbc8:	9908      	ldr	r1, [sp, #32]
 800bbca:	430b      	orrs	r3, r1
 800bbcc:	d120      	bne.n	800bc10 <_dtoa_r+0x998>
 800bbce:	2a00      	cmp	r2, #0
 800bbd0:	ddee      	ble.n	800bbb0 <_dtoa_r+0x938>
 800bbd2:	9901      	ldr	r1, [sp, #4]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	4648      	mov	r0, r9
 800bbd8:	f000 fd56 	bl	800c688 <__lshift>
 800bbdc:	4621      	mov	r1, r4
 800bbde:	9001      	str	r0, [sp, #4]
 800bbe0:	f000 fdbe 	bl	800c760 <__mcmp>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	dc03      	bgt.n	800bbf0 <_dtoa_r+0x978>
 800bbe8:	d1e2      	bne.n	800bbb0 <_dtoa_r+0x938>
 800bbea:	f01a 0f01 	tst.w	sl, #1
 800bbee:	d0df      	beq.n	800bbb0 <_dtoa_r+0x938>
 800bbf0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bbf4:	d1d9      	bne.n	800bbaa <_dtoa_r+0x932>
 800bbf6:	2339      	movs	r3, #57	@ 0x39
 800bbf8:	f88b 3000 	strb.w	r3, [fp]
 800bbfc:	4633      	mov	r3, r6
 800bbfe:	461e      	mov	r6, r3
 800bc00:	3b01      	subs	r3, #1
 800bc02:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc06:	2a39      	cmp	r2, #57	@ 0x39
 800bc08:	d053      	beq.n	800bcb2 <_dtoa_r+0xa3a>
 800bc0a:	3201      	adds	r2, #1
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	e60c      	b.n	800b82a <_dtoa_r+0x5b2>
 800bc10:	2a00      	cmp	r2, #0
 800bc12:	dd07      	ble.n	800bc24 <_dtoa_r+0x9ac>
 800bc14:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800bc18:	d0ed      	beq.n	800bbf6 <_dtoa_r+0x97e>
 800bc1a:	f10a 0301 	add.w	r3, sl, #1
 800bc1e:	f88b 3000 	strb.w	r3, [fp]
 800bc22:	e602      	b.n	800b82a <_dtoa_r+0x5b2>
 800bc24:	9b05      	ldr	r3, [sp, #20]
 800bc26:	9a05      	ldr	r2, [sp, #20]
 800bc28:	f803 ac01 	strb.w	sl, [r3, #-1]
 800bc2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	d029      	beq.n	800bc86 <_dtoa_r+0xa0e>
 800bc32:	9901      	ldr	r1, [sp, #4]
 800bc34:	2300      	movs	r3, #0
 800bc36:	220a      	movs	r2, #10
 800bc38:	4648      	mov	r0, r9
 800bc3a:	f000 fb79 	bl	800c330 <__multadd>
 800bc3e:	45a8      	cmp	r8, r5
 800bc40:	9001      	str	r0, [sp, #4]
 800bc42:	f04f 0300 	mov.w	r3, #0
 800bc46:	f04f 020a 	mov.w	r2, #10
 800bc4a:	4641      	mov	r1, r8
 800bc4c:	4648      	mov	r0, r9
 800bc4e:	d107      	bne.n	800bc60 <_dtoa_r+0x9e8>
 800bc50:	f000 fb6e 	bl	800c330 <__multadd>
 800bc54:	4680      	mov	r8, r0
 800bc56:	4605      	mov	r5, r0
 800bc58:	9b05      	ldr	r3, [sp, #20]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	9305      	str	r3, [sp, #20]
 800bc5e:	e775      	b.n	800bb4c <_dtoa_r+0x8d4>
 800bc60:	f000 fb66 	bl	800c330 <__multadd>
 800bc64:	4629      	mov	r1, r5
 800bc66:	4680      	mov	r8, r0
 800bc68:	2300      	movs	r3, #0
 800bc6a:	220a      	movs	r2, #10
 800bc6c:	4648      	mov	r0, r9
 800bc6e:	f000 fb5f 	bl	800c330 <__multadd>
 800bc72:	4605      	mov	r5, r0
 800bc74:	e7f0      	b.n	800bc58 <_dtoa_r+0x9e0>
 800bc76:	f1bb 0f00 	cmp.w	fp, #0
 800bc7a:	bfcc      	ite	gt
 800bc7c:	465e      	movgt	r6, fp
 800bc7e:	2601      	movle	r6, #1
 800bc80:	443e      	add	r6, r7
 800bc82:	f04f 0800 	mov.w	r8, #0
 800bc86:	9901      	ldr	r1, [sp, #4]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	4648      	mov	r0, r9
 800bc8c:	f000 fcfc 	bl	800c688 <__lshift>
 800bc90:	4621      	mov	r1, r4
 800bc92:	9001      	str	r0, [sp, #4]
 800bc94:	f000 fd64 	bl	800c760 <__mcmp>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	dcaf      	bgt.n	800bbfc <_dtoa_r+0x984>
 800bc9c:	d102      	bne.n	800bca4 <_dtoa_r+0xa2c>
 800bc9e:	f01a 0f01 	tst.w	sl, #1
 800bca2:	d1ab      	bne.n	800bbfc <_dtoa_r+0x984>
 800bca4:	4633      	mov	r3, r6
 800bca6:	461e      	mov	r6, r3
 800bca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcac:	2a30      	cmp	r2, #48	@ 0x30
 800bcae:	d0fa      	beq.n	800bca6 <_dtoa_r+0xa2e>
 800bcb0:	e5bb      	b.n	800b82a <_dtoa_r+0x5b2>
 800bcb2:	429f      	cmp	r7, r3
 800bcb4:	d1a3      	bne.n	800bbfe <_dtoa_r+0x986>
 800bcb6:	9b04      	ldr	r3, [sp, #16]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	2331      	movs	r3, #49	@ 0x31
 800bcbe:	703b      	strb	r3, [r7, #0]
 800bcc0:	e5b3      	b.n	800b82a <_dtoa_r+0x5b2>
 800bcc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bcc4:	4f16      	ldr	r7, [pc, #88]	@ (800bd20 <_dtoa_r+0xaa8>)
 800bcc6:	b11b      	cbz	r3, 800bcd0 <_dtoa_r+0xa58>
 800bcc8:	f107 0308 	add.w	r3, r7, #8
 800bccc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bcce:	6013      	str	r3, [r2, #0]
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	b011      	add	sp, #68	@ 0x44
 800bcd4:	ecbd 8b02 	vpop	{d8}
 800bcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcdc:	9b07      	ldr	r3, [sp, #28]
 800bcde:	2b01      	cmp	r3, #1
 800bce0:	f77f ae36 	ble.w	800b950 <_dtoa_r+0x6d8>
 800bce4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bce6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bce8:	2001      	movs	r0, #1
 800bcea:	e656      	b.n	800b99a <_dtoa_r+0x722>
 800bcec:	f1bb 0f00 	cmp.w	fp, #0
 800bcf0:	f77f aed7 	ble.w	800baa2 <_dtoa_r+0x82a>
 800bcf4:	463e      	mov	r6, r7
 800bcf6:	9801      	ldr	r0, [sp, #4]
 800bcf8:	4621      	mov	r1, r4
 800bcfa:	f7ff fa34 	bl	800b166 <quorem>
 800bcfe:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800bd02:	f806 ab01 	strb.w	sl, [r6], #1
 800bd06:	1bf2      	subs	r2, r6, r7
 800bd08:	4593      	cmp	fp, r2
 800bd0a:	ddb4      	ble.n	800bc76 <_dtoa_r+0x9fe>
 800bd0c:	9901      	ldr	r1, [sp, #4]
 800bd0e:	2300      	movs	r3, #0
 800bd10:	220a      	movs	r2, #10
 800bd12:	4648      	mov	r0, r9
 800bd14:	f000 fb0c 	bl	800c330 <__multadd>
 800bd18:	9001      	str	r0, [sp, #4]
 800bd1a:	e7ec      	b.n	800bcf6 <_dtoa_r+0xa7e>
 800bd1c:	0800d1a0 	.word	0x0800d1a0
 800bd20:	0800d124 	.word	0x0800d124

0800bd24 <__sfputc_r>:
 800bd24:	6893      	ldr	r3, [r2, #8]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	b410      	push	{r4}
 800bd2c:	6093      	str	r3, [r2, #8]
 800bd2e:	da08      	bge.n	800bd42 <__sfputc_r+0x1e>
 800bd30:	6994      	ldr	r4, [r2, #24]
 800bd32:	42a3      	cmp	r3, r4
 800bd34:	db01      	blt.n	800bd3a <__sfputc_r+0x16>
 800bd36:	290a      	cmp	r1, #10
 800bd38:	d103      	bne.n	800bd42 <__sfputc_r+0x1e>
 800bd3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd3e:	f000 be5a 	b.w	800c9f6 <__swbuf_r>
 800bd42:	6813      	ldr	r3, [r2, #0]
 800bd44:	1c58      	adds	r0, r3, #1
 800bd46:	6010      	str	r0, [r2, #0]
 800bd48:	7019      	strb	r1, [r3, #0]
 800bd4a:	4608      	mov	r0, r1
 800bd4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd50:	4770      	bx	lr

0800bd52 <__sfputs_r>:
 800bd52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd54:	4606      	mov	r6, r0
 800bd56:	460f      	mov	r7, r1
 800bd58:	4614      	mov	r4, r2
 800bd5a:	18d5      	adds	r5, r2, r3
 800bd5c:	42ac      	cmp	r4, r5
 800bd5e:	d101      	bne.n	800bd64 <__sfputs_r+0x12>
 800bd60:	2000      	movs	r0, #0
 800bd62:	e007      	b.n	800bd74 <__sfputs_r+0x22>
 800bd64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd68:	463a      	mov	r2, r7
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f7ff ffda 	bl	800bd24 <__sfputc_r>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d1f3      	bne.n	800bd5c <__sfputs_r+0xa>
 800bd74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd78 <_vfiprintf_r>:
 800bd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	460d      	mov	r5, r1
 800bd7e:	b09d      	sub	sp, #116	@ 0x74
 800bd80:	4614      	mov	r4, r2
 800bd82:	4698      	mov	r8, r3
 800bd84:	4606      	mov	r6, r0
 800bd86:	b118      	cbz	r0, 800bd90 <_vfiprintf_r+0x18>
 800bd88:	6a03      	ldr	r3, [r0, #32]
 800bd8a:	b90b      	cbnz	r3, 800bd90 <_vfiprintf_r+0x18>
 800bd8c:	f7ff f90c 	bl	800afa8 <__sinit>
 800bd90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd92:	07d9      	lsls	r1, r3, #31
 800bd94:	d405      	bmi.n	800bda2 <_vfiprintf_r+0x2a>
 800bd96:	89ab      	ldrh	r3, [r5, #12]
 800bd98:	059a      	lsls	r2, r3, #22
 800bd9a:	d402      	bmi.n	800bda2 <_vfiprintf_r+0x2a>
 800bd9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd9e:	f7ff f9e0 	bl	800b162 <__retarget_lock_acquire_recursive>
 800bda2:	89ab      	ldrh	r3, [r5, #12]
 800bda4:	071b      	lsls	r3, r3, #28
 800bda6:	d501      	bpl.n	800bdac <_vfiprintf_r+0x34>
 800bda8:	692b      	ldr	r3, [r5, #16]
 800bdaa:	b99b      	cbnz	r3, 800bdd4 <_vfiprintf_r+0x5c>
 800bdac:	4629      	mov	r1, r5
 800bdae:	4630      	mov	r0, r6
 800bdb0:	f000 fe60 	bl	800ca74 <__swsetup_r>
 800bdb4:	b170      	cbz	r0, 800bdd4 <_vfiprintf_r+0x5c>
 800bdb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdb8:	07dc      	lsls	r4, r3, #31
 800bdba:	d504      	bpl.n	800bdc6 <_vfiprintf_r+0x4e>
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdc0:	b01d      	add	sp, #116	@ 0x74
 800bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc6:	89ab      	ldrh	r3, [r5, #12]
 800bdc8:	0598      	lsls	r0, r3, #22
 800bdca:	d4f7      	bmi.n	800bdbc <_vfiprintf_r+0x44>
 800bdcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdce:	f7ff f9c9 	bl	800b164 <__retarget_lock_release_recursive>
 800bdd2:	e7f3      	b.n	800bdbc <_vfiprintf_r+0x44>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdd8:	2320      	movs	r3, #32
 800bdda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdde:	f8cd 800c 	str.w	r8, [sp, #12]
 800bde2:	2330      	movs	r3, #48	@ 0x30
 800bde4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf94 <_vfiprintf_r+0x21c>
 800bde8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdec:	f04f 0901 	mov.w	r9, #1
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	469a      	mov	sl, r3
 800bdf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdf8:	b10a      	cbz	r2, 800bdfe <_vfiprintf_r+0x86>
 800bdfa:	2a25      	cmp	r2, #37	@ 0x25
 800bdfc:	d1f9      	bne.n	800bdf2 <_vfiprintf_r+0x7a>
 800bdfe:	ebba 0b04 	subs.w	fp, sl, r4
 800be02:	d00b      	beq.n	800be1c <_vfiprintf_r+0xa4>
 800be04:	465b      	mov	r3, fp
 800be06:	4622      	mov	r2, r4
 800be08:	4629      	mov	r1, r5
 800be0a:	4630      	mov	r0, r6
 800be0c:	f7ff ffa1 	bl	800bd52 <__sfputs_r>
 800be10:	3001      	adds	r0, #1
 800be12:	f000 80a7 	beq.w	800bf64 <_vfiprintf_r+0x1ec>
 800be16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be18:	445a      	add	r2, fp
 800be1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800be1c:	f89a 3000 	ldrb.w	r3, [sl]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 809f 	beq.w	800bf64 <_vfiprintf_r+0x1ec>
 800be26:	2300      	movs	r3, #0
 800be28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be30:	f10a 0a01 	add.w	sl, sl, #1
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	9307      	str	r3, [sp, #28]
 800be38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800be3e:	4654      	mov	r4, sl
 800be40:	2205      	movs	r2, #5
 800be42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be46:	4853      	ldr	r0, [pc, #332]	@ (800bf94 <_vfiprintf_r+0x21c>)
 800be48:	f7f4 fa4a 	bl	80002e0 <memchr>
 800be4c:	9a04      	ldr	r2, [sp, #16]
 800be4e:	b9d8      	cbnz	r0, 800be88 <_vfiprintf_r+0x110>
 800be50:	06d1      	lsls	r1, r2, #27
 800be52:	bf44      	itt	mi
 800be54:	2320      	movmi	r3, #32
 800be56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be5a:	0713      	lsls	r3, r2, #28
 800be5c:	bf44      	itt	mi
 800be5e:	232b      	movmi	r3, #43	@ 0x2b
 800be60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be64:	f89a 3000 	ldrb.w	r3, [sl]
 800be68:	2b2a      	cmp	r3, #42	@ 0x2a
 800be6a:	d015      	beq.n	800be98 <_vfiprintf_r+0x120>
 800be6c:	9a07      	ldr	r2, [sp, #28]
 800be6e:	4654      	mov	r4, sl
 800be70:	2000      	movs	r0, #0
 800be72:	f04f 0c0a 	mov.w	ip, #10
 800be76:	4621      	mov	r1, r4
 800be78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be7c:	3b30      	subs	r3, #48	@ 0x30
 800be7e:	2b09      	cmp	r3, #9
 800be80:	d94b      	bls.n	800bf1a <_vfiprintf_r+0x1a2>
 800be82:	b1b0      	cbz	r0, 800beb2 <_vfiprintf_r+0x13a>
 800be84:	9207      	str	r2, [sp, #28]
 800be86:	e014      	b.n	800beb2 <_vfiprintf_r+0x13a>
 800be88:	eba0 0308 	sub.w	r3, r0, r8
 800be8c:	fa09 f303 	lsl.w	r3, r9, r3
 800be90:	4313      	orrs	r3, r2
 800be92:	9304      	str	r3, [sp, #16]
 800be94:	46a2      	mov	sl, r4
 800be96:	e7d2      	b.n	800be3e <_vfiprintf_r+0xc6>
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	1d19      	adds	r1, r3, #4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	9103      	str	r1, [sp, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bfbb      	ittet	lt
 800bea4:	425b      	neglt	r3, r3
 800bea6:	f042 0202 	orrlt.w	r2, r2, #2
 800beaa:	9307      	strge	r3, [sp, #28]
 800beac:	9307      	strlt	r3, [sp, #28]
 800beae:	bfb8      	it	lt
 800beb0:	9204      	strlt	r2, [sp, #16]
 800beb2:	7823      	ldrb	r3, [r4, #0]
 800beb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800beb6:	d10a      	bne.n	800bece <_vfiprintf_r+0x156>
 800beb8:	7863      	ldrb	r3, [r4, #1]
 800beba:	2b2a      	cmp	r3, #42	@ 0x2a
 800bebc:	d132      	bne.n	800bf24 <_vfiprintf_r+0x1ac>
 800bebe:	9b03      	ldr	r3, [sp, #12]
 800bec0:	1d1a      	adds	r2, r3, #4
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	9203      	str	r2, [sp, #12]
 800bec6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800beca:	3402      	adds	r4, #2
 800becc:	9305      	str	r3, [sp, #20]
 800bece:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bfa4 <_vfiprintf_r+0x22c>
 800bed2:	7821      	ldrb	r1, [r4, #0]
 800bed4:	2203      	movs	r2, #3
 800bed6:	4650      	mov	r0, sl
 800bed8:	f7f4 fa02 	bl	80002e0 <memchr>
 800bedc:	b138      	cbz	r0, 800beee <_vfiprintf_r+0x176>
 800bede:	9b04      	ldr	r3, [sp, #16]
 800bee0:	eba0 000a 	sub.w	r0, r0, sl
 800bee4:	2240      	movs	r2, #64	@ 0x40
 800bee6:	4082      	lsls	r2, r0
 800bee8:	4313      	orrs	r3, r2
 800beea:	3401      	adds	r4, #1
 800beec:	9304      	str	r3, [sp, #16]
 800beee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bef2:	4829      	ldr	r0, [pc, #164]	@ (800bf98 <_vfiprintf_r+0x220>)
 800bef4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bef8:	2206      	movs	r2, #6
 800befa:	f7f4 f9f1 	bl	80002e0 <memchr>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d03f      	beq.n	800bf82 <_vfiprintf_r+0x20a>
 800bf02:	4b26      	ldr	r3, [pc, #152]	@ (800bf9c <_vfiprintf_r+0x224>)
 800bf04:	bb1b      	cbnz	r3, 800bf4e <_vfiprintf_r+0x1d6>
 800bf06:	9b03      	ldr	r3, [sp, #12]
 800bf08:	3307      	adds	r3, #7
 800bf0a:	f023 0307 	bic.w	r3, r3, #7
 800bf0e:	3308      	adds	r3, #8
 800bf10:	9303      	str	r3, [sp, #12]
 800bf12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf14:	443b      	add	r3, r7
 800bf16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf18:	e76a      	b.n	800bdf0 <_vfiprintf_r+0x78>
 800bf1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf1e:	460c      	mov	r4, r1
 800bf20:	2001      	movs	r0, #1
 800bf22:	e7a8      	b.n	800be76 <_vfiprintf_r+0xfe>
 800bf24:	2300      	movs	r3, #0
 800bf26:	3401      	adds	r4, #1
 800bf28:	9305      	str	r3, [sp, #20]
 800bf2a:	4619      	mov	r1, r3
 800bf2c:	f04f 0c0a 	mov.w	ip, #10
 800bf30:	4620      	mov	r0, r4
 800bf32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf36:	3a30      	subs	r2, #48	@ 0x30
 800bf38:	2a09      	cmp	r2, #9
 800bf3a:	d903      	bls.n	800bf44 <_vfiprintf_r+0x1cc>
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d0c6      	beq.n	800bece <_vfiprintf_r+0x156>
 800bf40:	9105      	str	r1, [sp, #20]
 800bf42:	e7c4      	b.n	800bece <_vfiprintf_r+0x156>
 800bf44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf48:	4604      	mov	r4, r0
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e7f0      	b.n	800bf30 <_vfiprintf_r+0x1b8>
 800bf4e:	ab03      	add	r3, sp, #12
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	462a      	mov	r2, r5
 800bf54:	4b12      	ldr	r3, [pc, #72]	@ (800bfa0 <_vfiprintf_r+0x228>)
 800bf56:	a904      	add	r1, sp, #16
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7fe fbf1 	bl	800a740 <_printf_float>
 800bf5e:	4607      	mov	r7, r0
 800bf60:	1c78      	adds	r0, r7, #1
 800bf62:	d1d6      	bne.n	800bf12 <_vfiprintf_r+0x19a>
 800bf64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf66:	07d9      	lsls	r1, r3, #31
 800bf68:	d405      	bmi.n	800bf76 <_vfiprintf_r+0x1fe>
 800bf6a:	89ab      	ldrh	r3, [r5, #12]
 800bf6c:	059a      	lsls	r2, r3, #22
 800bf6e:	d402      	bmi.n	800bf76 <_vfiprintf_r+0x1fe>
 800bf70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf72:	f7ff f8f7 	bl	800b164 <__retarget_lock_release_recursive>
 800bf76:	89ab      	ldrh	r3, [r5, #12]
 800bf78:	065b      	lsls	r3, r3, #25
 800bf7a:	f53f af1f 	bmi.w	800bdbc <_vfiprintf_r+0x44>
 800bf7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf80:	e71e      	b.n	800bdc0 <_vfiprintf_r+0x48>
 800bf82:	ab03      	add	r3, sp, #12
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	462a      	mov	r2, r5
 800bf88:	4b05      	ldr	r3, [pc, #20]	@ (800bfa0 <_vfiprintf_r+0x228>)
 800bf8a:	a904      	add	r1, sp, #16
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f7fe fe5f 	bl	800ac50 <_printf_i>
 800bf92:	e7e4      	b.n	800bf5e <_vfiprintf_r+0x1e6>
 800bf94:	0800d1b1 	.word	0x0800d1b1
 800bf98:	0800d1bb 	.word	0x0800d1bb
 800bf9c:	0800a741 	.word	0x0800a741
 800bfa0:	0800bd53 	.word	0x0800bd53
 800bfa4:	0800d1b7 	.word	0x0800d1b7

0800bfa8 <malloc>:
 800bfa8:	4b02      	ldr	r3, [pc, #8]	@ (800bfb4 <malloc+0xc>)
 800bfaa:	4601      	mov	r1, r0
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	f000 b825 	b.w	800bffc <_malloc_r>
 800bfb2:	bf00      	nop
 800bfb4:	2400001c 	.word	0x2400001c

0800bfb8 <sbrk_aligned>:
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	4e0f      	ldr	r6, [pc, #60]	@ (800bff8 <sbrk_aligned+0x40>)
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	6831      	ldr	r1, [r6, #0]
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	b911      	cbnz	r1, 800bfca <sbrk_aligned+0x12>
 800bfc4:	f000 fe64 	bl	800cc90 <_sbrk_r>
 800bfc8:	6030      	str	r0, [r6, #0]
 800bfca:	4621      	mov	r1, r4
 800bfcc:	4628      	mov	r0, r5
 800bfce:	f000 fe5f 	bl	800cc90 <_sbrk_r>
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	d103      	bne.n	800bfde <sbrk_aligned+0x26>
 800bfd6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bfda:	4620      	mov	r0, r4
 800bfdc:	bd70      	pop	{r4, r5, r6, pc}
 800bfde:	1cc4      	adds	r4, r0, #3
 800bfe0:	f024 0403 	bic.w	r4, r4, #3
 800bfe4:	42a0      	cmp	r0, r4
 800bfe6:	d0f8      	beq.n	800bfda <sbrk_aligned+0x22>
 800bfe8:	1a21      	subs	r1, r4, r0
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 fe50 	bl	800cc90 <_sbrk_r>
 800bff0:	3001      	adds	r0, #1
 800bff2:	d1f2      	bne.n	800bfda <sbrk_aligned+0x22>
 800bff4:	e7ef      	b.n	800bfd6 <sbrk_aligned+0x1e>
 800bff6:	bf00      	nop
 800bff8:	24000ce4 	.word	0x24000ce4

0800bffc <_malloc_r>:
 800bffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c000:	1ccd      	adds	r5, r1, #3
 800c002:	f025 0503 	bic.w	r5, r5, #3
 800c006:	3508      	adds	r5, #8
 800c008:	2d0c      	cmp	r5, #12
 800c00a:	bf38      	it	cc
 800c00c:	250c      	movcc	r5, #12
 800c00e:	2d00      	cmp	r5, #0
 800c010:	4606      	mov	r6, r0
 800c012:	db01      	blt.n	800c018 <_malloc_r+0x1c>
 800c014:	42a9      	cmp	r1, r5
 800c016:	d904      	bls.n	800c022 <_malloc_r+0x26>
 800c018:	230c      	movs	r3, #12
 800c01a:	6033      	str	r3, [r6, #0]
 800c01c:	2000      	movs	r0, #0
 800c01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c0f8 <_malloc_r+0xfc>
 800c026:	f000 f915 	bl	800c254 <__malloc_lock>
 800c02a:	f8d8 3000 	ldr.w	r3, [r8]
 800c02e:	461c      	mov	r4, r3
 800c030:	bb44      	cbnz	r4, 800c084 <_malloc_r+0x88>
 800c032:	4629      	mov	r1, r5
 800c034:	4630      	mov	r0, r6
 800c036:	f7ff ffbf 	bl	800bfb8 <sbrk_aligned>
 800c03a:	1c43      	adds	r3, r0, #1
 800c03c:	4604      	mov	r4, r0
 800c03e:	d158      	bne.n	800c0f2 <_malloc_r+0xf6>
 800c040:	f8d8 4000 	ldr.w	r4, [r8]
 800c044:	4627      	mov	r7, r4
 800c046:	2f00      	cmp	r7, #0
 800c048:	d143      	bne.n	800c0d2 <_malloc_r+0xd6>
 800c04a:	2c00      	cmp	r4, #0
 800c04c:	d04b      	beq.n	800c0e6 <_malloc_r+0xea>
 800c04e:	6823      	ldr	r3, [r4, #0]
 800c050:	4639      	mov	r1, r7
 800c052:	4630      	mov	r0, r6
 800c054:	eb04 0903 	add.w	r9, r4, r3
 800c058:	f000 fe1a 	bl	800cc90 <_sbrk_r>
 800c05c:	4581      	cmp	r9, r0
 800c05e:	d142      	bne.n	800c0e6 <_malloc_r+0xea>
 800c060:	6821      	ldr	r1, [r4, #0]
 800c062:	1a6d      	subs	r5, r5, r1
 800c064:	4629      	mov	r1, r5
 800c066:	4630      	mov	r0, r6
 800c068:	f7ff ffa6 	bl	800bfb8 <sbrk_aligned>
 800c06c:	3001      	adds	r0, #1
 800c06e:	d03a      	beq.n	800c0e6 <_malloc_r+0xea>
 800c070:	6823      	ldr	r3, [r4, #0]
 800c072:	442b      	add	r3, r5
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	f8d8 3000 	ldr.w	r3, [r8]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	bb62      	cbnz	r2, 800c0d8 <_malloc_r+0xdc>
 800c07e:	f8c8 7000 	str.w	r7, [r8]
 800c082:	e00f      	b.n	800c0a4 <_malloc_r+0xa8>
 800c084:	6822      	ldr	r2, [r4, #0]
 800c086:	1b52      	subs	r2, r2, r5
 800c088:	d420      	bmi.n	800c0cc <_malloc_r+0xd0>
 800c08a:	2a0b      	cmp	r2, #11
 800c08c:	d917      	bls.n	800c0be <_malloc_r+0xc2>
 800c08e:	1961      	adds	r1, r4, r5
 800c090:	42a3      	cmp	r3, r4
 800c092:	6025      	str	r5, [r4, #0]
 800c094:	bf18      	it	ne
 800c096:	6059      	strne	r1, [r3, #4]
 800c098:	6863      	ldr	r3, [r4, #4]
 800c09a:	bf08      	it	eq
 800c09c:	f8c8 1000 	streq.w	r1, [r8]
 800c0a0:	5162      	str	r2, [r4, r5]
 800c0a2:	604b      	str	r3, [r1, #4]
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f000 f8db 	bl	800c260 <__malloc_unlock>
 800c0aa:	f104 000b 	add.w	r0, r4, #11
 800c0ae:	1d23      	adds	r3, r4, #4
 800c0b0:	f020 0007 	bic.w	r0, r0, #7
 800c0b4:	1ac2      	subs	r2, r0, r3
 800c0b6:	bf1c      	itt	ne
 800c0b8:	1a1b      	subne	r3, r3, r0
 800c0ba:	50a3      	strne	r3, [r4, r2]
 800c0bc:	e7af      	b.n	800c01e <_malloc_r+0x22>
 800c0be:	6862      	ldr	r2, [r4, #4]
 800c0c0:	42a3      	cmp	r3, r4
 800c0c2:	bf0c      	ite	eq
 800c0c4:	f8c8 2000 	streq.w	r2, [r8]
 800c0c8:	605a      	strne	r2, [r3, #4]
 800c0ca:	e7eb      	b.n	800c0a4 <_malloc_r+0xa8>
 800c0cc:	4623      	mov	r3, r4
 800c0ce:	6864      	ldr	r4, [r4, #4]
 800c0d0:	e7ae      	b.n	800c030 <_malloc_r+0x34>
 800c0d2:	463c      	mov	r4, r7
 800c0d4:	687f      	ldr	r7, [r7, #4]
 800c0d6:	e7b6      	b.n	800c046 <_malloc_r+0x4a>
 800c0d8:	461a      	mov	r2, r3
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	42a3      	cmp	r3, r4
 800c0de:	d1fb      	bne.n	800c0d8 <_malloc_r+0xdc>
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	6053      	str	r3, [r2, #4]
 800c0e4:	e7de      	b.n	800c0a4 <_malloc_r+0xa8>
 800c0e6:	230c      	movs	r3, #12
 800c0e8:	6033      	str	r3, [r6, #0]
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f000 f8b8 	bl	800c260 <__malloc_unlock>
 800c0f0:	e794      	b.n	800c01c <_malloc_r+0x20>
 800c0f2:	6005      	str	r5, [r0, #0]
 800c0f4:	e7d6      	b.n	800c0a4 <_malloc_r+0xa8>
 800c0f6:	bf00      	nop
 800c0f8:	24000ce8 	.word	0x24000ce8

0800c0fc <__sflush_r>:
 800c0fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c104:	0716      	lsls	r6, r2, #28
 800c106:	4605      	mov	r5, r0
 800c108:	460c      	mov	r4, r1
 800c10a:	d454      	bmi.n	800c1b6 <__sflush_r+0xba>
 800c10c:	684b      	ldr	r3, [r1, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	dc02      	bgt.n	800c118 <__sflush_r+0x1c>
 800c112:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c114:	2b00      	cmp	r3, #0
 800c116:	dd48      	ble.n	800c1aa <__sflush_r+0xae>
 800c118:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c11a:	2e00      	cmp	r6, #0
 800c11c:	d045      	beq.n	800c1aa <__sflush_r+0xae>
 800c11e:	2300      	movs	r3, #0
 800c120:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c124:	682f      	ldr	r7, [r5, #0]
 800c126:	6a21      	ldr	r1, [r4, #32]
 800c128:	602b      	str	r3, [r5, #0]
 800c12a:	d030      	beq.n	800c18e <__sflush_r+0x92>
 800c12c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c12e:	89a3      	ldrh	r3, [r4, #12]
 800c130:	0759      	lsls	r1, r3, #29
 800c132:	d505      	bpl.n	800c140 <__sflush_r+0x44>
 800c134:	6863      	ldr	r3, [r4, #4]
 800c136:	1ad2      	subs	r2, r2, r3
 800c138:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c13a:	b10b      	cbz	r3, 800c140 <__sflush_r+0x44>
 800c13c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c13e:	1ad2      	subs	r2, r2, r3
 800c140:	2300      	movs	r3, #0
 800c142:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c144:	6a21      	ldr	r1, [r4, #32]
 800c146:	4628      	mov	r0, r5
 800c148:	47b0      	blx	r6
 800c14a:	1c43      	adds	r3, r0, #1
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	d106      	bne.n	800c15e <__sflush_r+0x62>
 800c150:	6829      	ldr	r1, [r5, #0]
 800c152:	291d      	cmp	r1, #29
 800c154:	d82b      	bhi.n	800c1ae <__sflush_r+0xb2>
 800c156:	4a2a      	ldr	r2, [pc, #168]	@ (800c200 <__sflush_r+0x104>)
 800c158:	410a      	asrs	r2, r1
 800c15a:	07d6      	lsls	r6, r2, #31
 800c15c:	d427      	bmi.n	800c1ae <__sflush_r+0xb2>
 800c15e:	2200      	movs	r2, #0
 800c160:	6062      	str	r2, [r4, #4]
 800c162:	04d9      	lsls	r1, r3, #19
 800c164:	6922      	ldr	r2, [r4, #16]
 800c166:	6022      	str	r2, [r4, #0]
 800c168:	d504      	bpl.n	800c174 <__sflush_r+0x78>
 800c16a:	1c42      	adds	r2, r0, #1
 800c16c:	d101      	bne.n	800c172 <__sflush_r+0x76>
 800c16e:	682b      	ldr	r3, [r5, #0]
 800c170:	b903      	cbnz	r3, 800c174 <__sflush_r+0x78>
 800c172:	6560      	str	r0, [r4, #84]	@ 0x54
 800c174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c176:	602f      	str	r7, [r5, #0]
 800c178:	b1b9      	cbz	r1, 800c1aa <__sflush_r+0xae>
 800c17a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c17e:	4299      	cmp	r1, r3
 800c180:	d002      	beq.n	800c188 <__sflush_r+0x8c>
 800c182:	4628      	mov	r0, r5
 800c184:	f000 fde6 	bl	800cd54 <_free_r>
 800c188:	2300      	movs	r3, #0
 800c18a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c18c:	e00d      	b.n	800c1aa <__sflush_r+0xae>
 800c18e:	2301      	movs	r3, #1
 800c190:	4628      	mov	r0, r5
 800c192:	47b0      	blx	r6
 800c194:	4602      	mov	r2, r0
 800c196:	1c50      	adds	r0, r2, #1
 800c198:	d1c9      	bne.n	800c12e <__sflush_r+0x32>
 800c19a:	682b      	ldr	r3, [r5, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d0c6      	beq.n	800c12e <__sflush_r+0x32>
 800c1a0:	2b1d      	cmp	r3, #29
 800c1a2:	d001      	beq.n	800c1a8 <__sflush_r+0xac>
 800c1a4:	2b16      	cmp	r3, #22
 800c1a6:	d11e      	bne.n	800c1e6 <__sflush_r+0xea>
 800c1a8:	602f      	str	r7, [r5, #0]
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	e022      	b.n	800c1f4 <__sflush_r+0xf8>
 800c1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1b2:	b21b      	sxth	r3, r3
 800c1b4:	e01b      	b.n	800c1ee <__sflush_r+0xf2>
 800c1b6:	690f      	ldr	r7, [r1, #16]
 800c1b8:	2f00      	cmp	r7, #0
 800c1ba:	d0f6      	beq.n	800c1aa <__sflush_r+0xae>
 800c1bc:	0793      	lsls	r3, r2, #30
 800c1be:	680e      	ldr	r6, [r1, #0]
 800c1c0:	bf08      	it	eq
 800c1c2:	694b      	ldreq	r3, [r1, #20]
 800c1c4:	600f      	str	r7, [r1, #0]
 800c1c6:	bf18      	it	ne
 800c1c8:	2300      	movne	r3, #0
 800c1ca:	eba6 0807 	sub.w	r8, r6, r7
 800c1ce:	608b      	str	r3, [r1, #8]
 800c1d0:	f1b8 0f00 	cmp.w	r8, #0
 800c1d4:	dde9      	ble.n	800c1aa <__sflush_r+0xae>
 800c1d6:	6a21      	ldr	r1, [r4, #32]
 800c1d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1da:	4643      	mov	r3, r8
 800c1dc:	463a      	mov	r2, r7
 800c1de:	4628      	mov	r0, r5
 800c1e0:	47b0      	blx	r6
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	dc08      	bgt.n	800c1f8 <__sflush_r+0xfc>
 800c1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1ee:	81a3      	strh	r3, [r4, #12]
 800c1f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f8:	4407      	add	r7, r0
 800c1fa:	eba8 0800 	sub.w	r8, r8, r0
 800c1fe:	e7e7      	b.n	800c1d0 <__sflush_r+0xd4>
 800c200:	dfbffffe 	.word	0xdfbffffe

0800c204 <_fflush_r>:
 800c204:	b538      	push	{r3, r4, r5, lr}
 800c206:	690b      	ldr	r3, [r1, #16]
 800c208:	4605      	mov	r5, r0
 800c20a:	460c      	mov	r4, r1
 800c20c:	b913      	cbnz	r3, 800c214 <_fflush_r+0x10>
 800c20e:	2500      	movs	r5, #0
 800c210:	4628      	mov	r0, r5
 800c212:	bd38      	pop	{r3, r4, r5, pc}
 800c214:	b118      	cbz	r0, 800c21e <_fflush_r+0x1a>
 800c216:	6a03      	ldr	r3, [r0, #32]
 800c218:	b90b      	cbnz	r3, 800c21e <_fflush_r+0x1a>
 800c21a:	f7fe fec5 	bl	800afa8 <__sinit>
 800c21e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d0f3      	beq.n	800c20e <_fflush_r+0xa>
 800c226:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c228:	07d0      	lsls	r0, r2, #31
 800c22a:	d404      	bmi.n	800c236 <_fflush_r+0x32>
 800c22c:	0599      	lsls	r1, r3, #22
 800c22e:	d402      	bmi.n	800c236 <_fflush_r+0x32>
 800c230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c232:	f7fe ff96 	bl	800b162 <__retarget_lock_acquire_recursive>
 800c236:	4628      	mov	r0, r5
 800c238:	4621      	mov	r1, r4
 800c23a:	f7ff ff5f 	bl	800c0fc <__sflush_r>
 800c23e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c240:	07da      	lsls	r2, r3, #31
 800c242:	4605      	mov	r5, r0
 800c244:	d4e4      	bmi.n	800c210 <_fflush_r+0xc>
 800c246:	89a3      	ldrh	r3, [r4, #12]
 800c248:	059b      	lsls	r3, r3, #22
 800c24a:	d4e1      	bmi.n	800c210 <_fflush_r+0xc>
 800c24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c24e:	f7fe ff89 	bl	800b164 <__retarget_lock_release_recursive>
 800c252:	e7dd      	b.n	800c210 <_fflush_r+0xc>

0800c254 <__malloc_lock>:
 800c254:	4801      	ldr	r0, [pc, #4]	@ (800c25c <__malloc_lock+0x8>)
 800c256:	f7fe bf84 	b.w	800b162 <__retarget_lock_acquire_recursive>
 800c25a:	bf00      	nop
 800c25c:	24000ce0 	.word	0x24000ce0

0800c260 <__malloc_unlock>:
 800c260:	4801      	ldr	r0, [pc, #4]	@ (800c268 <__malloc_unlock+0x8>)
 800c262:	f7fe bf7f 	b.w	800b164 <__retarget_lock_release_recursive>
 800c266:	bf00      	nop
 800c268:	24000ce0 	.word	0x24000ce0

0800c26c <_Balloc>:
 800c26c:	b570      	push	{r4, r5, r6, lr}
 800c26e:	69c6      	ldr	r6, [r0, #28]
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	b976      	cbnz	r6, 800c294 <_Balloc+0x28>
 800c276:	2010      	movs	r0, #16
 800c278:	f7ff fe96 	bl	800bfa8 <malloc>
 800c27c:	4602      	mov	r2, r0
 800c27e:	61e0      	str	r0, [r4, #28]
 800c280:	b920      	cbnz	r0, 800c28c <_Balloc+0x20>
 800c282:	4b18      	ldr	r3, [pc, #96]	@ (800c2e4 <_Balloc+0x78>)
 800c284:	4818      	ldr	r0, [pc, #96]	@ (800c2e8 <_Balloc+0x7c>)
 800c286:	216b      	movs	r1, #107	@ 0x6b
 800c288:	f000 fd32 	bl	800ccf0 <__assert_func>
 800c28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c290:	6006      	str	r6, [r0, #0]
 800c292:	60c6      	str	r6, [r0, #12]
 800c294:	69e6      	ldr	r6, [r4, #28]
 800c296:	68f3      	ldr	r3, [r6, #12]
 800c298:	b183      	cbz	r3, 800c2bc <_Balloc+0x50>
 800c29a:	69e3      	ldr	r3, [r4, #28]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2a2:	b9b8      	cbnz	r0, 800c2d4 <_Balloc+0x68>
 800c2a4:	2101      	movs	r1, #1
 800c2a6:	fa01 f605 	lsl.w	r6, r1, r5
 800c2aa:	1d72      	adds	r2, r6, #5
 800c2ac:	0092      	lsls	r2, r2, #2
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 fd3c 	bl	800cd2c <_calloc_r>
 800c2b4:	b160      	cbz	r0, 800c2d0 <_Balloc+0x64>
 800c2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2ba:	e00e      	b.n	800c2da <_Balloc+0x6e>
 800c2bc:	2221      	movs	r2, #33	@ 0x21
 800c2be:	2104      	movs	r1, #4
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	f000 fd33 	bl	800cd2c <_calloc_r>
 800c2c6:	69e3      	ldr	r3, [r4, #28]
 800c2c8:	60f0      	str	r0, [r6, #12]
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1e4      	bne.n	800c29a <_Balloc+0x2e>
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}
 800c2d4:	6802      	ldr	r2, [r0, #0]
 800c2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2e0:	e7f7      	b.n	800c2d2 <_Balloc+0x66>
 800c2e2:	bf00      	nop
 800c2e4:	0800d131 	.word	0x0800d131
 800c2e8:	0800d1c2 	.word	0x0800d1c2

0800c2ec <_Bfree>:
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	69c6      	ldr	r6, [r0, #28]
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	b976      	cbnz	r6, 800c314 <_Bfree+0x28>
 800c2f6:	2010      	movs	r0, #16
 800c2f8:	f7ff fe56 	bl	800bfa8 <malloc>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	61e8      	str	r0, [r5, #28]
 800c300:	b920      	cbnz	r0, 800c30c <_Bfree+0x20>
 800c302:	4b09      	ldr	r3, [pc, #36]	@ (800c328 <_Bfree+0x3c>)
 800c304:	4809      	ldr	r0, [pc, #36]	@ (800c32c <_Bfree+0x40>)
 800c306:	218f      	movs	r1, #143	@ 0x8f
 800c308:	f000 fcf2 	bl	800ccf0 <__assert_func>
 800c30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c310:	6006      	str	r6, [r0, #0]
 800c312:	60c6      	str	r6, [r0, #12]
 800c314:	b13c      	cbz	r4, 800c326 <_Bfree+0x3a>
 800c316:	69eb      	ldr	r3, [r5, #28]
 800c318:	6862      	ldr	r2, [r4, #4]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c320:	6021      	str	r1, [r4, #0]
 800c322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c326:	bd70      	pop	{r4, r5, r6, pc}
 800c328:	0800d131 	.word	0x0800d131
 800c32c:	0800d1c2 	.word	0x0800d1c2

0800c330 <__multadd>:
 800c330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c334:	690d      	ldr	r5, [r1, #16]
 800c336:	4607      	mov	r7, r0
 800c338:	460c      	mov	r4, r1
 800c33a:	461e      	mov	r6, r3
 800c33c:	f101 0c14 	add.w	ip, r1, #20
 800c340:	2000      	movs	r0, #0
 800c342:	f8dc 3000 	ldr.w	r3, [ip]
 800c346:	b299      	uxth	r1, r3
 800c348:	fb02 6101 	mla	r1, r2, r1, r6
 800c34c:	0c1e      	lsrs	r6, r3, #16
 800c34e:	0c0b      	lsrs	r3, r1, #16
 800c350:	fb02 3306 	mla	r3, r2, r6, r3
 800c354:	b289      	uxth	r1, r1
 800c356:	3001      	adds	r0, #1
 800c358:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c35c:	4285      	cmp	r5, r0
 800c35e:	f84c 1b04 	str.w	r1, [ip], #4
 800c362:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c366:	dcec      	bgt.n	800c342 <__multadd+0x12>
 800c368:	b30e      	cbz	r6, 800c3ae <__multadd+0x7e>
 800c36a:	68a3      	ldr	r3, [r4, #8]
 800c36c:	42ab      	cmp	r3, r5
 800c36e:	dc19      	bgt.n	800c3a4 <__multadd+0x74>
 800c370:	6861      	ldr	r1, [r4, #4]
 800c372:	4638      	mov	r0, r7
 800c374:	3101      	adds	r1, #1
 800c376:	f7ff ff79 	bl	800c26c <_Balloc>
 800c37a:	4680      	mov	r8, r0
 800c37c:	b928      	cbnz	r0, 800c38a <__multadd+0x5a>
 800c37e:	4602      	mov	r2, r0
 800c380:	4b0c      	ldr	r3, [pc, #48]	@ (800c3b4 <__multadd+0x84>)
 800c382:	480d      	ldr	r0, [pc, #52]	@ (800c3b8 <__multadd+0x88>)
 800c384:	21ba      	movs	r1, #186	@ 0xba
 800c386:	f000 fcb3 	bl	800ccf0 <__assert_func>
 800c38a:	6922      	ldr	r2, [r4, #16]
 800c38c:	3202      	adds	r2, #2
 800c38e:	f104 010c 	add.w	r1, r4, #12
 800c392:	0092      	lsls	r2, r2, #2
 800c394:	300c      	adds	r0, #12
 800c396:	f000 fc9d 	bl	800ccd4 <memcpy>
 800c39a:	4621      	mov	r1, r4
 800c39c:	4638      	mov	r0, r7
 800c39e:	f7ff ffa5 	bl	800c2ec <_Bfree>
 800c3a2:	4644      	mov	r4, r8
 800c3a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3a8:	3501      	adds	r5, #1
 800c3aa:	615e      	str	r6, [r3, #20]
 800c3ac:	6125      	str	r5, [r4, #16]
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3b4:	0800d1a0 	.word	0x0800d1a0
 800c3b8:	0800d1c2 	.word	0x0800d1c2

0800c3bc <__hi0bits>:
 800c3bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	bf36      	itet	cc
 800c3c4:	0403      	lslcc	r3, r0, #16
 800c3c6:	2000      	movcs	r0, #0
 800c3c8:	2010      	movcc	r0, #16
 800c3ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3ce:	bf3c      	itt	cc
 800c3d0:	021b      	lslcc	r3, r3, #8
 800c3d2:	3008      	addcc	r0, #8
 800c3d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3d8:	bf3c      	itt	cc
 800c3da:	011b      	lslcc	r3, r3, #4
 800c3dc:	3004      	addcc	r0, #4
 800c3de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3e2:	bf3c      	itt	cc
 800c3e4:	009b      	lslcc	r3, r3, #2
 800c3e6:	3002      	addcc	r0, #2
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	db05      	blt.n	800c3f8 <__hi0bits+0x3c>
 800c3ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c3f0:	f100 0001 	add.w	r0, r0, #1
 800c3f4:	bf08      	it	eq
 800c3f6:	2020      	moveq	r0, #32
 800c3f8:	4770      	bx	lr

0800c3fa <__lo0bits>:
 800c3fa:	6803      	ldr	r3, [r0, #0]
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	f013 0007 	ands.w	r0, r3, #7
 800c402:	d00b      	beq.n	800c41c <__lo0bits+0x22>
 800c404:	07d9      	lsls	r1, r3, #31
 800c406:	d421      	bmi.n	800c44c <__lo0bits+0x52>
 800c408:	0798      	lsls	r0, r3, #30
 800c40a:	bf49      	itett	mi
 800c40c:	085b      	lsrmi	r3, r3, #1
 800c40e:	089b      	lsrpl	r3, r3, #2
 800c410:	2001      	movmi	r0, #1
 800c412:	6013      	strmi	r3, [r2, #0]
 800c414:	bf5c      	itt	pl
 800c416:	6013      	strpl	r3, [r2, #0]
 800c418:	2002      	movpl	r0, #2
 800c41a:	4770      	bx	lr
 800c41c:	b299      	uxth	r1, r3
 800c41e:	b909      	cbnz	r1, 800c424 <__lo0bits+0x2a>
 800c420:	0c1b      	lsrs	r3, r3, #16
 800c422:	2010      	movs	r0, #16
 800c424:	b2d9      	uxtb	r1, r3
 800c426:	b909      	cbnz	r1, 800c42c <__lo0bits+0x32>
 800c428:	3008      	adds	r0, #8
 800c42a:	0a1b      	lsrs	r3, r3, #8
 800c42c:	0719      	lsls	r1, r3, #28
 800c42e:	bf04      	itt	eq
 800c430:	091b      	lsreq	r3, r3, #4
 800c432:	3004      	addeq	r0, #4
 800c434:	0799      	lsls	r1, r3, #30
 800c436:	bf04      	itt	eq
 800c438:	089b      	lsreq	r3, r3, #2
 800c43a:	3002      	addeq	r0, #2
 800c43c:	07d9      	lsls	r1, r3, #31
 800c43e:	d403      	bmi.n	800c448 <__lo0bits+0x4e>
 800c440:	085b      	lsrs	r3, r3, #1
 800c442:	f100 0001 	add.w	r0, r0, #1
 800c446:	d003      	beq.n	800c450 <__lo0bits+0x56>
 800c448:	6013      	str	r3, [r2, #0]
 800c44a:	4770      	bx	lr
 800c44c:	2000      	movs	r0, #0
 800c44e:	4770      	bx	lr
 800c450:	2020      	movs	r0, #32
 800c452:	4770      	bx	lr

0800c454 <__i2b>:
 800c454:	b510      	push	{r4, lr}
 800c456:	460c      	mov	r4, r1
 800c458:	2101      	movs	r1, #1
 800c45a:	f7ff ff07 	bl	800c26c <_Balloc>
 800c45e:	4602      	mov	r2, r0
 800c460:	b928      	cbnz	r0, 800c46e <__i2b+0x1a>
 800c462:	4b05      	ldr	r3, [pc, #20]	@ (800c478 <__i2b+0x24>)
 800c464:	4805      	ldr	r0, [pc, #20]	@ (800c47c <__i2b+0x28>)
 800c466:	f240 1145 	movw	r1, #325	@ 0x145
 800c46a:	f000 fc41 	bl	800ccf0 <__assert_func>
 800c46e:	2301      	movs	r3, #1
 800c470:	6144      	str	r4, [r0, #20]
 800c472:	6103      	str	r3, [r0, #16]
 800c474:	bd10      	pop	{r4, pc}
 800c476:	bf00      	nop
 800c478:	0800d1a0 	.word	0x0800d1a0
 800c47c:	0800d1c2 	.word	0x0800d1c2

0800c480 <__multiply>:
 800c480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c484:	4614      	mov	r4, r2
 800c486:	690a      	ldr	r2, [r1, #16]
 800c488:	6923      	ldr	r3, [r4, #16]
 800c48a:	429a      	cmp	r2, r3
 800c48c:	bfa8      	it	ge
 800c48e:	4623      	movge	r3, r4
 800c490:	460f      	mov	r7, r1
 800c492:	bfa4      	itt	ge
 800c494:	460c      	movge	r4, r1
 800c496:	461f      	movge	r7, r3
 800c498:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c49c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c4a0:	68a3      	ldr	r3, [r4, #8]
 800c4a2:	6861      	ldr	r1, [r4, #4]
 800c4a4:	eb0a 0609 	add.w	r6, sl, r9
 800c4a8:	42b3      	cmp	r3, r6
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	bfb8      	it	lt
 800c4ae:	3101      	addlt	r1, #1
 800c4b0:	f7ff fedc 	bl	800c26c <_Balloc>
 800c4b4:	b930      	cbnz	r0, 800c4c4 <__multiply+0x44>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	4b44      	ldr	r3, [pc, #272]	@ (800c5cc <__multiply+0x14c>)
 800c4ba:	4845      	ldr	r0, [pc, #276]	@ (800c5d0 <__multiply+0x150>)
 800c4bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c4c0:	f000 fc16 	bl	800ccf0 <__assert_func>
 800c4c4:	f100 0514 	add.w	r5, r0, #20
 800c4c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4cc:	462b      	mov	r3, r5
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	4543      	cmp	r3, r8
 800c4d2:	d321      	bcc.n	800c518 <__multiply+0x98>
 800c4d4:	f107 0114 	add.w	r1, r7, #20
 800c4d8:	f104 0214 	add.w	r2, r4, #20
 800c4dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c4e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c4e4:	9302      	str	r3, [sp, #8]
 800c4e6:	1b13      	subs	r3, r2, r4
 800c4e8:	3b15      	subs	r3, #21
 800c4ea:	f023 0303 	bic.w	r3, r3, #3
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	f104 0715 	add.w	r7, r4, #21
 800c4f4:	42ba      	cmp	r2, r7
 800c4f6:	bf38      	it	cc
 800c4f8:	2304      	movcc	r3, #4
 800c4fa:	9301      	str	r3, [sp, #4]
 800c4fc:	9b02      	ldr	r3, [sp, #8]
 800c4fe:	9103      	str	r1, [sp, #12]
 800c500:	428b      	cmp	r3, r1
 800c502:	d80c      	bhi.n	800c51e <__multiply+0x9e>
 800c504:	2e00      	cmp	r6, #0
 800c506:	dd03      	ble.n	800c510 <__multiply+0x90>
 800c508:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d05b      	beq.n	800c5c8 <__multiply+0x148>
 800c510:	6106      	str	r6, [r0, #16]
 800c512:	b005      	add	sp, #20
 800c514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c518:	f843 2b04 	str.w	r2, [r3], #4
 800c51c:	e7d8      	b.n	800c4d0 <__multiply+0x50>
 800c51e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c522:	f1ba 0f00 	cmp.w	sl, #0
 800c526:	d024      	beq.n	800c572 <__multiply+0xf2>
 800c528:	f104 0e14 	add.w	lr, r4, #20
 800c52c:	46a9      	mov	r9, r5
 800c52e:	f04f 0c00 	mov.w	ip, #0
 800c532:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c536:	f8d9 3000 	ldr.w	r3, [r9]
 800c53a:	fa1f fb87 	uxth.w	fp, r7
 800c53e:	b29b      	uxth	r3, r3
 800c540:	fb0a 330b 	mla	r3, sl, fp, r3
 800c544:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c548:	f8d9 7000 	ldr.w	r7, [r9]
 800c54c:	4463      	add	r3, ip
 800c54e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c552:	fb0a c70b 	mla	r7, sl, fp, ip
 800c556:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c560:	4572      	cmp	r2, lr
 800c562:	f849 3b04 	str.w	r3, [r9], #4
 800c566:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c56a:	d8e2      	bhi.n	800c532 <__multiply+0xb2>
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	f845 c003 	str.w	ip, [r5, r3]
 800c572:	9b03      	ldr	r3, [sp, #12]
 800c574:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c578:	3104      	adds	r1, #4
 800c57a:	f1b9 0f00 	cmp.w	r9, #0
 800c57e:	d021      	beq.n	800c5c4 <__multiply+0x144>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	f104 0c14 	add.w	ip, r4, #20
 800c586:	46ae      	mov	lr, r5
 800c588:	f04f 0a00 	mov.w	sl, #0
 800c58c:	f8bc b000 	ldrh.w	fp, [ip]
 800c590:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c594:	fb09 770b 	mla	r7, r9, fp, r7
 800c598:	4457      	add	r7, sl
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c5a0:	f84e 3b04 	str.w	r3, [lr], #4
 800c5a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c5a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5ac:	f8be 3000 	ldrh.w	r3, [lr]
 800c5b0:	fb09 330a 	mla	r3, r9, sl, r3
 800c5b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c5b8:	4562      	cmp	r2, ip
 800c5ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c5be:	d8e5      	bhi.n	800c58c <__multiply+0x10c>
 800c5c0:	9f01      	ldr	r7, [sp, #4]
 800c5c2:	51eb      	str	r3, [r5, r7]
 800c5c4:	3504      	adds	r5, #4
 800c5c6:	e799      	b.n	800c4fc <__multiply+0x7c>
 800c5c8:	3e01      	subs	r6, #1
 800c5ca:	e79b      	b.n	800c504 <__multiply+0x84>
 800c5cc:	0800d1a0 	.word	0x0800d1a0
 800c5d0:	0800d1c2 	.word	0x0800d1c2

0800c5d4 <__pow5mult>:
 800c5d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5d8:	4615      	mov	r5, r2
 800c5da:	f012 0203 	ands.w	r2, r2, #3
 800c5de:	4607      	mov	r7, r0
 800c5e0:	460e      	mov	r6, r1
 800c5e2:	d007      	beq.n	800c5f4 <__pow5mult+0x20>
 800c5e4:	4c25      	ldr	r4, [pc, #148]	@ (800c67c <__pow5mult+0xa8>)
 800c5e6:	3a01      	subs	r2, #1
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5ee:	f7ff fe9f 	bl	800c330 <__multadd>
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	10ad      	asrs	r5, r5, #2
 800c5f6:	d03d      	beq.n	800c674 <__pow5mult+0xa0>
 800c5f8:	69fc      	ldr	r4, [r7, #28]
 800c5fa:	b97c      	cbnz	r4, 800c61c <__pow5mult+0x48>
 800c5fc:	2010      	movs	r0, #16
 800c5fe:	f7ff fcd3 	bl	800bfa8 <malloc>
 800c602:	4602      	mov	r2, r0
 800c604:	61f8      	str	r0, [r7, #28]
 800c606:	b928      	cbnz	r0, 800c614 <__pow5mult+0x40>
 800c608:	4b1d      	ldr	r3, [pc, #116]	@ (800c680 <__pow5mult+0xac>)
 800c60a:	481e      	ldr	r0, [pc, #120]	@ (800c684 <__pow5mult+0xb0>)
 800c60c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c610:	f000 fb6e 	bl	800ccf0 <__assert_func>
 800c614:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c618:	6004      	str	r4, [r0, #0]
 800c61a:	60c4      	str	r4, [r0, #12]
 800c61c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c620:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c624:	b94c      	cbnz	r4, 800c63a <__pow5mult+0x66>
 800c626:	f240 2171 	movw	r1, #625	@ 0x271
 800c62a:	4638      	mov	r0, r7
 800c62c:	f7ff ff12 	bl	800c454 <__i2b>
 800c630:	2300      	movs	r3, #0
 800c632:	f8c8 0008 	str.w	r0, [r8, #8]
 800c636:	4604      	mov	r4, r0
 800c638:	6003      	str	r3, [r0, #0]
 800c63a:	f04f 0900 	mov.w	r9, #0
 800c63e:	07eb      	lsls	r3, r5, #31
 800c640:	d50a      	bpl.n	800c658 <__pow5mult+0x84>
 800c642:	4631      	mov	r1, r6
 800c644:	4622      	mov	r2, r4
 800c646:	4638      	mov	r0, r7
 800c648:	f7ff ff1a 	bl	800c480 <__multiply>
 800c64c:	4631      	mov	r1, r6
 800c64e:	4680      	mov	r8, r0
 800c650:	4638      	mov	r0, r7
 800c652:	f7ff fe4b 	bl	800c2ec <_Bfree>
 800c656:	4646      	mov	r6, r8
 800c658:	106d      	asrs	r5, r5, #1
 800c65a:	d00b      	beq.n	800c674 <__pow5mult+0xa0>
 800c65c:	6820      	ldr	r0, [r4, #0]
 800c65e:	b938      	cbnz	r0, 800c670 <__pow5mult+0x9c>
 800c660:	4622      	mov	r2, r4
 800c662:	4621      	mov	r1, r4
 800c664:	4638      	mov	r0, r7
 800c666:	f7ff ff0b 	bl	800c480 <__multiply>
 800c66a:	6020      	str	r0, [r4, #0]
 800c66c:	f8c0 9000 	str.w	r9, [r0]
 800c670:	4604      	mov	r4, r0
 800c672:	e7e4      	b.n	800c63e <__pow5mult+0x6a>
 800c674:	4630      	mov	r0, r6
 800c676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c67a:	bf00      	nop
 800c67c:	0800d21c 	.word	0x0800d21c
 800c680:	0800d131 	.word	0x0800d131
 800c684:	0800d1c2 	.word	0x0800d1c2

0800c688 <__lshift>:
 800c688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c68c:	460c      	mov	r4, r1
 800c68e:	6849      	ldr	r1, [r1, #4]
 800c690:	6923      	ldr	r3, [r4, #16]
 800c692:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c696:	68a3      	ldr	r3, [r4, #8]
 800c698:	4607      	mov	r7, r0
 800c69a:	4691      	mov	r9, r2
 800c69c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6a0:	f108 0601 	add.w	r6, r8, #1
 800c6a4:	42b3      	cmp	r3, r6
 800c6a6:	db0b      	blt.n	800c6c0 <__lshift+0x38>
 800c6a8:	4638      	mov	r0, r7
 800c6aa:	f7ff fddf 	bl	800c26c <_Balloc>
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	b948      	cbnz	r0, 800c6c6 <__lshift+0x3e>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	4b28      	ldr	r3, [pc, #160]	@ (800c758 <__lshift+0xd0>)
 800c6b6:	4829      	ldr	r0, [pc, #164]	@ (800c75c <__lshift+0xd4>)
 800c6b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c6bc:	f000 fb18 	bl	800ccf0 <__assert_func>
 800c6c0:	3101      	adds	r1, #1
 800c6c2:	005b      	lsls	r3, r3, #1
 800c6c4:	e7ee      	b.n	800c6a4 <__lshift+0x1c>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f100 0114 	add.w	r1, r0, #20
 800c6cc:	f100 0210 	add.w	r2, r0, #16
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	4553      	cmp	r3, sl
 800c6d4:	db33      	blt.n	800c73e <__lshift+0xb6>
 800c6d6:	6920      	ldr	r0, [r4, #16]
 800c6d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6dc:	f104 0314 	add.w	r3, r4, #20
 800c6e0:	f019 091f 	ands.w	r9, r9, #31
 800c6e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6ec:	d02b      	beq.n	800c746 <__lshift+0xbe>
 800c6ee:	f1c9 0e20 	rsb	lr, r9, #32
 800c6f2:	468a      	mov	sl, r1
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	6818      	ldr	r0, [r3, #0]
 800c6f8:	fa00 f009 	lsl.w	r0, r0, r9
 800c6fc:	4310      	orrs	r0, r2
 800c6fe:	f84a 0b04 	str.w	r0, [sl], #4
 800c702:	f853 2b04 	ldr.w	r2, [r3], #4
 800c706:	459c      	cmp	ip, r3
 800c708:	fa22 f20e 	lsr.w	r2, r2, lr
 800c70c:	d8f3      	bhi.n	800c6f6 <__lshift+0x6e>
 800c70e:	ebac 0304 	sub.w	r3, ip, r4
 800c712:	3b15      	subs	r3, #21
 800c714:	f023 0303 	bic.w	r3, r3, #3
 800c718:	3304      	adds	r3, #4
 800c71a:	f104 0015 	add.w	r0, r4, #21
 800c71e:	4584      	cmp	ip, r0
 800c720:	bf38      	it	cc
 800c722:	2304      	movcc	r3, #4
 800c724:	50ca      	str	r2, [r1, r3]
 800c726:	b10a      	cbz	r2, 800c72c <__lshift+0xa4>
 800c728:	f108 0602 	add.w	r6, r8, #2
 800c72c:	3e01      	subs	r6, #1
 800c72e:	4638      	mov	r0, r7
 800c730:	612e      	str	r6, [r5, #16]
 800c732:	4621      	mov	r1, r4
 800c734:	f7ff fdda 	bl	800c2ec <_Bfree>
 800c738:	4628      	mov	r0, r5
 800c73a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c73e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c742:	3301      	adds	r3, #1
 800c744:	e7c5      	b.n	800c6d2 <__lshift+0x4a>
 800c746:	3904      	subs	r1, #4
 800c748:	f853 2b04 	ldr.w	r2, [r3], #4
 800c74c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c750:	459c      	cmp	ip, r3
 800c752:	d8f9      	bhi.n	800c748 <__lshift+0xc0>
 800c754:	e7ea      	b.n	800c72c <__lshift+0xa4>
 800c756:	bf00      	nop
 800c758:	0800d1a0 	.word	0x0800d1a0
 800c75c:	0800d1c2 	.word	0x0800d1c2

0800c760 <__mcmp>:
 800c760:	690a      	ldr	r2, [r1, #16]
 800c762:	4603      	mov	r3, r0
 800c764:	6900      	ldr	r0, [r0, #16]
 800c766:	1a80      	subs	r0, r0, r2
 800c768:	b530      	push	{r4, r5, lr}
 800c76a:	d10e      	bne.n	800c78a <__mcmp+0x2a>
 800c76c:	3314      	adds	r3, #20
 800c76e:	3114      	adds	r1, #20
 800c770:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c774:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c778:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c77c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c780:	4295      	cmp	r5, r2
 800c782:	d003      	beq.n	800c78c <__mcmp+0x2c>
 800c784:	d205      	bcs.n	800c792 <__mcmp+0x32>
 800c786:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c78a:	bd30      	pop	{r4, r5, pc}
 800c78c:	42a3      	cmp	r3, r4
 800c78e:	d3f3      	bcc.n	800c778 <__mcmp+0x18>
 800c790:	e7fb      	b.n	800c78a <__mcmp+0x2a>
 800c792:	2001      	movs	r0, #1
 800c794:	e7f9      	b.n	800c78a <__mcmp+0x2a>
	...

0800c798 <__mdiff>:
 800c798:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c79c:	4689      	mov	r9, r1
 800c79e:	4606      	mov	r6, r0
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	4648      	mov	r0, r9
 800c7a4:	4614      	mov	r4, r2
 800c7a6:	f7ff ffdb 	bl	800c760 <__mcmp>
 800c7aa:	1e05      	subs	r5, r0, #0
 800c7ac:	d112      	bne.n	800c7d4 <__mdiff+0x3c>
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7ff fd5b 	bl	800c26c <_Balloc>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	b928      	cbnz	r0, 800c7c6 <__mdiff+0x2e>
 800c7ba:	4b3f      	ldr	r3, [pc, #252]	@ (800c8b8 <__mdiff+0x120>)
 800c7bc:	f240 2137 	movw	r1, #567	@ 0x237
 800c7c0:	483e      	ldr	r0, [pc, #248]	@ (800c8bc <__mdiff+0x124>)
 800c7c2:	f000 fa95 	bl	800ccf0 <__assert_func>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	b003      	add	sp, #12
 800c7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7d4:	bfbc      	itt	lt
 800c7d6:	464b      	movlt	r3, r9
 800c7d8:	46a1      	movlt	r9, r4
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c7e0:	bfba      	itte	lt
 800c7e2:	461c      	movlt	r4, r3
 800c7e4:	2501      	movlt	r5, #1
 800c7e6:	2500      	movge	r5, #0
 800c7e8:	f7ff fd40 	bl	800c26c <_Balloc>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	b918      	cbnz	r0, 800c7f8 <__mdiff+0x60>
 800c7f0:	4b31      	ldr	r3, [pc, #196]	@ (800c8b8 <__mdiff+0x120>)
 800c7f2:	f240 2145 	movw	r1, #581	@ 0x245
 800c7f6:	e7e3      	b.n	800c7c0 <__mdiff+0x28>
 800c7f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c7fc:	6926      	ldr	r6, [r4, #16]
 800c7fe:	60c5      	str	r5, [r0, #12]
 800c800:	f109 0310 	add.w	r3, r9, #16
 800c804:	f109 0514 	add.w	r5, r9, #20
 800c808:	f104 0e14 	add.w	lr, r4, #20
 800c80c:	f100 0b14 	add.w	fp, r0, #20
 800c810:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c814:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	46d9      	mov	r9, fp
 800c81c:	f04f 0c00 	mov.w	ip, #0
 800c820:	9b01      	ldr	r3, [sp, #4]
 800c822:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c826:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c82a:	9301      	str	r3, [sp, #4]
 800c82c:	fa1f f38a 	uxth.w	r3, sl
 800c830:	4619      	mov	r1, r3
 800c832:	b283      	uxth	r3, r0
 800c834:	1acb      	subs	r3, r1, r3
 800c836:	0c00      	lsrs	r0, r0, #16
 800c838:	4463      	add	r3, ip
 800c83a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c83e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c842:	b29b      	uxth	r3, r3
 800c844:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c848:	4576      	cmp	r6, lr
 800c84a:	f849 3b04 	str.w	r3, [r9], #4
 800c84e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c852:	d8e5      	bhi.n	800c820 <__mdiff+0x88>
 800c854:	1b33      	subs	r3, r6, r4
 800c856:	3b15      	subs	r3, #21
 800c858:	f023 0303 	bic.w	r3, r3, #3
 800c85c:	3415      	adds	r4, #21
 800c85e:	3304      	adds	r3, #4
 800c860:	42a6      	cmp	r6, r4
 800c862:	bf38      	it	cc
 800c864:	2304      	movcc	r3, #4
 800c866:	441d      	add	r5, r3
 800c868:	445b      	add	r3, fp
 800c86a:	461e      	mov	r6, r3
 800c86c:	462c      	mov	r4, r5
 800c86e:	4544      	cmp	r4, r8
 800c870:	d30e      	bcc.n	800c890 <__mdiff+0xf8>
 800c872:	f108 0103 	add.w	r1, r8, #3
 800c876:	1b49      	subs	r1, r1, r5
 800c878:	f021 0103 	bic.w	r1, r1, #3
 800c87c:	3d03      	subs	r5, #3
 800c87e:	45a8      	cmp	r8, r5
 800c880:	bf38      	it	cc
 800c882:	2100      	movcc	r1, #0
 800c884:	440b      	add	r3, r1
 800c886:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c88a:	b191      	cbz	r1, 800c8b2 <__mdiff+0x11a>
 800c88c:	6117      	str	r7, [r2, #16]
 800c88e:	e79d      	b.n	800c7cc <__mdiff+0x34>
 800c890:	f854 1b04 	ldr.w	r1, [r4], #4
 800c894:	46e6      	mov	lr, ip
 800c896:	0c08      	lsrs	r0, r1, #16
 800c898:	fa1c fc81 	uxtah	ip, ip, r1
 800c89c:	4471      	add	r1, lr
 800c89e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c8a2:	b289      	uxth	r1, r1
 800c8a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c8a8:	f846 1b04 	str.w	r1, [r6], #4
 800c8ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c8b0:	e7dd      	b.n	800c86e <__mdiff+0xd6>
 800c8b2:	3f01      	subs	r7, #1
 800c8b4:	e7e7      	b.n	800c886 <__mdiff+0xee>
 800c8b6:	bf00      	nop
 800c8b8:	0800d1a0 	.word	0x0800d1a0
 800c8bc:	0800d1c2 	.word	0x0800d1c2

0800c8c0 <__d2b>:
 800c8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8c4:	460f      	mov	r7, r1
 800c8c6:	2101      	movs	r1, #1
 800c8c8:	ec59 8b10 	vmov	r8, r9, d0
 800c8cc:	4616      	mov	r6, r2
 800c8ce:	f7ff fccd 	bl	800c26c <_Balloc>
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	b930      	cbnz	r0, 800c8e4 <__d2b+0x24>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	4b23      	ldr	r3, [pc, #140]	@ (800c968 <__d2b+0xa8>)
 800c8da:	4824      	ldr	r0, [pc, #144]	@ (800c96c <__d2b+0xac>)
 800c8dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c8e0:	f000 fa06 	bl	800ccf0 <__assert_func>
 800c8e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c8e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8ec:	b10d      	cbz	r5, 800c8f2 <__d2b+0x32>
 800c8ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c8f2:	9301      	str	r3, [sp, #4]
 800c8f4:	f1b8 0300 	subs.w	r3, r8, #0
 800c8f8:	d023      	beq.n	800c942 <__d2b+0x82>
 800c8fa:	4668      	mov	r0, sp
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	f7ff fd7c 	bl	800c3fa <__lo0bits>
 800c902:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c906:	b1d0      	cbz	r0, 800c93e <__d2b+0x7e>
 800c908:	f1c0 0320 	rsb	r3, r0, #32
 800c90c:	fa02 f303 	lsl.w	r3, r2, r3
 800c910:	430b      	orrs	r3, r1
 800c912:	40c2      	lsrs	r2, r0
 800c914:	6163      	str	r3, [r4, #20]
 800c916:	9201      	str	r2, [sp, #4]
 800c918:	9b01      	ldr	r3, [sp, #4]
 800c91a:	61a3      	str	r3, [r4, #24]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	bf0c      	ite	eq
 800c920:	2201      	moveq	r2, #1
 800c922:	2202      	movne	r2, #2
 800c924:	6122      	str	r2, [r4, #16]
 800c926:	b1a5      	cbz	r5, 800c952 <__d2b+0x92>
 800c928:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c92c:	4405      	add	r5, r0
 800c92e:	603d      	str	r5, [r7, #0]
 800c930:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c934:	6030      	str	r0, [r6, #0]
 800c936:	4620      	mov	r0, r4
 800c938:	b003      	add	sp, #12
 800c93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c93e:	6161      	str	r1, [r4, #20]
 800c940:	e7ea      	b.n	800c918 <__d2b+0x58>
 800c942:	a801      	add	r0, sp, #4
 800c944:	f7ff fd59 	bl	800c3fa <__lo0bits>
 800c948:	9b01      	ldr	r3, [sp, #4]
 800c94a:	6163      	str	r3, [r4, #20]
 800c94c:	3020      	adds	r0, #32
 800c94e:	2201      	movs	r2, #1
 800c950:	e7e8      	b.n	800c924 <__d2b+0x64>
 800c952:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c956:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c95a:	6038      	str	r0, [r7, #0]
 800c95c:	6918      	ldr	r0, [r3, #16]
 800c95e:	f7ff fd2d 	bl	800c3bc <__hi0bits>
 800c962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c966:	e7e5      	b.n	800c934 <__d2b+0x74>
 800c968:	0800d1a0 	.word	0x0800d1a0
 800c96c:	0800d1c2 	.word	0x0800d1c2

0800c970 <__sread>:
 800c970:	b510      	push	{r4, lr}
 800c972:	460c      	mov	r4, r1
 800c974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c978:	f000 f978 	bl	800cc6c <_read_r>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	bfab      	itete	ge
 800c980:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c982:	89a3      	ldrhlt	r3, [r4, #12]
 800c984:	181b      	addge	r3, r3, r0
 800c986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c98a:	bfac      	ite	ge
 800c98c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c98e:	81a3      	strhlt	r3, [r4, #12]
 800c990:	bd10      	pop	{r4, pc}

0800c992 <__swrite>:
 800c992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c996:	461f      	mov	r7, r3
 800c998:	898b      	ldrh	r3, [r1, #12]
 800c99a:	05db      	lsls	r3, r3, #23
 800c99c:	4605      	mov	r5, r0
 800c99e:	460c      	mov	r4, r1
 800c9a0:	4616      	mov	r6, r2
 800c9a2:	d505      	bpl.n	800c9b0 <__swrite+0x1e>
 800c9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f000 f94c 	bl	800cc48 <_lseek_r>
 800c9b0:	89a3      	ldrh	r3, [r4, #12]
 800c9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c9ba:	81a3      	strh	r3, [r4, #12]
 800c9bc:	4632      	mov	r2, r6
 800c9be:	463b      	mov	r3, r7
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c6:	f000 b973 	b.w	800ccb0 <_write_r>

0800c9ca <__sseek>:
 800c9ca:	b510      	push	{r4, lr}
 800c9cc:	460c      	mov	r4, r1
 800c9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9d2:	f000 f939 	bl	800cc48 <_lseek_r>
 800c9d6:	1c43      	adds	r3, r0, #1
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	bf15      	itete	ne
 800c9dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c9de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c9e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c9e6:	81a3      	strheq	r3, [r4, #12]
 800c9e8:	bf18      	it	ne
 800c9ea:	81a3      	strhne	r3, [r4, #12]
 800c9ec:	bd10      	pop	{r4, pc}

0800c9ee <__sclose>:
 800c9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9f2:	f000 b8f7 	b.w	800cbe4 <_close_r>

0800c9f6 <__swbuf_r>:
 800c9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	4614      	mov	r4, r2
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	b118      	cbz	r0, 800ca08 <__swbuf_r+0x12>
 800ca00:	6a03      	ldr	r3, [r0, #32]
 800ca02:	b90b      	cbnz	r3, 800ca08 <__swbuf_r+0x12>
 800ca04:	f7fe fad0 	bl	800afa8 <__sinit>
 800ca08:	69a3      	ldr	r3, [r4, #24]
 800ca0a:	60a3      	str	r3, [r4, #8]
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	071a      	lsls	r2, r3, #28
 800ca10:	d501      	bpl.n	800ca16 <__swbuf_r+0x20>
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	b943      	cbnz	r3, 800ca28 <__swbuf_r+0x32>
 800ca16:	4621      	mov	r1, r4
 800ca18:	4628      	mov	r0, r5
 800ca1a:	f000 f82b 	bl	800ca74 <__swsetup_r>
 800ca1e:	b118      	cbz	r0, 800ca28 <__swbuf_r+0x32>
 800ca20:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ca24:	4638      	mov	r0, r7
 800ca26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	6922      	ldr	r2, [r4, #16]
 800ca2c:	1a98      	subs	r0, r3, r2
 800ca2e:	6963      	ldr	r3, [r4, #20]
 800ca30:	b2f6      	uxtb	r6, r6
 800ca32:	4283      	cmp	r3, r0
 800ca34:	4637      	mov	r7, r6
 800ca36:	dc05      	bgt.n	800ca44 <__swbuf_r+0x4e>
 800ca38:	4621      	mov	r1, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	f7ff fbe2 	bl	800c204 <_fflush_r>
 800ca40:	2800      	cmp	r0, #0
 800ca42:	d1ed      	bne.n	800ca20 <__swbuf_r+0x2a>
 800ca44:	68a3      	ldr	r3, [r4, #8]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	60a3      	str	r3, [r4, #8]
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	1c5a      	adds	r2, r3, #1
 800ca4e:	6022      	str	r2, [r4, #0]
 800ca50:	701e      	strb	r6, [r3, #0]
 800ca52:	6962      	ldr	r2, [r4, #20]
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d004      	beq.n	800ca64 <__swbuf_r+0x6e>
 800ca5a:	89a3      	ldrh	r3, [r4, #12]
 800ca5c:	07db      	lsls	r3, r3, #31
 800ca5e:	d5e1      	bpl.n	800ca24 <__swbuf_r+0x2e>
 800ca60:	2e0a      	cmp	r6, #10
 800ca62:	d1df      	bne.n	800ca24 <__swbuf_r+0x2e>
 800ca64:	4621      	mov	r1, r4
 800ca66:	4628      	mov	r0, r5
 800ca68:	f7ff fbcc 	bl	800c204 <_fflush_r>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d0d9      	beq.n	800ca24 <__swbuf_r+0x2e>
 800ca70:	e7d6      	b.n	800ca20 <__swbuf_r+0x2a>
	...

0800ca74 <__swsetup_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4b29      	ldr	r3, [pc, #164]	@ (800cb1c <__swsetup_r+0xa8>)
 800ca78:	4605      	mov	r5, r0
 800ca7a:	6818      	ldr	r0, [r3, #0]
 800ca7c:	460c      	mov	r4, r1
 800ca7e:	b118      	cbz	r0, 800ca88 <__swsetup_r+0x14>
 800ca80:	6a03      	ldr	r3, [r0, #32]
 800ca82:	b90b      	cbnz	r3, 800ca88 <__swsetup_r+0x14>
 800ca84:	f7fe fa90 	bl	800afa8 <__sinit>
 800ca88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca8c:	0719      	lsls	r1, r3, #28
 800ca8e:	d422      	bmi.n	800cad6 <__swsetup_r+0x62>
 800ca90:	06da      	lsls	r2, r3, #27
 800ca92:	d407      	bmi.n	800caa4 <__swsetup_r+0x30>
 800ca94:	2209      	movs	r2, #9
 800ca96:	602a      	str	r2, [r5, #0]
 800ca98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca9c:	81a3      	strh	r3, [r4, #12]
 800ca9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800caa2:	e033      	b.n	800cb0c <__swsetup_r+0x98>
 800caa4:	0758      	lsls	r0, r3, #29
 800caa6:	d512      	bpl.n	800cace <__swsetup_r+0x5a>
 800caa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800caaa:	b141      	cbz	r1, 800cabe <__swsetup_r+0x4a>
 800caac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cab0:	4299      	cmp	r1, r3
 800cab2:	d002      	beq.n	800caba <__swsetup_r+0x46>
 800cab4:	4628      	mov	r0, r5
 800cab6:	f000 f94d 	bl	800cd54 <_free_r>
 800caba:	2300      	movs	r3, #0
 800cabc:	6363      	str	r3, [r4, #52]	@ 0x34
 800cabe:	89a3      	ldrh	r3, [r4, #12]
 800cac0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cac4:	81a3      	strh	r3, [r4, #12]
 800cac6:	2300      	movs	r3, #0
 800cac8:	6063      	str	r3, [r4, #4]
 800caca:	6923      	ldr	r3, [r4, #16]
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	89a3      	ldrh	r3, [r4, #12]
 800cad0:	f043 0308 	orr.w	r3, r3, #8
 800cad4:	81a3      	strh	r3, [r4, #12]
 800cad6:	6923      	ldr	r3, [r4, #16]
 800cad8:	b94b      	cbnz	r3, 800caee <__swsetup_r+0x7a>
 800cada:	89a3      	ldrh	r3, [r4, #12]
 800cadc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cae4:	d003      	beq.n	800caee <__swsetup_r+0x7a>
 800cae6:	4621      	mov	r1, r4
 800cae8:	4628      	mov	r0, r5
 800caea:	f000 f83f 	bl	800cb6c <__smakebuf_r>
 800caee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caf2:	f013 0201 	ands.w	r2, r3, #1
 800caf6:	d00a      	beq.n	800cb0e <__swsetup_r+0x9a>
 800caf8:	2200      	movs	r2, #0
 800cafa:	60a2      	str	r2, [r4, #8]
 800cafc:	6962      	ldr	r2, [r4, #20]
 800cafe:	4252      	negs	r2, r2
 800cb00:	61a2      	str	r2, [r4, #24]
 800cb02:	6922      	ldr	r2, [r4, #16]
 800cb04:	b942      	cbnz	r2, 800cb18 <__swsetup_r+0xa4>
 800cb06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb0a:	d1c5      	bne.n	800ca98 <__swsetup_r+0x24>
 800cb0c:	bd38      	pop	{r3, r4, r5, pc}
 800cb0e:	0799      	lsls	r1, r3, #30
 800cb10:	bf58      	it	pl
 800cb12:	6962      	ldrpl	r2, [r4, #20]
 800cb14:	60a2      	str	r2, [r4, #8]
 800cb16:	e7f4      	b.n	800cb02 <__swsetup_r+0x8e>
 800cb18:	2000      	movs	r0, #0
 800cb1a:	e7f7      	b.n	800cb0c <__swsetup_r+0x98>
 800cb1c:	2400001c 	.word	0x2400001c

0800cb20 <__swhatbuf_r>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	460c      	mov	r4, r1
 800cb24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb28:	2900      	cmp	r1, #0
 800cb2a:	b096      	sub	sp, #88	@ 0x58
 800cb2c:	4615      	mov	r5, r2
 800cb2e:	461e      	mov	r6, r3
 800cb30:	da0d      	bge.n	800cb4e <__swhatbuf_r+0x2e>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb38:	f04f 0100 	mov.w	r1, #0
 800cb3c:	bf14      	ite	ne
 800cb3e:	2340      	movne	r3, #64	@ 0x40
 800cb40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb44:	2000      	movs	r0, #0
 800cb46:	6031      	str	r1, [r6, #0]
 800cb48:	602b      	str	r3, [r5, #0]
 800cb4a:	b016      	add	sp, #88	@ 0x58
 800cb4c:	bd70      	pop	{r4, r5, r6, pc}
 800cb4e:	466a      	mov	r2, sp
 800cb50:	f000 f858 	bl	800cc04 <_fstat_r>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	dbec      	blt.n	800cb32 <__swhatbuf_r+0x12>
 800cb58:	9901      	ldr	r1, [sp, #4]
 800cb5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb62:	4259      	negs	r1, r3
 800cb64:	4159      	adcs	r1, r3
 800cb66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb6a:	e7eb      	b.n	800cb44 <__swhatbuf_r+0x24>

0800cb6c <__smakebuf_r>:
 800cb6c:	898b      	ldrh	r3, [r1, #12]
 800cb6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb70:	079d      	lsls	r5, r3, #30
 800cb72:	4606      	mov	r6, r0
 800cb74:	460c      	mov	r4, r1
 800cb76:	d507      	bpl.n	800cb88 <__smakebuf_r+0x1c>
 800cb78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb7c:	6023      	str	r3, [r4, #0]
 800cb7e:	6123      	str	r3, [r4, #16]
 800cb80:	2301      	movs	r3, #1
 800cb82:	6163      	str	r3, [r4, #20]
 800cb84:	b003      	add	sp, #12
 800cb86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb88:	ab01      	add	r3, sp, #4
 800cb8a:	466a      	mov	r2, sp
 800cb8c:	f7ff ffc8 	bl	800cb20 <__swhatbuf_r>
 800cb90:	9f00      	ldr	r7, [sp, #0]
 800cb92:	4605      	mov	r5, r0
 800cb94:	4639      	mov	r1, r7
 800cb96:	4630      	mov	r0, r6
 800cb98:	f7ff fa30 	bl	800bffc <_malloc_r>
 800cb9c:	b948      	cbnz	r0, 800cbb2 <__smakebuf_r+0x46>
 800cb9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cba2:	059a      	lsls	r2, r3, #22
 800cba4:	d4ee      	bmi.n	800cb84 <__smakebuf_r+0x18>
 800cba6:	f023 0303 	bic.w	r3, r3, #3
 800cbaa:	f043 0302 	orr.w	r3, r3, #2
 800cbae:	81a3      	strh	r3, [r4, #12]
 800cbb0:	e7e2      	b.n	800cb78 <__smakebuf_r+0xc>
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	6020      	str	r0, [r4, #0]
 800cbb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbba:	81a3      	strh	r3, [r4, #12]
 800cbbc:	9b01      	ldr	r3, [sp, #4]
 800cbbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cbc2:	b15b      	cbz	r3, 800cbdc <__smakebuf_r+0x70>
 800cbc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbc8:	4630      	mov	r0, r6
 800cbca:	f000 f82d 	bl	800cc28 <_isatty_r>
 800cbce:	b128      	cbz	r0, 800cbdc <__smakebuf_r+0x70>
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	f023 0303 	bic.w	r3, r3, #3
 800cbd6:	f043 0301 	orr.w	r3, r3, #1
 800cbda:	81a3      	strh	r3, [r4, #12]
 800cbdc:	89a3      	ldrh	r3, [r4, #12]
 800cbde:	431d      	orrs	r5, r3
 800cbe0:	81a5      	strh	r5, [r4, #12]
 800cbe2:	e7cf      	b.n	800cb84 <__smakebuf_r+0x18>

0800cbe4 <_close_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4d06      	ldr	r5, [pc, #24]	@ (800cc00 <_close_r+0x1c>)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4604      	mov	r4, r0
 800cbec:	4608      	mov	r0, r1
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	f7f4 fa66 	bl	80010c0 <_close>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_close_r+0x1a>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_close_r+0x1a>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	24000cec 	.word	0x24000cec

0800cc04 <_fstat_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4d07      	ldr	r5, [pc, #28]	@ (800cc24 <_fstat_r+0x20>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	4611      	mov	r1, r2
 800cc10:	602b      	str	r3, [r5, #0]
 800cc12:	f7f4 fa61 	bl	80010d8 <_fstat>
 800cc16:	1c43      	adds	r3, r0, #1
 800cc18:	d102      	bne.n	800cc20 <_fstat_r+0x1c>
 800cc1a:	682b      	ldr	r3, [r5, #0]
 800cc1c:	b103      	cbz	r3, 800cc20 <_fstat_r+0x1c>
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	bd38      	pop	{r3, r4, r5, pc}
 800cc22:	bf00      	nop
 800cc24:	24000cec 	.word	0x24000cec

0800cc28 <_isatty_r>:
 800cc28:	b538      	push	{r3, r4, r5, lr}
 800cc2a:	4d06      	ldr	r5, [pc, #24]	@ (800cc44 <_isatty_r+0x1c>)
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4608      	mov	r0, r1
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	f7f4 fa60 	bl	80010f8 <_isatty>
 800cc38:	1c43      	adds	r3, r0, #1
 800cc3a:	d102      	bne.n	800cc42 <_isatty_r+0x1a>
 800cc3c:	682b      	ldr	r3, [r5, #0]
 800cc3e:	b103      	cbz	r3, 800cc42 <_isatty_r+0x1a>
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	24000cec 	.word	0x24000cec

0800cc48 <_lseek_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4d07      	ldr	r5, [pc, #28]	@ (800cc68 <_lseek_r+0x20>)
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	4608      	mov	r0, r1
 800cc50:	4611      	mov	r1, r2
 800cc52:	2200      	movs	r2, #0
 800cc54:	602a      	str	r2, [r5, #0]
 800cc56:	461a      	mov	r2, r3
 800cc58:	f7f4 fa59 	bl	800110e <_lseek>
 800cc5c:	1c43      	adds	r3, r0, #1
 800cc5e:	d102      	bne.n	800cc66 <_lseek_r+0x1e>
 800cc60:	682b      	ldr	r3, [r5, #0]
 800cc62:	b103      	cbz	r3, 800cc66 <_lseek_r+0x1e>
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	bd38      	pop	{r3, r4, r5, pc}
 800cc68:	24000cec 	.word	0x24000cec

0800cc6c <_read_r>:
 800cc6c:	b538      	push	{r3, r4, r5, lr}
 800cc6e:	4d07      	ldr	r5, [pc, #28]	@ (800cc8c <_read_r+0x20>)
 800cc70:	4604      	mov	r4, r0
 800cc72:	4608      	mov	r0, r1
 800cc74:	4611      	mov	r1, r2
 800cc76:	2200      	movs	r2, #0
 800cc78:	602a      	str	r2, [r5, #0]
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	f7f4 fa03 	bl	8001086 <_read>
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d102      	bne.n	800cc8a <_read_r+0x1e>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b103      	cbz	r3, 800cc8a <_read_r+0x1e>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	24000cec 	.word	0x24000cec

0800cc90 <_sbrk_r>:
 800cc90:	b538      	push	{r3, r4, r5, lr}
 800cc92:	4d06      	ldr	r5, [pc, #24]	@ (800ccac <_sbrk_r+0x1c>)
 800cc94:	2300      	movs	r3, #0
 800cc96:	4604      	mov	r4, r0
 800cc98:	4608      	mov	r0, r1
 800cc9a:	602b      	str	r3, [r5, #0]
 800cc9c:	f7f4 fa44 	bl	8001128 <_sbrk>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_sbrk_r+0x1a>
 800cca4:	682b      	ldr	r3, [r5, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_sbrk_r+0x1a>
 800cca8:	6023      	str	r3, [r4, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	24000cec 	.word	0x24000cec

0800ccb0 <_write_r>:
 800ccb0:	b538      	push	{r3, r4, r5, lr}
 800ccb2:	4d07      	ldr	r5, [pc, #28]	@ (800ccd0 <_write_r+0x20>)
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	4608      	mov	r0, r1
 800ccb8:	4611      	mov	r1, r2
 800ccba:	2200      	movs	r2, #0
 800ccbc:	602a      	str	r2, [r5, #0]
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	f7f3 fdce 	bl	8000860 <_write>
 800ccc4:	1c43      	adds	r3, r0, #1
 800ccc6:	d102      	bne.n	800ccce <_write_r+0x1e>
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	b103      	cbz	r3, 800ccce <_write_r+0x1e>
 800cccc:	6023      	str	r3, [r4, #0]
 800ccce:	bd38      	pop	{r3, r4, r5, pc}
 800ccd0:	24000cec 	.word	0x24000cec

0800ccd4 <memcpy>:
 800ccd4:	440a      	add	r2, r1
 800ccd6:	4291      	cmp	r1, r2
 800ccd8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ccdc:	d100      	bne.n	800cce0 <memcpy+0xc>
 800ccde:	4770      	bx	lr
 800cce0:	b510      	push	{r4, lr}
 800cce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccea:	4291      	cmp	r1, r2
 800ccec:	d1f9      	bne.n	800cce2 <memcpy+0xe>
 800ccee:	bd10      	pop	{r4, pc}

0800ccf0 <__assert_func>:
 800ccf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccf2:	4614      	mov	r4, r2
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	4b09      	ldr	r3, [pc, #36]	@ (800cd1c <__assert_func+0x2c>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	68d8      	ldr	r0, [r3, #12]
 800ccfe:	b954      	cbnz	r4, 800cd16 <__assert_func+0x26>
 800cd00:	4b07      	ldr	r3, [pc, #28]	@ (800cd20 <__assert_func+0x30>)
 800cd02:	461c      	mov	r4, r3
 800cd04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd08:	9100      	str	r1, [sp, #0]
 800cd0a:	462b      	mov	r3, r5
 800cd0c:	4905      	ldr	r1, [pc, #20]	@ (800cd24 <__assert_func+0x34>)
 800cd0e:	f000 f87d 	bl	800ce0c <fiprintf>
 800cd12:	f000 f89a 	bl	800ce4a <abort>
 800cd16:	4b04      	ldr	r3, [pc, #16]	@ (800cd28 <__assert_func+0x38>)
 800cd18:	e7f4      	b.n	800cd04 <__assert_func+0x14>
 800cd1a:	bf00      	nop
 800cd1c:	2400001c 	.word	0x2400001c
 800cd20:	0800d45e 	.word	0x0800d45e
 800cd24:	0800d430 	.word	0x0800d430
 800cd28:	0800d423 	.word	0x0800d423

0800cd2c <_calloc_r>:
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	fba1 5402 	umull	r5, r4, r1, r2
 800cd32:	b93c      	cbnz	r4, 800cd44 <_calloc_r+0x18>
 800cd34:	4629      	mov	r1, r5
 800cd36:	f7ff f961 	bl	800bffc <_malloc_r>
 800cd3a:	4606      	mov	r6, r0
 800cd3c:	b928      	cbnz	r0, 800cd4a <_calloc_r+0x1e>
 800cd3e:	2600      	movs	r6, #0
 800cd40:	4630      	mov	r0, r6
 800cd42:	bd70      	pop	{r4, r5, r6, pc}
 800cd44:	220c      	movs	r2, #12
 800cd46:	6002      	str	r2, [r0, #0]
 800cd48:	e7f9      	b.n	800cd3e <_calloc_r+0x12>
 800cd4a:	462a      	mov	r2, r5
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f7fe f9d1 	bl	800b0f4 <memset>
 800cd52:	e7f5      	b.n	800cd40 <_calloc_r+0x14>

0800cd54 <_free_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4605      	mov	r5, r0
 800cd58:	2900      	cmp	r1, #0
 800cd5a:	d041      	beq.n	800cde0 <_free_r+0x8c>
 800cd5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd60:	1f0c      	subs	r4, r1, #4
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	bfb8      	it	lt
 800cd66:	18e4      	addlt	r4, r4, r3
 800cd68:	f7ff fa74 	bl	800c254 <__malloc_lock>
 800cd6c:	4a1d      	ldr	r2, [pc, #116]	@ (800cde4 <_free_r+0x90>)
 800cd6e:	6813      	ldr	r3, [r2, #0]
 800cd70:	b933      	cbnz	r3, 800cd80 <_free_r+0x2c>
 800cd72:	6063      	str	r3, [r4, #4]
 800cd74:	6014      	str	r4, [r2, #0]
 800cd76:	4628      	mov	r0, r5
 800cd78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd7c:	f7ff ba70 	b.w	800c260 <__malloc_unlock>
 800cd80:	42a3      	cmp	r3, r4
 800cd82:	d908      	bls.n	800cd96 <_free_r+0x42>
 800cd84:	6820      	ldr	r0, [r4, #0]
 800cd86:	1821      	adds	r1, r4, r0
 800cd88:	428b      	cmp	r3, r1
 800cd8a:	bf01      	itttt	eq
 800cd8c:	6819      	ldreq	r1, [r3, #0]
 800cd8e:	685b      	ldreq	r3, [r3, #4]
 800cd90:	1809      	addeq	r1, r1, r0
 800cd92:	6021      	streq	r1, [r4, #0]
 800cd94:	e7ed      	b.n	800cd72 <_free_r+0x1e>
 800cd96:	461a      	mov	r2, r3
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	b10b      	cbz	r3, 800cda0 <_free_r+0x4c>
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	d9fa      	bls.n	800cd96 <_free_r+0x42>
 800cda0:	6811      	ldr	r1, [r2, #0]
 800cda2:	1850      	adds	r0, r2, r1
 800cda4:	42a0      	cmp	r0, r4
 800cda6:	d10b      	bne.n	800cdc0 <_free_r+0x6c>
 800cda8:	6820      	ldr	r0, [r4, #0]
 800cdaa:	4401      	add	r1, r0
 800cdac:	1850      	adds	r0, r2, r1
 800cdae:	4283      	cmp	r3, r0
 800cdb0:	6011      	str	r1, [r2, #0]
 800cdb2:	d1e0      	bne.n	800cd76 <_free_r+0x22>
 800cdb4:	6818      	ldr	r0, [r3, #0]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	6053      	str	r3, [r2, #4]
 800cdba:	4408      	add	r0, r1
 800cdbc:	6010      	str	r0, [r2, #0]
 800cdbe:	e7da      	b.n	800cd76 <_free_r+0x22>
 800cdc0:	d902      	bls.n	800cdc8 <_free_r+0x74>
 800cdc2:	230c      	movs	r3, #12
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	e7d6      	b.n	800cd76 <_free_r+0x22>
 800cdc8:	6820      	ldr	r0, [r4, #0]
 800cdca:	1821      	adds	r1, r4, r0
 800cdcc:	428b      	cmp	r3, r1
 800cdce:	bf04      	itt	eq
 800cdd0:	6819      	ldreq	r1, [r3, #0]
 800cdd2:	685b      	ldreq	r3, [r3, #4]
 800cdd4:	6063      	str	r3, [r4, #4]
 800cdd6:	bf04      	itt	eq
 800cdd8:	1809      	addeq	r1, r1, r0
 800cdda:	6021      	streq	r1, [r4, #0]
 800cddc:	6054      	str	r4, [r2, #4]
 800cdde:	e7ca      	b.n	800cd76 <_free_r+0x22>
 800cde0:	bd38      	pop	{r3, r4, r5, pc}
 800cde2:	bf00      	nop
 800cde4:	24000ce8 	.word	0x24000ce8

0800cde8 <__ascii_mbtowc>:
 800cde8:	b082      	sub	sp, #8
 800cdea:	b901      	cbnz	r1, 800cdee <__ascii_mbtowc+0x6>
 800cdec:	a901      	add	r1, sp, #4
 800cdee:	b142      	cbz	r2, 800ce02 <__ascii_mbtowc+0x1a>
 800cdf0:	b14b      	cbz	r3, 800ce06 <__ascii_mbtowc+0x1e>
 800cdf2:	7813      	ldrb	r3, [r2, #0]
 800cdf4:	600b      	str	r3, [r1, #0]
 800cdf6:	7812      	ldrb	r2, [r2, #0]
 800cdf8:	1e10      	subs	r0, r2, #0
 800cdfa:	bf18      	it	ne
 800cdfc:	2001      	movne	r0, #1
 800cdfe:	b002      	add	sp, #8
 800ce00:	4770      	bx	lr
 800ce02:	4610      	mov	r0, r2
 800ce04:	e7fb      	b.n	800cdfe <__ascii_mbtowc+0x16>
 800ce06:	f06f 0001 	mvn.w	r0, #1
 800ce0a:	e7f8      	b.n	800cdfe <__ascii_mbtowc+0x16>

0800ce0c <fiprintf>:
 800ce0c:	b40e      	push	{r1, r2, r3}
 800ce0e:	b503      	push	{r0, r1, lr}
 800ce10:	4601      	mov	r1, r0
 800ce12:	ab03      	add	r3, sp, #12
 800ce14:	4805      	ldr	r0, [pc, #20]	@ (800ce2c <fiprintf+0x20>)
 800ce16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce1a:	6800      	ldr	r0, [r0, #0]
 800ce1c:	9301      	str	r3, [sp, #4]
 800ce1e:	f7fe ffab 	bl	800bd78 <_vfiprintf_r>
 800ce22:	b002      	add	sp, #8
 800ce24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce28:	b003      	add	sp, #12
 800ce2a:	4770      	bx	lr
 800ce2c:	2400001c 	.word	0x2400001c

0800ce30 <__ascii_wctomb>:
 800ce30:	4603      	mov	r3, r0
 800ce32:	4608      	mov	r0, r1
 800ce34:	b141      	cbz	r1, 800ce48 <__ascii_wctomb+0x18>
 800ce36:	2aff      	cmp	r2, #255	@ 0xff
 800ce38:	d904      	bls.n	800ce44 <__ascii_wctomb+0x14>
 800ce3a:	228a      	movs	r2, #138	@ 0x8a
 800ce3c:	601a      	str	r2, [r3, #0]
 800ce3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce42:	4770      	bx	lr
 800ce44:	700a      	strb	r2, [r1, #0]
 800ce46:	2001      	movs	r0, #1
 800ce48:	4770      	bx	lr

0800ce4a <abort>:
 800ce4a:	b508      	push	{r3, lr}
 800ce4c:	2006      	movs	r0, #6
 800ce4e:	f000 f82b 	bl	800cea8 <raise>
 800ce52:	2001      	movs	r0, #1
 800ce54:	f7f4 f90c 	bl	8001070 <_exit>

0800ce58 <_raise_r>:
 800ce58:	291f      	cmp	r1, #31
 800ce5a:	b538      	push	{r3, r4, r5, lr}
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	d904      	bls.n	800ce6c <_raise_r+0x14>
 800ce62:	2316      	movs	r3, #22
 800ce64:	6003      	str	r3, [r0, #0]
 800ce66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
 800ce6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce6e:	b112      	cbz	r2, 800ce76 <_raise_r+0x1e>
 800ce70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce74:	b94b      	cbnz	r3, 800ce8a <_raise_r+0x32>
 800ce76:	4628      	mov	r0, r5
 800ce78:	f000 f830 	bl	800cedc <_getpid_r>
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4601      	mov	r1, r0
 800ce80:	4628      	mov	r0, r5
 800ce82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce86:	f000 b817 	b.w	800ceb8 <_kill_r>
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d00a      	beq.n	800cea4 <_raise_r+0x4c>
 800ce8e:	1c59      	adds	r1, r3, #1
 800ce90:	d103      	bne.n	800ce9a <_raise_r+0x42>
 800ce92:	2316      	movs	r3, #22
 800ce94:	6003      	str	r3, [r0, #0]
 800ce96:	2001      	movs	r0, #1
 800ce98:	e7e7      	b.n	800ce6a <_raise_r+0x12>
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cea0:	4620      	mov	r0, r4
 800cea2:	4798      	blx	r3
 800cea4:	2000      	movs	r0, #0
 800cea6:	e7e0      	b.n	800ce6a <_raise_r+0x12>

0800cea8 <raise>:
 800cea8:	4b02      	ldr	r3, [pc, #8]	@ (800ceb4 <raise+0xc>)
 800ceaa:	4601      	mov	r1, r0
 800ceac:	6818      	ldr	r0, [r3, #0]
 800ceae:	f7ff bfd3 	b.w	800ce58 <_raise_r>
 800ceb2:	bf00      	nop
 800ceb4:	2400001c 	.word	0x2400001c

0800ceb8 <_kill_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	4d07      	ldr	r5, [pc, #28]	@ (800ced8 <_kill_r+0x20>)
 800cebc:	2300      	movs	r3, #0
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	4611      	mov	r1, r2
 800cec4:	602b      	str	r3, [r5, #0]
 800cec6:	f7f4 f8c3 	bl	8001050 <_kill>
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	d102      	bne.n	800ced4 <_kill_r+0x1c>
 800cece:	682b      	ldr	r3, [r5, #0]
 800ced0:	b103      	cbz	r3, 800ced4 <_kill_r+0x1c>
 800ced2:	6023      	str	r3, [r4, #0]
 800ced4:	bd38      	pop	{r3, r4, r5, pc}
 800ced6:	bf00      	nop
 800ced8:	24000cec 	.word	0x24000cec

0800cedc <_getpid_r>:
 800cedc:	f7f4 b8b0 	b.w	8001040 <_getpid>

0800cee0 <_init>:
 800cee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee2:	bf00      	nop
 800cee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cee6:	bc08      	pop	{r3}
 800cee8:	469e      	mov	lr, r3
 800ceea:	4770      	bx	lr

0800ceec <_fini>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	bf00      	nop
 800cef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef2:	bc08      	pop	{r3}
 800cef4:	469e      	mov	lr, r3
 800cef6:	4770      	bx	lr
